// scripts/test-sms.js - –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ SMS
const axios = require('axios');
require('dotenv').config();

const API_BASE = 'http://localhost:3000/api';

async function testSMS() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º SMS —Å–µ—Ä–≤–∏—Å...\n');

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞
    console.log('1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å SMS —Å–µ—Ä–≤–∏—Å–∞...');
    const statusResponse = await axios.get(`${API_BASE}/sms/status`);
    console.log('‚úÖ –°—Ç–∞—Ç—É—Å:', statusResponse.data);
    console.log('');

    // 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ SMS
    const testPhone = '+79142667582'; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π –Ω–æ–º–µ—Ä
    console.log(`2Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ SMS –Ω–∞ ${testPhone}...`);
    
    const sendResponse = await axios.post(`${API_BASE}/sms/send`, {
      phone: testPhone
    });
    
    console.log('‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞:', sendResponse.data);
    console.log('');

    // 3. –ñ–¥–µ–º –≤–≤–æ–¥–∞ –∫–æ–¥–∞
    const readline = require('readline');
    const rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout
    });

    rl.question('üîç –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ SMS: ', async (code) => {
      try {
        console.log(`3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ ${code}...`);
        
        const verifyResponse = await axios.post(`${API_BASE}/sms/verify`, {
          phone: testPhone,
          code: code
        });
        
        console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞:', verifyResponse.data);
        
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:', error.response?.data || error.message);
      } finally {
        rl.close();
      }
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.response?.data || error.message);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testSMS();
