// src/routes/sms.js - SMS –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ SMS Aero
const express = require('express');
const axios = require('axios');
const router = express.Router();

// –°–æ–∑–¥–∞–µ–º axios instance –¥–ª—è SMS Aero
const smsAxios = axios.create({
  baseURL: 'https://gate.smsaero.ru/v2',
  timeout: 30000,
  headers: {
    'Authorization': `Basic ${Buffer.from(`${process.env.SMS_AERO_EMAIL}:${process.env.SMS_AERO_API_KEY}`).toString('base64')}`,
    'Content-Type': 'application/json',
    'Accept': 'application/json'
  }
});

// –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∫–æ–¥–æ–≤
const tempCodes = new Map();

// –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ 4-–∑–Ω–∞—á–Ω–æ–≥–æ –∫–æ–¥–∞
function generateCode() {
  return Math.floor(1000 + Math.random() * 9000).toString();
}

// POST /api/sms/send - –û—Ç–ø—Ä–∞–≤–∫–∞ SMS —á–µ—Ä–µ–∑ –Ω–∞—à —Å–µ—Ä–≤–µ—Ä (–ø—Ä–æ–∫—Å–∏ –∫ SMS Aero)
router.post('/send', async (req, res) => {
  try {
    const { phone, code } = req.body;

    console.log('üì± SMS –ó–∞–ø—Ä–æ—Å:', { phone, code: code ? '****' : '–Ω–µ —É–∫–∞–∑–∞–Ω' });

    if (!phone) {
      return res.status(400).json({
        success: false,
        error: '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
      });
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä
    let cleanPhone = phone.replace(/[^\d]/g, '');
    
    // –ü—Ä–∏–≤–æ–¥–∏–º –∫ —Ñ–æ—Ä–º–∞—Ç—É 7XXXXXXXXXX
    if (cleanPhone.startsWith('8') && cleanPhone.length === 11) {
      cleanPhone = '7' + cleanPhone.substring(1);
    } else if (!cleanPhone.startsWith('7')) {
      cleanPhone = '7' + cleanPhone;
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω
    const smsCode = code || generateCode();
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
    tempCodes.set(phone, smsCode);
    tempCodes.set(cleanPhone, smsCode);
    
    console.log(`üîë –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º—ã–π –∫–æ–¥: ${smsCode} –¥–ª—è –Ω–æ–º–µ—Ä–∞: ${cleanPhone}`);

    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
      console.log('üí∞ –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å SMS Aero...');
      
      const balanceResponse = await smsAxios.get('/balance');
      console.log('üí∞ –ë–∞–ª–∞–Ω—Å SMS Aero:', balanceResponse.data);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º SMS —á–µ—Ä–µ–∑ SMS Aero
      console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º SMS —á–µ—Ä–µ–∑ SMS Aero...');
      
      const smsData = {
        number: cleanPhone,
        text: `–°–µ–≤–µ—Ä–Ω–∞—è –ö–æ—Ä–∑–∏–Ω–∞: –í–∞—à –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ ${smsCode} –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ`,
        sign: 'SMS Aero',
        channel: 'DIRECT'
      };

      console.log('üì§ –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:', smsData);

      const smsResponse = await smsAxios.post('/sms/send', smsData);
      
      console.log('‚úÖ –û—Ç–≤–µ—Ç SMS Aero:', smsResponse.data);

      if (smsResponse.data && smsResponse.data.success) {
        console.log('‚úÖ SMS —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ SMS Aero');
        
        return res.json({
          success: true,
          message: 'SMS –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ',
          data: {
            id: smsResponse.data.data?.id,
            phone: cleanPhone
          }
        });
      } else {
        console.log('‚ùå SMS Aero –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É:', smsResponse.data);
        throw new Error(smsResponse.data?.message || '–û—à–∏–±–∫–∞ SMS Aero');
      }

    } catch (smsError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ SMS Aero:', smsError.message);
      
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ SMS Aero, —Å–∏–º—É–ª–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
      if (process.env.NODE_ENV !== 'production' || process.env.MOCK_SMS === 'true') {
        console.log('üîß MOCK SMS: –°–∏–º—É–ª–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏');
        
        return res.json({
          success: true,
          message: 'SMS –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (MOCK)',
          data: {
            id: 'mock_' + Date.now(),
            phone: cleanPhone,
            mock: true
          }
        });
      }
      
      throw smsError;
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS:', error);
    
    return res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS: ' + error.message,
      details: process.env.NODE_ENV !== 'production' ? error.stack : undefined
    });
  }
});

// POST /api/sms/verify - –ü—Ä–æ–≤–µ—Ä–∫–∞ SMS –∫–æ–¥–∞
router.post('/verify', async (req, res) => {
  try {
    const { phone, code } = req.body;

    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ SMS –∫–æ–¥–∞:', { phone, code });

    if (!phone || !code) {
      return res.status(400).json({
        success: false,
        error: '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –∫–æ–¥ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'
      });
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä —Ç–∞–∫ –∂–µ –∫–∞–∫ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ
    let cleanPhone = phone.replace(/[^\d]/g, '');
    if (cleanPhone.startsWith('8') && cleanPhone.length === 11) {
      cleanPhone = '7' + cleanPhone.substring(1);
    } else if (!cleanPhone.startsWith('7')) {
      cleanPhone = '7' + cleanPhone;
    }

    console.log('üîç –ò—â–µ–º –∫–æ–¥ –¥–ª—è –Ω–æ–º–µ—Ä–æ–≤:', { original: phone, clean: cleanPhone });
    console.log('üîç –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∫–æ–¥—ã:', Array.from(tempCodes.keys()));

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ –¥–ª—è –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
    const savedCode = tempCodes.get(phone) || tempCodes.get(cleanPhone);

    if (!savedCode) {
      console.log('‚ùå –ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ');
      return res.status(400).json({
        success: false,
        error: '–ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∏—Å—Ç–µ–∫'
      });
    }

    if (savedCode === code) {
      console.log('‚úÖ –ö–æ–¥ –≤–µ—Ä–Ω—ã–π, —É–¥–∞–ª—è–µ–º –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞');
      
      // –£–¥–∞–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥
      tempCodes.delete(phone);
      tempCodes.delete(cleanPhone);
      
      return res.json({
        success: true,
        message: '–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω'
      });
    } else {
      console.log(`‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –û–∂–∏–¥–∞–ª–∏: ${savedCode}, –ø–æ–ª—É—á–∏–ª–∏: ${code}`);
      return res.status(400).json({
        success: false,
        error: '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥'
      });
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ SMS –∫–æ–¥–∞:', error);
    
    return res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞: ' + error.message
    });
  }
});

// GET /api/sms/status - –°—Ç–∞—Ç—É—Å SMS —Å–µ—Ä–≤–∏—Å–∞
router.get('/status', async (req, res) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SMS Aero
    const balanceResponse = await smsAxios.get('/balance');
    
    res.json({
      success: true,
      service: 'SMS Aero',
      status: 'connected',
      balance: balanceResponse.data?.data?.balance || 'unknown',
      codesInMemory: tempCodes.size
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      service: 'SMS Aero',
      status: 'error',
      error: error.message
    });
  }
});

module.exports = router;
