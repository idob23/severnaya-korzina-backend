// src/routes/batches.js - –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –° API –î–õ–Ø –ü–ê–ù–ï–õ–ò

const express = require('express');
const { PrismaClient } = require('@prisma/client');
const { authenticateToken } = require('../middleware/auth');
const { 
  updateBatchStatistics, 
  getBatchProgressData, 
  getActiveBatchForUser 
} = require('../utils/batchCalculations');

const router = express.Router();
const prisma = new PrismaClient();

// GET /api/batches - –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–∫—É–ø–∫–∏
router.get('/', async (req, res) => {
  try {
    const { status = 'active' } = req.query;
    
    const batches = await prisma.batch.findMany({
      where: {
        ...(status !== 'all' && { status })
      },
      include: {
        batchItems: {
          include: {
            product: {
              include: {
                category: true
              }
            }
          }
        }
      },
      orderBy: {
        createdAt: 'desc'
      }
    });

    res.json({ 
      success: true,
      batches: batches.map(batch => ({
        ...batch,
        targetAmount: parseFloat(batch.targetAmount),
        currentAmount: parseFloat(batch.currentAmount),
        marginPercent: parseFloat(batch.marginPercent)
      }))
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫—É–ø–æ–∫:', error);
    res.status(500).json({
      success: false,
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
});

// GET /api/batches/active - –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é –ø–∞—Ä—Ç–∏—é (–ë–ï–ó –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò)
router.get('/active', async (req, res) => {  // –£–ë–†–ê–õ–ò authenticateToken
  try {
    const activeBatch = await prisma.batch.findFirst({
      where: {
        status: { in: ['active', 'collecting'] }  // –¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã
      },
      orderBy: {
        createdAt: 'desc'
      }
    });

    if (!activeBatch) {
      return res.json({
        success: true,
        batch: null,
        message: '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä—Ç–∏–π'
      });
    }

    res.json({
      success: true,
      batch: {
        id: activeBatch.id,
        title: activeBatch.title,
        status: activeBatch.status,
        targetAmount: parseFloat(activeBatch.targetAmount),
        currentAmount: parseFloat(activeBatch.currentAmount),
        participantsCount: activeBatch.participantsCount,
        progressPercent: activeBatch.progressPercent,
        createdAt: activeBatch.createdAt
      }
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π –ø–∞—Ä—Ç–∏–∏:', error);
    res.status(500).json({
      success: false,
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
});

// GET /api/batches/active/user - –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é –∑–∞–∫—É–ø–∫—É —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.get('/active/user', authenticateToken, async (req, res) => {
  try {
    const userId = req.user?.id;
    
    if (!userId) {
      return res.status(401).json({
        success: false,
        error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'
      });
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é getActiveBatchForUser
    const { getActiveBatchForUser } = require('../utils/batchCalculations');
    const batchData = await getActiveBatchForUser(userId);
    
    if (!batchData) {
      return res.json({
        success: true,
        batch: null,
        message: '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫—É–ø–æ–∫'
      });
    }

    res.json({
      success: true,
      batch: batchData
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–∫—É–ø–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    res.status(500).json({
      success: false,
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
});


// GET /api/batches/:id/progress - –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–∫—É–ø–∫–∏
router.get('/:id/progress', authenticateToken, async (req, res) => {
  try {
    const { id } = req.params;
    const userId = req.user?.id;
    
    const batchData = await getBatchProgressData(parseInt(id), userId);
    
    res.json({
      success: true,
      batch: batchData
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–∫—É–ø–∫–∏:', error);
    
    if (error.message.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω–∞')) {
      return res.status(404).json({
        success: false,
        error: '–ó–∞–∫—É–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
      });
    }

    res.status(500).json({
      success: false,
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
});

// POST /api/batches/:id/recalculate - –ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–∫—É–ø–∫–∏ (–∞–¥–º–∏–Ω)
router.post('/:id/recalculate', authenticateToken, async (req, res) => {
  try {
    const { id } = req.params;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ (–≤ –±—É–¥—É—â–µ–º –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –∞–¥–º–∏–Ω–∞)
    // if (!req.user.isAdmin) {
    //   return res.status(403).json({ error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤' });
    // }
    
    const result = await updateBatchStatistics(parseInt(id));
    
    if (!result.success) {
      return res.status(400).json({
        success: false,
        error: result.error
      });
    }

    res.json({
      success: true,
      message: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω–∞',
      data: result
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    res.status(500).json({
      success: false,
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
});

// GET /api/batches/:id - –ü–æ–ª—É—á–∏—Ç—å –∑–∞–∫—É–ø–∫—É –ø–æ ID —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
router.get('/:id', async (req, res) => {
  try {
    const { id } = req.params;
    
    const batch = await prisma.batch.findUnique({
      where: { id: parseInt(id) },
      include: {
        batchItems: {
          include: {
            product: {
              include: {
                category: true
              }
            }
          }
        },
        orders: {
          include: {
            user: {
              select: {
                id: true,
                firstName: true,
                lastName: true
              }
            },
            orderItems: {
              include: {
                product: true
              }
            }
          }
        }
      }
    });

    if (!batch) {
      return res.status(404).json({
        success: false,
        error: '–ó–∞–∫—É–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
      });
    }

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Decimal –≤ —á–∏—Å–ª–∞ –¥–ª—è JSON
    const batchData = {
      ...batch,
      targetAmount: parseFloat(batch.targetAmount),
      currentAmount: parseFloat(batch.currentAmount),
      marginPercent: parseFloat(batch.marginPercent)
    };

    res.json({ 
      success: true,
      batch: batchData 
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫—É–ø–∫–∏:', error);
    res.status(500).json({
      success: false,
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
});

// POST /api/batches - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–∫—É–ø–∫—É (–∞–¥–º–∏–Ω)
router.post('/', authenticateToken, async (req, res) => {
  try {
    const {
      title,
      description,
      startDate,
      endDate,
      deliveryDate,
      minParticipants = 5,
      maxParticipants,
      targetAmount = 3000000,
      marginPercent = 20,
      pickupAddress
    } = req.body;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!title || !startDate || !endDate) {
      return res.status(400).json({
        success: false,
        error: '–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: title, startDate, endDate'
      });
    }

    const newBatch = await prisma.batch.create({
      data: {
        title,
        description,
        startDate: new Date(startDate),
        endDate: new Date(endDate),
        deliveryDate: deliveryDate ? new Date(deliveryDate) : null,
        minParticipants: parseInt(minParticipants),
        maxParticipants: maxParticipants ? parseInt(maxParticipants) : null,
        targetAmount: parseFloat(targetAmount),
        marginPercent: parseFloat(marginPercent),
        pickupAddress,
        status: 'active',
        // –ù–æ–≤—ã–µ –ø–æ–ª—è —É–∂–µ –∏–º–µ—é—Ç –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        currentAmount: 0,
        participantsCount: 0,
        progressPercent: 0,
        autoLaunch: true
      }
    });

    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–∫—É–ø–∫–∞: ${newBatch.id} - ${newBatch.title}`);

    res.status(201).json({
      success: true,
      message: '–ó–∞–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞',
      batch: {
        ...newBatch,
        targetAmount: parseFloat(newBatch.targetAmount),
        currentAmount: parseFloat(newBatch.currentAmount),
        marginPercent: parseFloat(newBatch.marginPercent)
      }
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫—É–ø–∫–∏:', error);
    res.status(500).json({
      success: false,
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
});

// POST /api/batches/start-collection - –ù–∞—á–∞—Ç—å —Å–±–æ—Ä –¥–µ–Ω–µ–≥
router.post('/start-collection', authenticateToken, async (req, res) => {
  try {
    const { targetAmount, title = '–ö–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–∞—è –∑–∞–∫—É–ø–∫–∞' } = req.body;

   // üî• –î–û–ë–ê–í–ò–¢–¨ –≠–¢–ò 5 –°–¢–†–û–ö:
    if (req.user?.role !== 'admin') {
      return res.status(403).json({
        success: false,
        error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–±–æ—Ä–æ–º –¥–µ–Ω–µ–≥'
      });
    }

    if (!targetAmount || targetAmount <= 0) {
      return res.status(400).json({
        success: false,
        error: '–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–ª–µ–≤—É—é —Å—É–º–º—É'
      });
    }

    // –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –ø–∞—Ä—Ç–∏—é –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
    let activeBatch = await prisma.batch.findFirst({
      where: {
        status: { in: ['active', 'collecting'] }
      }
    });

    if (activeBatch) {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–∞—Ä—Ç–∏—é –ò –°–ë–†–ê–°–´–í–ê–ï–ú –°–ß–ï–¢–ß–ò–ö–ò
      activeBatch = await prisma.batch.update({
        where: { id: activeBatch.id },
        data: {
          targetAmount: parseFloat(targetAmount),
          status: 'collecting',
          currentAmount: 0,           // –°–ë–†–û–° —Å—É–º–º—ã
          participantsCount: 0,       // –°–ë–†–û–° —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
          progressPercent: 0,         // –°–ë–†–û–° –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
          collectionStartDate: new Date(), // –ó–ê–ü–ò–°–´–í–ê–ï–ú –î–ê–¢–£ –ù–ê–ß–ê–õ–ê –ù–û–í–û–ì–û –°–ë–û–†–ê          
          updatedAt: new Date(),
          lastCalculated: new Date()  // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–∞—Å—á–µ—Ç–∞
        }
      });
      
      console.log(`‚úÖ –ù–∞—á–∞—Ç –ù–û–í–´–ô —Å–±–æ—Ä –¥–µ–Ω–µ–≥. –ü–∞—Ä—Ç–∏—è: ${activeBatch.id}, —Å—á–µ—Ç—á–∏–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã`);
      
    } else {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø–∞—Ä—Ç–∏—é
      const tomorrow = new Date();
      tomorrow.setDate(tomorrow.getDate() + 1);
      
      const nextWeek = new Date();
      nextWeek.setDate(nextWeek.getDate() + 7);

      activeBatch = await prisma.batch.create({
        data: {
          title,
          description: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω–∞—è –ø–∞—Ä—Ç–∏—è –¥–ª—è —Å–±–æ—Ä–∞ –∑–∞–∫–∞–∑–æ–≤',
          startDate: new Date(),
          endDate: nextWeek,
          targetAmount: parseFloat(targetAmount),
          status: 'collecting',
          currentAmount: 0,
          participantsCount: 0,
          progressPercent: 0,
          collectionStartDate: new Date() // –ó–ê–ü–ò–°–´–í–ê–ï–ú –î–ê–¢–£ –ù–ê–ß–ê–õ–ê –°–ë–û–†–ê       
        }
      });
      
      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –ø–∞—Ä—Ç–∏—è –¥–ª—è —Å–±–æ—Ä–∞: ${activeBatch.id}`);
    }

    console.log(`‚úÖ –°–±–æ—Ä –¥–µ–Ω–µ–≥ –Ω–∞—á–∞—Ç. –ü–∞—Ä—Ç–∏—è: ${activeBatch.id}, –¶–µ–ª—å: ${targetAmount}‚ÇΩ`);

    res.json({
      success: true,
      message: `–°–±–æ—Ä –¥–µ–Ω–µ–≥ –Ω–∞—á–∞—Ç! –¶–µ–ª–µ–≤–∞—è —Å—É–º–º–∞: ${targetAmount}‚ÇΩ`,
      batch: {
        id: activeBatch.id,
        title: activeBatch.title,
        targetAmount: parseFloat(activeBatch.targetAmount),
        currentAmount: parseFloat(activeBatch.currentAmount),
        status: activeBatch.status
      }
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ —Å–±–æ—Ä–∞ –¥–µ–Ω–µ–≥:', error);
    res.status(500).json({
      success: false,
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
});

// POST /api/batches/stop-collection - –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–±–æ—Ä –¥–µ–Ω–µ–≥
router.post('/stop-collection', authenticateToken, async (req, res) => {
  try {

      // üî• –î–û–ë–ê–í–ò–¢–¨ –≠–¢–ò 5 –°–¢–†–û–ö:
    if (req.user?.role !== 'admin') {
      return res.status(403).json({
        success: false,
        error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–±–æ—Ä–æ–º –¥–µ–Ω–µ–≥'
      });
    }

    // –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –ø–∞—Ä—Ç–∏—é
    const activeBatch = await prisma.batch.findFirst({
      where: {
        status: 'collecting'
      }
    });

    if (!activeBatch) {
      return res.status(400).json({
        success: false,
        error: '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–±–æ—Ä–∞ –¥–µ–Ω–µ–≥'
      });
    }

    // –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å—Ç–∞—Ç—É—Å "–≥–æ—Ç–æ–≤–∞"
    const updatedBatch = await prisma.batch.update({
      where: { id: activeBatch.id },
      data: {
        status: 'completed',
        updatedAt: new Date()
      }
    });

    console.log(`‚úÖ –°–±–æ—Ä –¥–µ–Ω–µ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –ü–∞—Ä—Ç–∏—è: ${activeBatch.id}`);

    res.json({
      success: true,
      message: '–°–±–æ—Ä –¥–µ–Ω–µ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω! –ü–∞—Ä—Ç–∏—è –≥–æ—Ç–æ–≤–∞ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ.',
      batch: {
        id: updatedBatch.id,
        title: updatedBatch.title,
        targetAmount: parseFloat(updatedBatch.targetAmount),
        currentAmount: parseFloat(updatedBatch.currentAmount),
        status: updatedBatch.status
      }
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–±–æ—Ä–∞ –¥–µ–Ω–µ–≥:', error);
    res.status(500).json({
      success: false,
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
});

// GET /api/batches/active - –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é –ø–∞—Ä—Ç–∏—é
router.get('/active', async (req, res) => {
  try {
    const activeBatch = await prisma.batch.findFirst({
      where: {
        status: { in: ['active', 'collecting'] }
      },
      orderBy: {
        createdAt: 'desc'
      }
    });

    if (!activeBatch) {
      return res.json({
        success: true,
        batch: null,
        message: '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä—Ç–∏–π'
      });
    }

    res.json({
      success: true,
      batch: {
        id: activeBatch.id,
        title: activeBatch.title,
        status: activeBatch.status,
        targetAmount: parseFloat(activeBatch.targetAmount),
        currentAmount: parseFloat(activeBatch.currentAmount),
        participantsCount: activeBatch.participantsCount,
        progressPercent: activeBatch.progressPercent,
        createdAt: activeBatch.createdAt
      }
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π –ø–∞—Ä—Ç–∏–∏:', error);
    res.status(500).json({
      success: false,
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
});

// PUT /api/batches/:id/title - –û–±–Ω–æ–≤–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–∫—É–ø–∫–∏
router.put('/:id/title', authenticateToken, async (req, res) => {
  try {
    const { id } = req.params;
    const { title } = req.body;

    console.log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–∫—É–ø–∫–∏ ${id}: "${title}"`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if (!title || title.trim().length === 0) {
      return res.status(400).json({
        success: false,
        error: '–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–∫—É–ø–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'
      });
    }

    if (title.length > 100) {
      return res.status(400).json({
        success: false,
        error: '–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤)'
      });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫—É–ø–∫—É
    const updatedBatch = await prisma.batch.update({
      where: { id: parseInt(id) },
      data: { 
        title: title.trim(),
        updatedAt: new Date()
      }
    });

    console.log(`‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–∫—É–ø–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: ${id} -> "${title}"`);

    res.json({
      success: true,
      message: '–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–∫—É–ø–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–æ',
      batch: {
        id: updatedBatch.id,
        title: updatedBatch.title,
        updatedAt: updatedBatch.updatedAt
      }
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–∫—É–ø–∫–∏:', error);
    
    if (error.code === 'P2025') {
      return res.status(404).json({
        success: false,
        error: '–ó–∞–∫—É–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
      });
    }

    res.status(500).json({
      success: false,
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
});

module.exports = router;
