// src/server.js - –§–ò–ù–ê–õ–¨–ù–ê–Ø –ò–ù–¢–ï–ì–†–ò–†–û–í–ê–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
const express = require('express');
const cors = require('cors');
const helmet = require('helmet');
const compression = require('compression');
const morgan = require('morgan');
const rateLimit = require('express-rate-limit');
require('dotenv').config();

const { PrismaClient } = require('@prisma/client');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
const app = express();
const prisma = new PrismaClient();
const PORT = process.env.PORT || 3000;

// Middleware –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
app.use(helmet({
  crossOriginResourcePolicy: { policy: "cross-origin" }
}));
app.use(compression());

// CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Flutter –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app.use(cors({
  origin: process.env.ALLOWED_ORIGINS?.split(',') || [
    'http://localhost:3000', 
    'http://localhost:8080',
    'http://10.0.2.2:3000', // Android —ç–º—É–ª—è—Ç–æ—Ä
    'http://127.0.0.1:3000'
  ],
  credentials: true,
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization']
}));

// Rate limiting
const generalLimiter = rateLimit({
  windowMs: (process.env.RATE_LIMIT_WINDOW || 15) * 60 * 1000,
  max: process.env.RATE_LIMIT_MAX_REQUESTS || 100,
  message: {
    error: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ',
    retryAfter: Math.ceil((process.env.RATE_LIMIT_WINDOW || 15) * 60)
  },
  standardHeaders: true,
  legacyHeaders: false
});

// –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π rate limiting –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
const authLimiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 –º–∏–Ω—É—Ç
  max: 5, // 5 –ø–æ–ø—ã—Ç–æ–∫ –Ω–∞ IP
  message: {
    error: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç'
  },
  keyGenerator: (req) => {
    return req.body.phone || req.ip;
  }
});

// –ü—Ä–∏–º–µ–Ω—è–µ–º rate limiting
app.use('/api/', generalLimiter);

// –ü–∞—Ä—Å–∏–Ω–≥ JSON –∏ URL-encoded –¥–∞–Ω–Ω—ã—Ö
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true, limit: '10mb' }));

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
if (process.env.NODE_ENV !== 'production') {
  app.use(morgan('dev'));
} else {
  app.use(morgan('combined'));
}

// Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ debug —Ä–µ–∂–∏–º–µ
if (process.env.DEBUG_REQUESTS === 'true') {
  app.use((req, res, next) => {
    console.log(`üì• ${req.method} ${req.originalUrl}`, {
      body: req.body,
      query: req.query,
      headers: {
        'content-type': req.headers['content-type'],
        'authorization': req.headers.authorization ? 'Bearer ***' : undefined
      }
    });
    next();
  });
}

// === –ë–ê–ó–û–í–´–ï –ú–ê–†–®–†–£–¢–´ ===

// –ö–æ—Ä–Ω–µ–≤–æ–π –º–∞—Ä—à—Ä—É—Ç
app.get('/', (req, res) => {
  res.json({
    message: 'üõí –°–µ–≤–µ—Ä–Ω–∞—è –∫–æ—Ä–∑–∏–Ω–∞ API',
    version: '1.0.0',
    status: 'running',
    timestamp: new Date().toISOString(),
    environment: process.env.NODE_ENV || 'development',
    endpoints: {
      health: '/health',
      api: '/api',
      auth: '/api/auth',
      users: '/api/users',
      admin: '/api/admin',
      products: '/api/products',
      orders: '/api/orders',
      batches: '/api/batches'
    }
  });
});

// Health check —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ë–î
app.get('/health', async (req, res) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    await prisma.$queryRaw`SELECT 1`;
    
    const healthData = {
      status: 'healthy',
      database: 'connected',
      uptime: process.uptime(),
      timestamp: new Date().toISOString(),
      memory: {
        used: Math.round(process.memoryUsage().heapUsed / 1024 / 1024 * 100) / 100,
        total: Math.round(process.memoryUsage().heapTotal / 1024 / 1024 * 100) / 100
      },
      version: '1.0.0',
      environment: process.env.NODE_ENV || 'development'
    };

    res.json(healthData);
  } catch (error) {
    console.error('‚ùå Health check failed:', error);
    res.status(500).json({
      status: 'unhealthy',
      database: 'disconnected',
      error: error.message,
      timestamp: new Date().toISOString()
    });
  }
});

// API Info
app.get('/api', (req, res) => {
  res.json({
    name: '–°–µ–≤–µ—Ä–Ω–∞—è –∫–æ—Ä–∑–∏–Ω–∞ API',
    version: '1.0.0',
    description: 'API –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫—É–ø–æ–∫',
    author: 'Severnaya Korzina Team',
    endpoints: {
      // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
      auth: {
        login: 'POST /api/auth/login',
        register: 'POST /api/auth/register',
        profile: 'GET /api/auth/profile',
        check: 'GET /api/auth/check'
      },
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
      users: {
        list: 'GET /api/users',
        get: 'GET /api/users/:id',
        update: 'PUT /api/users/:id',
        addresses: 'GET|POST /api/addresses'
      },
      // –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
      admin: {
        dashboard: 'GET /api/admin/dashboard/stats',
        users: 'GET /api/admin/users',
        products: 'GET|POST|PUT|DELETE /api/admin/products',
        orders: 'GET /api/admin/orders',
        batches: 'GET|POST|PUT /api/admin/batches'
      },
      // –¢–æ–≤–∞—Ä—ã –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      products: {
        list: 'GET /api/products',
        get: 'GET /api/products/:id',
        categories: 'GET /api/categories'
      },
      // –ó–∞–∫–∞–∑—ã
      orders: {
        list: 'GET /api/orders',
        create: 'POST /api/orders',
        get: 'GET /api/orders/:id'
      },
      // –ó–∞–∫—É–ø–∫–∏
      batches: {
        list: 'GET /api/batches',
        get: 'GET /api/batches/:id'
      }
    },
    documentation: process.env.API_DOCS_URL || '–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ'
  });
});

// === API –ú–ê–†–®–†–£–¢–´ ===

// –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è (—Å rate limiting)
app.use('/api/auth', authLimiter, require('./routes/auth'));

// –û—Å–Ω–æ–≤–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
app.use('/api/users', require('./routes/users'));
app.use('/api/addresses', require('./routes/addresses'));
app.use('/api/admin-auth', require('./routes/admin-auth')); // –ù–û–í–´–ô –†–û–£–¢ –î–õ–Ø –ê–î–ú–ò–ù–ê
app.use('/api/products', require('./routes/products'));
app.use('/api/orders', require('./routes/orders'));
app.use('/api/batches', require('./routes/batches'));
app.use('/api/auth', require('./routes/auth'));


// –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å (–Ω–æ–≤—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã)
app.use('/api/admin', require('./routes/admin'));

// Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
app.use('*', (req, res, next) => {
  console.log(`‚ùå 404: ${req.method} ${req.originalUrl} from ${req.ip}`);
  next();
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ 404
app.use('*', (req, res) => {
  res.status(404).json({
    error: '–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω',
    path: req.originalUrl,
    method: req.method,
    timestamp: new Date().toISOString(),
    suggestion: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å URL –∏ –º–µ—Ç–æ–¥–∞ –∑–∞–ø—Ä–æ—Å–∞',
    availableEndpoints: [
      '/api/auth',
      '/api/users', 
      '/api/admin-auth', // –î–û–ë–ê–í–¨–¢–ï –≠–¢–£ –°–¢–†–û–ö–£
      '/api/addresses',
      '/api/products',
      '/api/orders',
      '/api/batches',
      '/api/admin'
    ]
  });
});

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
app.use((error, req, res, next) => {
  console.error('üö® –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
  
  // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
  console.error('–î–µ—Ç–∞–ª–∏ –∑–∞–ø—Ä–æ—Å–∞:', {
    method: req.method,
    url: req.originalUrl,
    body: req.body,
    query: req.query,
    headers: {
      'content-type': req.headers['content-type'],
      'user-agent': req.headers['user-agent'],
      'authorization': req.headers.authorization ? 'Bearer ***' : undefined
    },
    ip: req.ip
  });

  // –†–∞–∑–ª–∏—á–∞–µ–º —Ç–∏–ø—ã –æ—à–∏–±–æ–∫ Prisma
  if (error.code === 'P2002') { // Unique constraint violation
    return res.status(409).json({
      error: '–ö–æ–Ω—Ñ–ª–∏–∫—Ç –¥–∞–Ω–Ω—ã—Ö',
      message: '–ó–∞–ø–∏—Å—å —Å —Ç–∞–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç',
      code: 'UNIQUE_CONSTRAINT_VIOLATION'
    });
  }

  if (error.code === 'P2025') { // Record not found
    return res.status(404).json({
      error: '–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞',
      code: 'RECORD_NOT_FOUND'
    });
  }

  if (error.code === 'P2003') { // Foreign key constraint
    return res.status(400).json({
      error: '–ù–∞—Ä—É—à–µ–Ω–∏–µ —Å–≤—è–∑–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö',
      message: '–°—Å—ã–ª–∫–∞ –Ω–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å',
      code: 'FOREIGN_KEY_CONSTRAINT'
    });
  }

  // –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
  if (error.name === 'ValidationError') {
    return res.status(400).json({
      error: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö',
      details: error.message,
      code: 'VALIDATION_ERROR'
    });
  }

  // JWT –æ—à–∏–±–∫–∏
  if (error.name === 'JsonWebTokenError') {
    return res.status(401).json({
      error: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω',
      code: 'INVALID_TOKEN'
    });
  }

  if (error.name === 'TokenExpiredError') {
    return res.status(401).json({
      error: '–¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫',
      code: 'TOKEN_EXPIRED'
    });
  }

  // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
  res.status(error.status || 500).json({
    error: process.env.NODE_ENV === 'production' 
      ? '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' 
      : error.message,
    timestamp: new Date().toISOString(),
    ...(process.env.NODE_ENV !== 'production' && { 
      stack: error.stack,
      name: error.name
    })
  });
});

// Graceful shutdown
const gracefulShutdown = async (signal) => {
  console.log(`üìü –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª ${signal}, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...`);
  
  try {
    await prisma.$disconnect();
    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∫–ª—é—á–µ–Ω–∞');
    process.exit(0);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –ë–î:', error);
    process.exit(1);
  }
};

process.on('SIGTERM', () => gracefulShutdown('SIGTERM'));
process.on('SIGINT', () => gracefulShutdown('SIGINT'));

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
process.on('unhandledRejection', (reason, promise) => {
  console.error('üö® Unhandled Promise Rejection:', reason);
  console.error('Promise:', promise);
});

process.on('uncaughtException', (error) => {
  console.error('üö® Uncaught Exception:', error);
  process.exit(1);
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const server = app.listen(PORT, () => {
  console.log('='.repeat(50));
  console.log('üöÄ –°–µ—Ä–≤–µ—Ä "–°–µ–≤–µ—Ä–Ω–∞—è –∫–æ—Ä–∑–∏–Ω–∞" –∑–∞–ø—É—â–µ–Ω!');
  console.log('='.repeat(50));
  console.log(`üåç –ü–æ—Ä—Ç: ${PORT}`);
  console.log(`üîß Environment: ${process.env.NODE_ENV || 'development'}`);
  console.log(`üìö API –¥–æ—Å—Ç—É–ø–µ–Ω: http://localhost:${PORT}/api`);
  console.log(`‚ù§Ô∏è  Health check: http://localhost:${PORT}/health`);
  console.log(`üéØ Flutter Admin: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ http://localhost:${PORT}`);
  
  if (process.env.NODE_ENV !== 'production') {
    console.log('='.repeat(50));
    console.log('üîß –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏:');
    console.log('   npx prisma studio    - Prisma Studio');
    console.log('   npx prisma migrate   - –ú–∏–≥—Ä–∞—Ü–∏–∏ –ë–î');
    console.log('   npm run dev          - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞');
    console.log('='.repeat(50));
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å–µ—Ä–≤–µ—Ä–∞
server.on('error', (error) => {
  console.error('='.repeat(50));
  if (error.code === 'EADDRINUSE') {
    console.error(`‚ùå –ü–æ—Ä—Ç ${PORT} —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è`);
    console.error('üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:');
    console.error('   - –ò–∑–º–µ–Ω–∏—Ç—å PORT –≤ .env —Ñ–∞–π–ª–µ');
    console.error('   - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ —ç—Ç–æ–º –ø–æ—Ä—Ç—É');
    console.error(`   - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å: lsof -ti:${PORT} | xargs kill -9`);
  } else {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
  }
  console.error('='.repeat(50));
  process.exit(1);
});

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è —Ç–µ—Å—Ç–æ–≤
module.exports = app;