// src/routes/orders.js - –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –° –ê–í–¢–û–û–ë–ù–û–í–õ–ï–ù–ò–ï–ú –°–¢–ê–¢–ò–°–¢–ò–ö–ò

const express = require('express');
const { PrismaClient } = require('@prisma/client');
const { authenticateToken } = require('../middleware/auth');
const { 
  checkUserStatus, 
  checkProductAvailability 
} = require('../middleware/safety');
const { updateBatchOnOrderChange } = require('../utils/batchCalculations');

const router = express.Router();
const prisma = new PrismaClient();

// –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ –≤—Å–µ–º –º–∞—Ä—à—Ä—É—Ç–∞–º
router.use(authenticateToken);
router.use(checkUserStatus);

// POST /api/orders - –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑ —Å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–∫—É–ø–∫–∏
router.post('/', checkProductAvailability, async (req, res) => {
  try {
    console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞...');
    console.log('üìù –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', req.body);
    const { addressId, items, notes } = req.body;

    if (!addressId || !items || items.length === 0) {
      return res.status(400).json({
        error: '–¢–æ–≤–∞—Ä—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'
      });
    }

    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º/—Å–æ–∑–¥–∞–µ–º –∞–¥—Ä–µ—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    let validAddressId = parseInt(addressId) || 1;

    console.log(`üè† –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥—Ä–µ—Å —Å ID: ${validAddressId} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${req.user.id}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∞–¥—Ä–µ—Å —É –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const addressExists = await prisma.address.findFirst({
      where: { 
        id: validAddressId,
        userId: req.user.id 
      }
    });

    if (!addressExists) {
      console.log('‚ö†Ô∏è –ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –∞–¥—Ä–µ—Å...');
      
      // –°–æ–∑–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –∞–¥—Ä–µ—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const defaultAddress = await prisma.address.create({
        data: {
          userId: req.user.id,
          title: '–û—Å–Ω–æ–≤–Ω–æ–π –∞–¥—Ä–µ—Å',
          address: '–ø–æ—Å. –£—Å—Ç—å-–ù–µ—Ä–∞',
          isDefault: true
        }
      });
      
      validAddressId = defaultAddress.id;
      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –∞–¥—Ä–µ—Å —Å ID: ${validAddressId}`);
    } else {
      console.log(`‚úÖ –ê–¥—Ä–µ—Å –Ω–∞–π–¥–µ–Ω: ${addressExists.title}`);
    }

     // ‚úÖ –ù–û–í–û–ï: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—â–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∑–∞–∫—É–ø–∫—É
    const activeBatch = await prisma.batch.findFirst({
      where: {
        status: { in: ['active', 'collecting'] }
      },
      orderBy: {
        createdAt: 'desc'
      }
    });

    console.log('üì¶ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–∫—É–ø–∫–∏:', activeBatch);

    // –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–∫—É–ø–∫–∏ - –ª–æ–≥–∏—Ä—É–µ–º —ç—Ç–æ
    if (!activeBatch) {
      console.log('‚ö†Ô∏è –ù–ï–¢ –ê–ö–¢–ò–í–ù–û–ô –ó–ê–ö–£–ü–ö–ò - —Å–æ–∑–¥–∞–µ—Ç—Å—è –∑–∞–∫–∞–∑ –±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏');
    } else {
      console.log(`‚úÖ –ù–ê–ô–î–ï–ù–ê –ê–ö–¢–ò–í–ù–ê–Ø –ó–ê–ö–£–ü–ö–ê: ${activeBatch.id} - ${activeBatch.title}`);
      console.log(`üìä –°—Ç–∞—Ç—É—Å –∑–∞–∫—É–ø–∫–∏: ${activeBatch.status}`);
    }

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏
    const totalAmount = items.reduce((sum, item) => {
      return sum + (parseFloat(item.price) * parseInt(item.quantity));
    }, 0);

    console.log(`üí∞ –û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞: ${totalAmount}`);
    console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${req.user.id}`);
    console.log(`üìç –ê–¥—Ä–µ—Å: ${addressId}`);
    console.log(`üõí batchId –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${activeBatch ? activeBatch.id : 'null'}`);

    // –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const result = await prisma.$transaction(async (tx) => {
      console.log('üîÑ –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...');
      // 1. –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
      const newOrder = await tx.order.create({
        data: {
          userId: req.user.id,
          addressId: validAddressId,   //–ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞–ª–∏–¥–Ω—ã–π –∞–¥—Ä–µ—Å
          batchId: activeBatch ? activeBatch.id : null,    //–ê–≤—Ç–æ–ø—Ä–∏–≤—è–∑–∫–∞
          totalAmount: parseFloat(totalAmount.toFixed(2)),
          notes: notes || null,
          status: 'pending'
        }
      });

      console.log(`‚úÖ –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω –≤ –ë–î: ID=${newOrder.id}, batchId=${newOrder.batchId}`);

      // 2. –°–æ–∑–¥–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–∞
      await tx.orderItem.createMany({
        data: items.map(item => ({
          orderId: newOrder.id,
          productId: parseInt(item.productId),
          quantity: parseInt(item.quantity),
          price: parseFloat(item.price)
        }))
      });

      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${items.length} –ø–æ–∑–∏—Ü–∏–π –∑–∞–∫–∞–∑–∞`);

      return newOrder;
    });

    console.log(`üéØ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ó–∞–∫–∞–∑ ID: ${result.id}`);

    // 3. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–∫—É–ø–∫–∏ (–µ—Å–ª–∏ –∑–∞–∫–∞–∑ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∑–∞–∫—É–ø–∫–µ)
    if (activeBatch) {
      console.log(`üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–∫—É–ø–∫–∏ ${activeBatch.id}...`);
      await updateBatchOnOrderChange(result.id, 'create');
      console.log(`üîÑ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫—É–ø–∫–∏ ${activeBatch.id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ ${result.id}`);
    } else {
      console.log('‚ö†Ô∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ù–ï –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è - –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–∫—É–ø–∫–∏');
    }

    console.log(`‚úÖ –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω: ${result.id} –Ω–∞ —Å—É–º–º—É ${totalAmount}`);

    res.status(201).json({
      success: true,
      message: '–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ',
      order: {
        id: result.id,
        totalAmount: result.totalAmount,
        status: result.status,
        createdAt: result.createdAt,
         batchId: activeBatch ? activeBatch.id : null, // ‚úÖ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫—É–ø–∫–µ
        batchTitle: activeBatch ? activeBatch.title : null
      }
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error);
    console.error('‚ùå Stack trace:', error.stack);

    if (error.code === 'P2003') {
      return res.status(400).json({
        error: '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞'
      });
    }

    res.status(500).json({
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
});

// GET /api/orders - –ü–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.get('/', async (req, res) => {
  try {
    const { status, limit = 50 } = req.query;

    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ user –∏ id
    if (!req.user || !req.user.id) {
      console.log('‚ùå User data missing:', req.user);
      return res.status(401).json({
        error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'
      });
    }

    const whereClause = {
      userId: req.user.id,
      ...(status && { status })
    };

    console.log('üîç WHERE —É—Å–ª–æ–≤–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤:', whereClause);

    const orders = await prisma.order.findMany({
      where: whereClause,
      include: {
        address: {
          select: {
            title: true,
            address: true
          }
        },
        batch: {
          select: {
            id: true,
            title: true,
            status: true
          }
        },
        orderItems: {
          include: {
            product: {
              select: {
                id: true,
                name: true,
                unit: true,
                imageUrl: true
              }
            }
          }
        }
      },
      orderBy: {
        createdAt: 'desc'
      },
      take: parseInt(limit)
    });

       console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: ${orders.length}`);

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Decimal –≤ —á–∏—Å–ª–∞
    const ordersData = orders.map(order => ({
      ...order,
      totalAmount: parseFloat(order.totalAmount),
      orderItems: order.orderItems.map(item => ({
        ...item,
        price: parseFloat(item.price)
      }))
    }));

    res.json({
      success: true,
      orders: ordersData
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤:', error);
    res.status(500).json({
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
});

// GET /api/orders/:id - –ü–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑ –ø–æ ID
router.get('/:id', async (req, res) => {
  try {
    const { id } = req.params;

    const order = await prisma.order.findFirst({
      where: {
        id: parseInt(id),
        userId: req.user.id // –¢–æ–ª—å–∫–æ –∑–∞–∫–∞–∑—ã —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      },
      include: {
        address: true,
        batch: {
          select: {
            id: true,
            title: true,
            status: true,
            deliveryDate: true
          }
        },
        orderItems: {
          include: {
            product: {
              include: {
                category: {
                  select: {
                    name: true
                  }
                }
              }
            }
          }
        }
      }
    });

    if (!order) {
      return res.status(404).json({
        error: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
    }

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Decimal –≤ —á–∏—Å–ª–∞
    const orderData = {
      ...order,
      totalAmount: parseFloat(order.totalAmount),
      orderItems: order.orderItems.map(item => ({
        ...item,
        price: parseFloat(item.price)
      }))
    };

    res.json({
      success: true,
      order: orderData
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error);
    res.status(500).json({
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
});

// PUT /api/orders/:id - –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–∫–∞–∑ (—Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç—É—Å –∏ –∑–∞–º–µ—Ç–∫–∏)
router.put('/:id', async (req, res) => {
  try {
    const { id } = req.params;
    const { status, notes } = req.body;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const existingOrder = await prisma.order.findFirst({
      where: {
        id: parseInt(id),
        userId: req.user.id
      }
    });

    if (!existingOrder) {
      return res.status(404).json({
        error: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å—Ç–∞—Ç—É—Å—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    const allowedStatuses = ['pending', 'cancelled'];
    if (status && !allowedStatuses.includes(status)) {
      return res.status(400).json({
        error: '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞'
      });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑
    const updatedOrder = await prisma.order.update({
      where: { id: parseInt(id) },
      data: {
        ...(status && { status }),
        ...(notes !== undefined && { notes }),
        updatedAt: new Date()
      }
    });

    // –ï—Å–ª–∏ –∑–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω —Å—Ç–∞—Ç—É—Å - –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–∫—É–ø–∫–∏
    if (status && existingOrder.batchId) {
      await updateBatchOnOrderChange(parseInt(id), 'update');
    }

    console.log(`‚úÖ –ó–∞–∫–∞–∑ ${id} –æ–±–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${req.user.id}`);

    res.json({
      success: true,
      message: '–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω',
      order: {
        ...updatedOrder,
        totalAmount: parseFloat(updatedOrder.totalAmount)
      }
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error);
    res.status(500).json({
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
});

// DELETE /api/orders/:id - –£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å pending)
router.delete('/:id', async (req, res) => {
  try {
    const { id } = req.params;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–∫–∞–∑
    const existingOrder = await prisma.order.findFirst({
      where: {
        id: parseInt(id),
        userId: req.user.id,
        status: 'pending' // –ú–æ–∂–Ω–æ —É–¥–∞–ª—è—Ç—å —Ç–æ–ª—å–∫–æ –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã
      }
    });

    if (!existingOrder) {
      return res.status(404).json({
        error: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω'
      });
    }

    // –£–¥–∞–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    await prisma.$transaction(async (tx) => {
      // –£–¥–∞–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–∞
      await tx.orderItem.deleteMany({
        where: { orderId: parseInt(id) }
      });

      // –£–¥–∞–ª—è–µ–º —Å–∞–º –∑–∞–∫–∞–∑
      await tx.order.delete({
        where: { id: parseInt(id) }
      });
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–∫—É–ø–∫–∏
    if (existingOrder.batchId) {
      await updateBatchOnOrderChange(parseInt(id), 'delete');
    }

    console.log(`‚úÖ –ó–∞–∫–∞–∑ ${id} —É–¥–∞–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${req.user.id}`);

    res.json({
      success: true,
      message: '–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω'
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error);
    res.status(500).json({
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
});

module.exports = router;
