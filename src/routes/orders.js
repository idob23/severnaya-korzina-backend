// src/routes/orders.js - –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –° –ê–í–¢–û–û–ë–ù–û–í–õ–ï–ù–ò–ï–ú –°–¢–ê–¢–ò–°–¢–ò–ö–ò

const express = require('express');
const { PrismaClient } = require('@prisma/client');
const { authenticateToken } = require('../middleware/auth');
const { 
  checkUserStatus, 
  checkProductAvailability 
} = require('../middleware/safety');
const { updateBatchOnOrderChange } = require('../utils/batchCalculations');

const router = express.Router();
const prisma = new PrismaClient();

// –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ –≤—Å–µ–º –º–∞—Ä—à—Ä—É—Ç–∞–º
router.use(authenticateToken);
router.use(checkUserStatus);


// === –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –û–°–¢–ê–¢–ö–ê–ú–ò ===

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–æ–≤ –∏ —É–º–µ–Ω—å—à–∞–µ—Ç maxQuantity –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞
 * @param {Array} items - –º–∞—Å—Å–∏–≤ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∑–∞–∫–∞–∑–∞
 * @param {PrismaClient} prisma - –∏–Ω—Å—Ç–∞–Ω—Å Prisma –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
 * @returns {Promise<void>} - –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É –µ—Å–ª–∏ —Ç–æ–≤–∞—Ä–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ
 */
async function processOrderStock(items, prisma) {
  for (const item of items) {
    const product = await prisma.product.findUnique({
      where: { id: item.productId }
    });

    if (!product) {
      throw new Error(`–¢–æ–≤–∞—Ä —Å ID ${item.productId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }

    // –ï—Å–ª–∏ —É —Ç–æ–≤–∞—Ä–∞ –µ—Å—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É
    if (product.maxQuantity !== null) {
      if (product.maxQuantity < item.quantity) {
        throw new Error(
          `–¢–æ–≤–∞—Ä–∞ "${product.name}" –æ—Å—Ç–∞–ª–æ—Å—å —Ç–æ–ª—å–∫–æ ${product.maxQuantity} ${product.unit}. –í—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å –∑–∞–∫–∞–∑–∞—Ç—å ${item.quantity}`
        );
      }

      // –£–º–µ–Ω—å—à–∞–µ–º –æ—Å—Ç–∞—Ç–æ–∫
      await prisma.product.update({
        where: { id: item.productId },
        data: {
          maxQuantity: product.maxQuantity - item.quantity
        }
      });
      
      console.log(`üì¶ –£–º–µ–Ω—å—à–µ–Ω –æ—Å—Ç–∞—Ç–æ–∫ —Ç–æ–≤–∞—Ä–∞ "${product.name}": –±—ã–ª–æ ${product.maxQuantity}, —Å—Ç–∞–ª–æ ${product.maxQuantity - item.quantity}`);
    }
  }
}

/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å—Ç–∞—Ç–∫–∏ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–∞
 * @param {number} orderId - ID –∑–∞–∫–∞–∑–∞
 * @param {PrismaClient} prisma - –∏–Ω—Å—Ç–∞–Ω—Å Prisma
 * @returns {Promise<void>}
 */
async function returnOrderStock(orderId, prisma) {
  const orderItems = await prisma.orderItem.findMany({
    where: { orderId },
    include: { product: true }
  });

  for (const item of orderItems) {
    if (item.product.maxQuantity !== null) {
      await prisma.product.update({
        where: { id: item.productId },
        data: {
          maxQuantity: item.product.maxQuantity + item.quantity
        }
      });
      
      console.log(`‚úÖ –í–æ–∑–≤—Ä–∞—â–µ–Ω –æ—Å—Ç–∞—Ç–æ–∫ —Ç–æ–≤–∞—Ä–∞ "${item.product.name}": +${item.quantity}`);
    }
  }
}

// === –ú–û–î–ò–§–ò–¶–ò–†–û–í–ê–ù–ù–´–ô POST /api/orders - –° –£–ü–†–ê–í–õ–ï–ù–ò–ï–ú –û–°–¢–ê–¢–ö–ê–ú–ò ===
// –ó–∞–º–µ–Ω–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π POST –º–∞—Ä—à—Ä—É—Ç –Ω–∞ —ç—Ç–æ—Ç:

router.post('/', checkProductAvailability, async (req, res) => {
  const transaction = await prisma.$transaction(async (tx) => {
    try {
      console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –æ—Å—Ç–∞—Ç–∫–æ–≤...');
      const { addressId, items, notes } = req.body;

      if (!addressId || !items || items.length === 0) {
        throw new Error('–¢–æ–≤–∞—Ä—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã');
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —É–º–µ–Ω—å—à–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏
      await processOrderStock(items, tx);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º/—Å–æ–∑–¥–∞–µ–º –∞–¥—Ä–µ—Å
      let validAddressId = parseInt(addressId) || 1;
      const addressExists = await tx.address.findFirst({
        where: { 
          id: validAddressId,
          userId: req.user.id 
        }
      });

      if (!addressExists) {
        console.log('‚ö†Ô∏è –ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π...');
        const defaultAddress = await tx.address.create({
          data: {
            userId: req.user.id,
            title: '–û—Å–Ω–æ–≤–Ω–æ–π –∞–¥—Ä–µ—Å',
            address: '–ø–æ—Å. –£—Å—Ç—å-–ù–µ—Ä–∞, —É–ª. –õ–µ–Ω–∏–Ω–∞',
            isDefault: true
          }
        });
        validAddressId = defaultAddress.id;
      }

      // –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω—É—é –∑–∞–∫—É–ø–∫—É
      const activeBatch = await tx.batch.findFirst({
        where: { status: 'active' },
        orderBy: { createdAt: 'desc' }
      });

      // –°—á–∏—Ç–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É
      const totalAmount = items.reduce(
        (sum, item) => sum + (parseFloat(item.price) * item.quantity), 
        0
      );

      // –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
      const order = await tx.order.create({
        data: {
          userId: req.user.id,
          batchId: activeBatch?.id || null,
          addressId: validAddressId,
          status: 'pending',
          totalAmount,
          notes: notes || null,
          orderItems: {
            create: items.map(item => ({
              productId: item.productId,
              quantity: item.quantity,
              price: parseFloat(item.price)
            }))
          }
        },
        include: {
          orderItems: {
            include: {
              product: true
            }
          }
        }
      });

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–∫—É–ø–∫–∏
      if (activeBatch) {
        await updateBatchOnOrderChange(order.id, 'create');
      }

      console.log(`‚úÖ –ó–∞–∫–∞–∑ #${order.id} —Å–æ–∑–¥–∞–Ω —Å —É—á–µ—Ç–æ–º –æ—Å—Ç–∞—Ç–∫–æ–≤`);
      return order;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', error);
      throw error;
    }
  }, {
    maxWait: 10000,
    timeout: 20000
  });

  res.json({
    success: true,
    order: transaction
  });
});

// GET /api/orders - –ü–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.get('/', async (req, res) => {
  try {
    const { status, limit = 50 } = req.query;

    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ user –∏ id
    if (!req.user || !req.user.id) {
      console.log('‚ùå User data missing:', req.user);
      return res.status(401).json({
        error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'
      });
    }

    const whereClause = {
      userId: req.user.id,
      ...(status && { status })
    };

    console.log('üîç WHERE —É—Å–ª–æ–≤–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤:', whereClause);

    const orders = await prisma.order.findMany({
      where: whereClause,
      include: {
        address: {
          select: {
            title: true,
            address: true
          }
        },
        batch: {
          select: {
            id: true,
            title: true,
            status: true
          }
        },
        orderItems: {
          include: {
            product: {
              select: {
                id: true,
                name: true,
                unit: true,
                imageUrl: true
              }
            }
          }
        }
      },
      orderBy: {
        createdAt: 'desc'
      },
      take: parseInt(limit)
    });

       console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: ${orders.length}`);

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Decimal –≤ —á–∏—Å–ª–∞
    const ordersData = orders.map(order => ({
      ...order,
      totalAmount: parseFloat(order.totalAmount),
      orderItems: order.orderItems.map(item => ({
        ...item,
        price: parseFloat(item.price)
      }))
    }));

    res.json({
      success: true,
      orders: ordersData
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤:', error);
    res.status(500).json({
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
});

// GET /api/orders/:id - –ü–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑ –ø–æ ID
router.get('/:id', async (req, res) => {
  try {
    const { id } = req.params;

    const order = await prisma.order.findFirst({
      where: {
        id: parseInt(id),
        userId: req.user.id // –¢–æ–ª—å–∫–æ –∑–∞–∫–∞–∑—ã —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      },
      include: {
        address: true,
        batch: {
          select: {
            id: true,
            title: true,
            status: true,
            deliveryDate: true
          }
        },
        orderItems: {
          include: {
            product: {
              include: {
                category: {
                  select: {
                    name: true
                  }
                }
              }
            }
          }
        }
      }
    });

    if (!order) {
      return res.status(404).json({
        error: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
    }

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Decimal –≤ —á–∏—Å–ª–∞
    const orderData = {
      ...order,
      totalAmount: parseFloat(order.totalAmount),
      orderItems: order.orderItems.map(item => ({
        ...item,
        price: parseFloat(item.price)
      }))
    };

    res.json({
      success: true,
      order: orderData
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error);
    res.status(500).json({
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
});

// PUT /api/orders/:id - –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–∫–∞–∑ (—Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç—É—Å –∏ –∑–∞–º–µ—Ç–∫–∏)
router.put('/:id', async (req, res) => {
  try {
    const { id } = req.params;
    const { status, notes } = req.body;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const existingOrder = await prisma.order.findFirst({
      where: {
        id: parseInt(id),
        userId: req.user.id
      }
    });

    if (!existingOrder) {
      return res.status(404).json({
        error: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å—Ç–∞—Ç—É—Å—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    const allowedStatuses = ['pending', 'cancelled'];
    if (status && !allowedStatuses.includes(status)) {
      return res.status(400).json({
        error: '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞'
      });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑
    const updatedOrder = await prisma.order.update({
      where: { id: parseInt(id) },
      data: {
        ...(status && { status }),
        ...(notes !== undefined && { notes }),
        updatedAt: new Date()
      }
    });

    // –ï—Å–ª–∏ –∑–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω —Å—Ç–∞—Ç—É—Å - –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–∫—É–ø–∫–∏
    if (status && existingOrder.batchId) {
      await updateBatchOnOrderChange(parseInt(id), 'update');
    }

    console.log(`‚úÖ –ó–∞–∫–∞–∑ ${id} –æ–±–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${req.user.id}`);

    res.json({
      success: true,
      message: '–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω',
      order: {
        ...updatedOrder,
        totalAmount: parseFloat(updatedOrder.totalAmount)
      }
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error);
    res.status(500).json({
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
});

// DELETE /api/orders/:id - –£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å pending)
router.delete('/:id', async (req, res) => {
  try {
    const { id } = req.params;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–∫–∞–∑
    const existingOrder = await prisma.order.findFirst({
      where: {
        id: parseInt(id),
        userId: req.user.id,
        status: 'pending' // –ú–æ–∂–Ω–æ —É–¥–∞–ª—è—Ç—å —Ç–æ–ª—å–∫–æ –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã
      }
    });

    if (!existingOrder) {
      return res.status(404).json({
        error: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω'
      });
    }

    // –£–¥–∞–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    await prisma.$transaction(async (tx) => {
      // –£–¥–∞–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–∞
      await tx.orderItem.deleteMany({
        where: { orderId: parseInt(id) }
      });

      // –£–¥–∞–ª—è–µ–º —Å–∞–º –∑–∞–∫–∞–∑
      await tx.order.delete({
        where: { id: parseInt(id) }
      });
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–∫—É–ø–∫–∏
    if (existingOrder.batchId) {
      await updateBatchOnOrderChange(parseInt(id), 'delete');
    }

    console.log(`‚úÖ –ó–∞–∫–∞–∑ ${id} —É–¥–∞–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${req.user.id}`);

    res.json({
      success: true,
      message: '–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω'
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error);
    res.status(500).json({
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
});

// === –ù–û–í–´–ô ENDPOINT: PUT /api/orders/:id/cancel - –û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞ —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º –æ—Å—Ç–∞—Ç–∫–æ–≤ ===
// –î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å–ª–µ –¥—Ä—É–≥–∏—Ö —Ä–æ—É—Ç–æ–≤:

router.put('/:id/cancel', async (req, res) => {
  const transaction = await prisma.$transaction(async (tx) => {
    try {
      const orderId = parseInt(req.params.id);
      
      // –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑
      const order = await tx.order.findFirst({
        where: { 
          id: orderId,
          userId: req.user.id
        }
      });

      if (!order) {
        throw new Error('–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å
      if (!['pending', 'processing', 'paid'].includes(order.status)) {
        throw new Error(`–ó–∞–∫–∞–∑ –≤ —Å—Ç–∞—Ç—É—Å–µ "${order.status}" –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å`);
      }

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏
      await returnOrderStock(orderId, tx);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
      const updatedOrder = await tx.order.update({
        where: { id: orderId },
        data: { status: 'cancelled' }
      });

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–∫—É–ø–∫–∏
      if (order.batchId) {
        await updateBatchOnOrderChange(orderId, 'cancel');
      }

      console.log(`‚úÖ –ó–∞–∫–∞–∑ #${orderId} –æ—Ç–º–µ–Ω–µ–Ω, –æ—Å—Ç–∞—Ç–∫–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã`);
      return updatedOrder;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞:', error);
      throw error;
    }
  });

  res.json({
    success: true,
    message: '–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω, –æ—Å—Ç–∞—Ç–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã',
    order: transaction
  });
});

// === –ù–û–í–´–ô ENDPOINT: POST /api/orders/check-availability ===
// –î–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–µ–¥ module.exports:

router.post('/check-availability', async (req, res) => {
  try {
    const { items } = req.body;
    const availability = [];
    let allAvailable = true;

    for (const item of items) {
      const product = await prisma.product.findUnique({
        where: { id: item.productId }
      });

      if (!product) {
        availability.push({
          productId: item.productId,
          available: false,
          message: '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω'
        });
        allAvailable = false;
        continue;
      }

      const isAvailable = product.maxQuantity === null || 
                         product.maxQuantity >= item.quantity;
      
      availability.push({
        productId: item.productId,
        name: product.name,
        requested: item.quantity,
        available: isAvailable,
        inStock: product.maxQuantity,
        message: !isAvailable 
          ? `–û—Å—Ç–∞–ª–æ—Å—å —Ç–æ–ª—å–∫–æ ${product.maxQuantity} ${product.unit}` 
          : '–î–æ—Å—Ç—É–ø–Ω–æ'
      });

      if (!isAvailable) allAvailable = false;
    }

    res.json({
      success: true,
      allAvailable,
      items: availability
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏'
    });
  }
});

module.exports = router;
