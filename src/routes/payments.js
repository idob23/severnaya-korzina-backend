// src/routes/payments.js - –ü–û–õ–ù–û–°–¢–¨–Æ –ü–ï–†–ï–ü–ò–°–ê–ù–ù–´–ô –ü–û–î –¢–û–ß–ö–ê –ë–ê–ù–ö
const express = require('express');
const router = express.Router();
const { authenticateToken } = require('../middleware/auth');
const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();
const { updateBatchStatistics } = require('../utils/batchCalculations');

// === –ò–ú–ü–û–†–¢ –¢–û–ß–ö–ê –ë–ê–ù–ö ===
const TochkaPaymentService = require('../services/tochkaPaymentService');
const tochkaService = new TochkaPaymentService();

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–∏—Å—Ç–µ–º—ã
async function getSystemSettings() {
  try {
    const settings = await prisma.systemSettings.findMany();
    const result = {};
    settings.forEach(s => {
      result[s.key] = s.value;
    });
    return result;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
    return {
      default_margin_percent: '20',
      vat_code: '6'
    };
  }
}

// POST /api/payments/create - –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ –¢–æ—á–∫–∞ –ë–∞–Ω–∫
router.post('/create', authenticateToken, async (req, res) => {
  try {
    const { 
      amount, 
      orderId, 
      customerPhone, 
      customerName, 
      batchId,
      addressId,
      items,
      notes
    } = req.body;

    if (!amount || !orderId) {
      return res.status(400).json({
        success: false,
        error: 'Amount or order ID not specified'
      });
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç–æ—è—â–∏–π –∑–∞–∫–∞–∑ –µ—Å–ª–∏ orderId –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å ORDER_
    let realOrderId = orderId;
    let orderCreated = false;
    
    if (orderId.startsWith('ORDER_') && items && items.length > 0) {
      console.log('üì¶ –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç–æ—è—â–∏–π –∑–∞–∫–∞–∑ –ø–µ—Ä–µ–¥ –ø–ª–∞—Ç–µ–∂–æ–º...');
      
      const order = await prisma.$transaction(async (tx) => {
        // 1. –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º pending
        const newOrder = await tx.order.create({
          data: {
            userId: req.user.id,
            batchId: batchId ? parseInt(batchId) : null,
            addressId: addressId || 1,
            status: 'pending',
            totalAmount: parseFloat(amount),
            notes: notes || null,
          }
        });

        // 2. –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã
        for (const item of items) {
          await tx.orderItem.create({
            data: {
              orderId: newOrder.id,
              productId: parseInt(item.productId),
              quantity: parseInt(item.quantity),
              price: parseFloat(item.price)
            }
          });
        }

        return newOrder;
      });

      realOrderId = order.id.toString();
      orderCreated = true;
      console.log(`‚úÖ –ó–∞–∫–∞–∑ #${realOrderId} —Å–æ–∑–¥–∞–Ω`);
    }

    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    const settings = await getSystemSettings();
    const defaultMargin = parseFloat(settings.default_margin_percent || '20');
    const vatCode = parseInt(settings.vat_code || '6');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Ä–∂—É –ø–∞—Ä—Ç–∏–∏
    let marginPercent = defaultMargin;
    if (batchId) {
      const batch = await prisma.batch.findUnique({
        where: { id: parseInt(batchId) },
        select: { marginPercent: true }
      });
      if (batch && batch.marginPercent) {
        marginPercent = parseFloat(batch.marginPercent);
      }
    }

    console.log('=== –°–û–ó–î–ê–ï–ú –ü–õ–ê–¢–ï–ñ –ß–ï–†–ï–ó –¢–û–ß–ö–ê –ë–ê–ù–ö ===');
    console.log('üè¶ –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ –¢–æ—á–∫–∞ –ë–∞–Ω–∫');
    
    // –°–û–ó–î–ê–Å–ú –ü–õ–ê–¢–Å–ñ –í –¢–û–ß–ö–ê –ë–ê–ù–ö
    const result = await tochkaService.createPayment({
      amount: amount,
      orderId: realOrderId,
      userId: req.user.id,
      batchId: batchId,
      marginPercent: marginPercent,
      vatCode: vatCode,
      customerPhone: customerPhone || '79999999999',
      items: items || [] // ‚úÖ –ù–û–í–û–ï: –ü–µ—Ä–µ–¥–∞–µ–º –º–∞—Å—Å–∏–≤ —Ç–æ–≤–∞—Ä–æ–≤ —Å –∏–º–µ–Ω–∞–º–∏
    });

 // ‚úÖ –ù–û–í–û–ï: –°–û–•–†–ê–ù–Ø–ï–ú –ó–ê–ü–ò–°–¨ –í –¢–ê–ë–õ–ò–¶–ï PAYMENTS
console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞—Ç—ë–∂ –≤ –ë–î...');

try {
  // –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ —Ä–µ–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑ (–Ω–µ TEST_)
  const orderIdNum = parseInt(realOrderId);
  
  if (!isNaN(orderIdNum)) {
    await prisma.payment.create({
      data: {
        paymentId: result.paymentId,
        orderId: orderIdNum,
        provider: 'tochka',
        status: result.status || 'CREATED',
        amount: parseFloat(amount),
        metadata: JSON.stringify({
          breakdown: result.breakdown,
          confirmationUrl: result.confirmationUrl,
          userId: req.user.id,
          batchId: batchId,
          customerPhone: customerPhone
        })
      }
    });
    
    console.log(`‚úÖ –ü–ª–∞—Ç—ë–∂ ${result.paymentId} —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –ë–î`);
  } else {
    console.log(`‚ö†Ô∏è –¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç—ë–∂, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î`);
  }
} catch (dbError) {
  console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –≤ –ë–î:', dbError.message);
}
    res.json(result);

  } catch (error) {
    console.error('‚ùå Payment creation error:', error.message);

    // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –∏ –∑–∞–∫–∞–∑ –±—ã–ª —Å–æ–∑–¥–∞–Ω - —É–¥–∞–ª—è–µ–º –µ–≥–æ
    if (orderCreated && realOrderId) {
      try {
        await prisma.order.delete({
          where: { id: parseInt(realOrderId) }
        });
        console.log(`üóëÔ∏è –ó–∞–∫–∞–∑ #${realOrderId} —É–¥–∞–ª–µ–Ω –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –ø–ª–∞—Ç–µ–∂–∞`);
      } catch (deleteError) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:', deleteError);
      }
    }

    res.status(500).json({
      success: false,
      error: error.response?.data?.message || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞'
    });
  }
});

// GET /api/payments/status/:paymentId - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
router.get('/status/:paymentId', authenticateToken, async (req, res) => {
  try {
    const { paymentId } = req.params;
    
    console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞: ${paymentId}`);
    
    const status = await tochkaService.checkPaymentStatus(paymentId);
    
    res.json({
      success: true,
      ...status
    });

  } catch (error) {
    console.error('‚ùå Payment status check error:', error.message);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞'
    });
  }
});

// POST /api/payments/webhook - Webhook –æ—Ç –¢–æ—á–∫–∞ –ë–∞–Ω–∫
router.post('/webhook', async (req, res) => {
  try {
    console.log('üîî ========================================');
    console.log('üîî WEBHOOK –û–¢ –¢–û–ß–ö–ê –ë–ê–ù–ö –ü–û–õ–£–ß–ï–ù');
    console.log('üîî ========================================');
    console.log('üì¶ –î–∞–Ω–Ω—ã–µ –≤–µ–±—Ö—É–∫–∞:', JSON.stringify(req.body, null, 2));

    const webhookData = req.body;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è
    if (webhookData.event === 'acquiringInternetPayment') {
      const { operationId, status, amount } = webhookData.data;
      
      console.log(`üí≥ Payment ID: ${operationId}`);
      console.log(`üìä Status: ${status}`);
      console.log(`üí∞ Amount: ${amount}`);

      // ‚úÖ –®–ê–ì 1: –ù–ê–•–û–î–ò–ú –ü–õ–ê–¢–Å–ñ –í –ë–î
      const payment = await prisma.payment.findUnique({
        where: { paymentId: operationId },
        include: {
          order: {
            include: {
              batch: true
            }
          }
        }
      });

      if (!payment) {
        console.error(`‚ùå –ü–ª–∞—Ç—ë–∂ ${operationId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î!`);
        // –í—Å—ë —Ä–∞–≤–Ω–æ –æ—Ç–≤–µ—á–∞–µ–º 200
        return res.status(200).json({ success: true });
      }

      console.log(`‚úÖ –ü–ª–∞—Ç—ë–∂ –Ω–∞–π–¥–µ–Ω: Order #${payment.orderId}`);

      // ‚úÖ –®–ê–ì 2: –û–ë–ù–û–í–õ–Ø–ï–ú –ó–ê–ü–ò–°–¨ –í PAYMENTS
      await prisma.payment.update({
        where: { paymentId: operationId },
        data: {
          status: status,
          paidAt: status === 'APPROVED' ? new Date() : null,
          metadata: JSON.stringify({
            ...JSON.parse(payment.metadata || '{}'),
            webhookData: webhookData.data,
            updatedAt: new Date().toISOString()
          })
        }
      });

      console.log(`‚úÖ –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –æ–±–Ω–æ–≤–ª—ë–Ω: ${status}`);

      // ‚úÖ –®–ê–ì 3: –û–ë–†–ê–ë–û–¢–ö–ê –£–°–ü–ï–®–ù–û–ì–û –ü–õ–ê–¢–ï–ñ–ê
      if (status === 'APPROVED') {
        console.log('üéâ –ü–ª–∞—Ç—ë–∂ —É—Å–ø–µ—à–µ–Ω! –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑...');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
        await prisma.order.update({
          where: { id: payment.orderId },
          data: { 
            status: 'paid',
            updatedAt: new Date()
          }
        });

        console.log(`‚úÖ –ó–∞–∫–∞–∑ #${payment.orderId} –æ–±–Ω–æ–≤–ª—ë–Ω ‚Üí status: paid`);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞—Ä—Ç–∏–∏
        if (payment.order.batchId) {
          console.log(`üìä –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞—Ä—Ç–∏–∏ #${payment.order.batchId}...`);
          
          try {
            await updateBatchStatistics(payment.order.batchId);
            console.log(`‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞—Ä—Ç–∏–∏ #${payment.order.batchId} –æ–±–Ω–æ–≤–ª–µ–Ω–∞`);
          } catch (batchError) {
            console.error(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä—Ç–∏–∏:`, batchError.message);
          }
        }

        // TODO: –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        console.log('üìß TODO: –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é');
      }

      // ‚úÖ –®–ê–ì 4: –û–ë–†–ê–ë–û–¢–ö–ê –û–¢–ö–õ–û–ù–Å–ù–ù–û–ì–û –ü–õ–ê–¢–ï–ñ–ê
      if (status === 'FAILED' || status === 'REJECTED') {
        console.log('‚ùå –ü–ª–∞—Ç—ë–∂ –æ—Ç–∫–ª–æ–Ω—ë–Ω! –û—Ç–º–µ–Ω—è–µ–º –∑–∞–∫–∞–∑...');
        
        // –û—Ç–º–µ–Ω—è–µ–º –∑–∞–∫–∞–∑
        await prisma.order.update({
          where: { id: payment.orderId },
          data: { 
            status: 'cancelled',
            updatedAt: new Date()
          }
        });

        console.log(`‚úÖ –ó–∞–∫–∞–∑ #${payment.orderId} –æ—Ç–º–µ–Ω—ë–Ω`);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞—Ä—Ç–∏–∏ (—É–º–µ–Ω—å—à–∞–µ–º —Å—É–º–º—É)
        if (payment.order.batchId) {
          console.log(`üìä –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞—Ä—Ç–∏–∏ #${payment.order.batchId}...`);
          
          try {
            await updateBatchStatistics(payment.order.batchId);
            console.log(`‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞—Ä—Ç–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞`);
          } catch (batchError) {
            console.error(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä—Ç–∏–∏:`, batchError.message);
          }
        }

        // TODO: –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ
        console.log('üìß TODO: –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ');
      }

      console.log('üîî ========================================');
      console.log('üîî WEBHOOK –û–ë–†–ê–ë–û–¢–ê–ù –£–°–ü–ï–®–ù–û');
      console.log('üîî ========================================');
    }

    // –í–°–ï–ì–î–ê –æ—Ç–≤–µ—á–∞–µ–º 200 OK
    res.status(200).json({ success: true });

  } catch (error) {
    console.error('‚ùå Webhook processing error:', error);
    console.error('‚ùå Stack:', error.stack);
    
    // –í–°–Å –†–ê–í–ù–û –æ—Ç–≤–µ—á–∞–µ–º 200, —á—Ç–æ–±—ã –±–∞–Ω–∫ –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–ª –∑–∞–ø—Ä–æ—Å
    res.status(200).json({ success: true });
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã
router.get('/redirect/:status', async (req, res) => {
  const { orderId } = req.query;
  const status = req.params.status;
  
  console.log(`üîÑ Redirect: status=${status}, orderId=${orderId}`);
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–ª–∞—Ç–µ–∂ –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞
    const payment = await prisma.payment.findFirst({
      where: { orderId: parseInt(orderId) },
      orderBy: { createdAt: 'desc' }
    });
    
    const paymentId = payment ? payment.paymentId : '';
    
    if (status === 'success') {
      res.redirect(`http://app.sevkorzina.ru/#/payment-checking?paymentId=${paymentId}&orderId=${orderId}`);
    } else {
      res.redirect(`http://app.sevkorzina.ru/#/payment-failed?orderId=${orderId}`);
    }
  } catch (error) {
    console.error('Redirect error:', error);
    res.redirect(`http://app.sevkorzina.ru/#/payment-${status}?orderId=${orderId}`);
  }
});

module.exports = router;
