// src/routes/payments.js
const express = require('express');
const router = express.Router();
const axios = require('axios');
const { authenticateToken } = require('../middleware/auth');
const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();
const { updateBatchOnOrderChange } = require('../utils/batchCalculations'); // –û–î–ò–ù –†–ê–ó –ó–î–ï–°–¨

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–∏—Å—Ç–µ–º—ã
async function getSystemSettings() {
  try {
    const settings = await prisma.systemSettings.findMany();
    const result = {};
    settings.forEach(s => {
      result[s.key] = s.value;
    });
    return result;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –µ—Å–ª–∏ –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
    return {
      default_margin_percent: '20',
      vat_code: '6',
      payment_mode: 'test',
      enable_test_cards: 'true'
    };
  }
}

const YOOKASSA_API_URL = 'https://api.yookassa.ru/v3';

function getReturnUrl() {
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ–±-–≤–µ—Ä—Å–∏—é –∫–∞–∫ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ç–æ—á–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
  // –û–Ω–∞ –ø–æ–∫–∞–∂–µ—Ç –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ
  return 'https://app.sevkorzina.ru/#/payment-success';
}

router.post('/create', authenticateToken, async (req, res) => {
  
  try {
    const { 
      amount, 
      orderId, 
      customerPhone, 
      customerName, 
      batchId,
      // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞:
      addressId,
      items,
      notes
    } = req.body;

    if (!amount || !orderId) {
      return res.status(400).json({
        success: false,
        error: 'Amount or order ID not specified'
      });
    }

    // –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç–æ—è—â–∏–π –∑–∞–∫–∞–∑ –µ—Å–ª–∏ orderId –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å ORDER_
    let realOrderId = orderId;
    let orderCreated = false;
    
    if (orderId.startsWith('ORDER_') && items && items.length > 0) {
      console.log('üì¶ –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç–æ—è—â–∏–π –∑–∞–∫–∞–∑ –ø–µ—Ä–µ–¥ –ø–ª–∞—Ç–µ–∂–æ–º...');
      
      // –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      const order = await prisma.$transaction(async (tx) => {
        // 1. –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º pending
        const newOrder = await tx.order.create({
          data: {
            userId: req.user.id,
            batchId: batchId ? parseInt(batchId) : null,
            addressId: addressId || 1,
            status: 'pending', // –í–∞–∂–Ω–æ: —Å—Ç–∞—Ç—É—Å pending, –Ω–µ paid!
            totalAmount: parseFloat(amount),
            notes: notes || null,
          }
        });

        // 2. –°–æ–∑–¥–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–∞
        for (const item of items) {
          await tx.orderItem.create({
            data: {
              orderId: newOrder.id,
              productId: item.productId,
              quantity: item.quantity,
              price: parseFloat(item.price)
            }
          });
        }

        return newOrder;
      });

      realOrderId = order.id.toString();
      orderCreated = true;
      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –∑–∞–∫–∞–∑ #${realOrderId} —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º pending`);

      // –î–û–ë–ê–í–ò–¢–¨:
// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞—Ä—Ç–∏–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞
if (order.batchId) {
  try {
    await updateBatchOnOrderChange(order.id, 'create');
    console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞—Ä—Ç–∏–∏ #${order.batchId} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞`);
  } catch (error) {
    console.error(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${error.message}`);
    // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å - –∑–∞–∫–∞–∑ —É–∂–µ —Å–æ–∑–¥–∞–Ω
  }
}
 
    }

    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã
    const settings = await getSystemSettings();
    const vatCode = parseInt(settings.vat_code || '6');
    
    // –ü–æ–ª—É—á–∞–µ–º –º–∞—Ä–∂—É –∏–∑ –ø–∞—Ä—Ç–∏–∏ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é
    let marginPercent = parseFloat(settings.default_margin_percent || '20');
    
    if (batchId) {
      const batch = await prisma.batch.findUnique({
        where: { id: parseInt(batchId) }
      });
      if (batch && batch.marginPercent) {
        marginPercent = parseFloat(batch.marginPercent);
      }
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º –æ–ø–ª–∞—Ç—ã –∏ –∫–ª—é—á–∏
    const paymentMode = settings.payment_mode || 'test';
    const YOOKASSA_SHOP_ID = paymentMode === 'production' 
      ? process.env.YOOKASSA_SHOP_ID_PROD 
      : process.env.YOOKASSA_SHOP_ID_TEST || '1148812';
    const YOOKASSA_SECRET_KEY = paymentMode === 'production'
      ? process.env.YOOKASSA_SECRET_KEY_PROD
      : process.env.YOOKASSA_SECRET_KEY_TEST || 'test_jSLEuLPMPW58_iRfez3W_ToHsrMv2XS_cgqIYpNMa5A';
    
    console.log(`üí≥ –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ #${realOrderId}, —Ä–µ–∂–∏–º: ${paymentMode}, –º–∞—Ä–∂–∞: ${marginPercent}%, –ù–î–° –∫–æ–¥: ${vatCode}`);
    
    const basicAuth = Buffer.from(`${YOOKASSA_SHOP_ID}:${YOOKASSA_SECRET_KEY}`).toString('base64');
    const idempotenceKey = `order_${realOrderId}_${Date.now()}`;
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—ã –¥–ª—è —á–µ–∫–∞
    const totalWithMargin = parseFloat(amount);
    const goodsAmount = (totalWithMargin / (1 + marginPercent / 100)).toFixed(2);
    const serviceAmount = (totalWithMargin - parseFloat(goodsAmount)).toFixed(2);
    
    console.log(`üí∞ –†–∞—Å—á–µ—Ç: –ò—Ç–æ–≥–æ=${totalWithMargin}, –¢–æ–≤–∞—Ä—ã=${goodsAmount}, –£—Å–ª—É–≥–∞=${serviceAmount}`);

    const requestBody = {
      amount: {
        value: parseFloat(amount).toFixed(2),
        currency: 'RUB',
      },
      confirmation: {
        type: 'redirect',
        return_url: getReturnUrl(),
      },
      capture: true,
      description: `–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ ${realOrderId}`,
      metadata: {
        order_id: realOrderId, // –¢–µ–ø–µ—Ä—å —ç—Ç–æ –Ω–∞—Å—Ç–æ—è—â–∏–π ID!
        customer_phone: customerPhone || '',
        customer_name: customerName || '',
        app_name: 'severnaya_korzina',
        user_id: req.user?.id || 1,
        batch_id: batchId || null,
        margin_percent: marginPercent,
        order_created: orderCreated // –§–ª–∞–≥ —á—Ç–æ –∑–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω
      },
      payment_method_data: { type: 'bank_card' },
      receipt: {
        customer: { 
          phone: customerPhone || '79999999999' 
        },
        items: [
          {
            description: `–¢–æ–≤–∞—Ä—ã –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–π –∑–∞–∫—É–ø–∫–∏${batchId ? ` (–ø–∞—Ä—Ç–∏—è ‚Ññ${batchId})` : ''}`,
            quantity: '1.00',
            amount: {
              value: goodsAmount,
              currency: 'RUB',
            },
            vat_code: vatCode,
            payment_subject: 'commodity', // —Ç–æ–≤–∞—Ä
            payment_mode: 'full_payment'
          },
          {
            description: '–£—Å–ª—É–≥–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–π –∑–∞–∫—É–ø–∫–∏',
            quantity: '1.00',
            amount: {
              value: serviceAmount,
              currency: 'RUB',
            },
            vat_code: vatCode,
            payment_subject: 'service', // —É—Å–ª—É–≥–∞
            payment_mode: 'full_payment'
          }
        ]
      }
    };

    const response = await axios.post(`${YOOKASSA_API_URL}/payments`, requestBody, {
      headers: {
        'Authorization': `Basic ${basicAuth}`,
        'Content-Type': 'application/json',
        'Idempotence-Key': idempotenceKey,
      },
      timeout: 30000
    });

    if (response.status === 200 || response.status === 201) {
      const paymentData = response.data;
      
      res.json({
        success: true,
        paymentId: paymentData.id,
        status: paymentData.status,
        confirmationUrl: paymentData.confirmation.confirmation_url,
        message: 'Payment created successfully',
        realOrderId: realOrderId, // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞—Å—Ç–æ—è—â–∏–π ID –∑–∞–∫–∞–∑–∞
        orderCreated: orderCreated, // –§–ª–∞–≥ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
        breakdown: {
          goods: parseFloat(goodsAmount),
          service: parseFloat(serviceAmount),
          total: parseFloat(amount),
          marginPercent: marginPercent
        }
      });
    } else {
      // –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ –Ω–µ —Å–æ–∑–¥–∞–ª—Å—è –∏ –º—ã —Å–æ–∑–¥–∞–ª–∏ –∑–∞–∫–∞–∑, —É–¥–∞–ª—è–µ–º –µ–≥–æ
      if (orderCreated) {
        await prisma.order.delete({
          where: { id: parseInt(realOrderId) }
        });
        console.log(`‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ —Å–æ–∑–¥–∞–Ω, –∑–∞–∫–∞–∑ #${realOrderId} —É–¥–∞–ª–µ–Ω`);
      }
      throw new Error(`YooKassa API returned status ${response.status}`);
    }

  } catch (error) {
    console.error('‚ùå Payment creation error:', error.message);

    if (error.response?.data) {
      res.status(400).json({
        success: false,
        error: error.response.data.description || 'Payment system error'
      });
    } else {
      res.status(500).json({
        success: false,
        error: 'Connection error to payment system'
      });
    }
  }
});

router.get('/status/:paymentId', authenticateToken, async (req, res) => {
  try {
    const { paymentId } = req.params;
    
    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞
    const settings = await getSystemSettings();
    const paymentMode = settings.payment_mode || 'test';
    const YOOKASSA_SHOP_ID = paymentMode === 'production' 
      ? process.env.YOOKASSA_SHOP_ID_PROD 
      : process.env.YOOKASSA_SHOP_ID_TEST || '1148812';
    const YOOKASSA_SECRET_KEY = paymentMode === 'production'
      ? process.env.YOOKASSA_SECRET_KEY_PROD
      : process.env.YOOKASSA_SECRET_KEY_TEST || 'test_jSLEuLPMPW58_iRfez3W_ToHsrMv2XS_cgqIYpNMa5A';
    
    const basicAuth = Buffer.from(`${YOOKASSA_SHOP_ID}:${YOOKASSA_SECRET_KEY}`).toString('base64');

    const response = await axios.get(`${YOOKASSA_API_URL}/payments/${paymentId}`, {
      headers: {
        'Authorization': `Basic ${basicAuth}`,
        'Content-Type': 'application/json',
      },
      timeout: 10000
    });

    if (response.status === 200) {
      const paymentData = response.data;
      
      res.json({
        success: true,
        paymentId: paymentData.id,
        status: paymentData.status,
        isPaid: paymentData.status === 'succeeded',
        isCanceled: paymentData.status === 'canceled',
        isPending: paymentData.status === 'pending',
        amount: parseFloat(paymentData.amount.value),
        createdAt: paymentData.created_at,
        paidAt: paymentData.paid_at || null
      });
    }
  } catch (error) {
    res.status(500).json({
      success: false,
      error: 'Error checking payment status'
    });
  }
});

// POST /api/payments/webhook - Webhook –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç –ÆKassa
router.post('/webhook', async (req, res) => {
  try {
    const { event, object } = req.body;

    console.log('üîî Webhook –æ—Ç –ÆKassa:', { event, paymentId: object?.id });

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —É—Å–ø–µ—à–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏
    if (event === 'payment.succeeded' && object?.status === 'succeeded') {
      await handleSuccessfulPayment(object);
    }

    // –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ–º 200, —á—Ç–æ–±—ã –ÆKassa –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–ª–∞ –∑–∞–ø—Ä–æ—Å
    res.status(200).json({ success: true });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook:', error);
    res.status(200).json({ success: true }); // –í—Å–µ —Ä–∞–≤–Ω–æ –æ—Ç–≤–µ—á–∞–µ–º 200
  }
});

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
async function handleSuccessfulPayment(paymentObject) {
  try {
    const { id: paymentId, metadata } = paymentObject;
    
    console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞:', paymentId);
    console.log('üì¶ Metadata:', metadata);

    if (!metadata?.order_id) {
      console.log('‚ö†Ô∏è –ù–µ—Ç order_id –≤ metadata');
      return;
    }

    const orderId = parseInt(metadata.order_id);
    if (isNaN(orderId)) {
      console.log('‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç order_id:', metadata.order_id);
      return;
    }
    const { PrismaClient } = require('@prisma/client');
    const { updateBatchOnOrderChange } = require('../utils/batchCalculations');
    const prisma = new PrismaClient();

    const existingOrder = await prisma.order.findUnique({
      where: { id: orderId }
    });

    if (!existingOrder || existingOrder.status === 'paid') {
      console.log('‚ö†Ô∏è –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–ø–ª–∞—á–µ–Ω:', orderId);
      return;
    }

    await prisma.order.update({
      where: { id: orderId },
      data: { status: 'paid', updatedAt: new Date() }
    });

    if (existingOrder.batchId) {
      await updateBatchOnOrderChange(orderId, 'update');
    }

    console.log(`‚úÖ –ó–∞–∫–∞–∑ ${orderId} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ —Å—Ç–∞—Ç—É—Å 'paid'`);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞:', error);
  }
}

module.exports = router;
