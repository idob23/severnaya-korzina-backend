// src/routes/payments.js - –ü–û–õ–ù–û–°–¢–¨–Æ –ü–ï–†–ï–ü–ò–°–ê–ù–ù–´–ô –ü–û–î –¢–û–ß–ö–ê –ë–ê–ù–ö
const express = require('express');
const router = express.Router();
const { authenticateToken } = require('../middleware/auth');
const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();
const { updateBatchOnOrderChange } = require('../utils/batchCalculations');

// === –ò–ú–ü–û–†–¢ –¢–û–ß–ö–ê –ë–ê–ù–ö ===
const TochkaPaymentService = require('../services/tochkaPaymentService');
const tochkaService = new TochkaPaymentService();

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–∏—Å—Ç–µ–º—ã
async function getSystemSettings() {
  try {
    const settings = await prisma.systemSettings.findMany();
    const result = {};
    settings.forEach(s => {
      result[s.key] = s.value;
    });
    return result;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
    return {
      default_margin_percent: '20',
      vat_code: '6'
    };
  }
}

// POST /api/payments/create - –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ –¢–æ—á–∫–∞ –ë–∞–Ω–∫
router.post('/create', authenticateToken, async (req, res) => {
  try {
    const { 
      amount, 
      orderId, 
      customerPhone, 
      customerName, 
      batchId,
      addressId,
      items,
      notes
    } = req.body;

    if (!amount || !orderId) {
      return res.status(400).json({
        success: false,
        error: 'Amount or order ID not specified'
      });
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç–æ—è—â–∏–π –∑–∞–∫–∞–∑ –µ—Å–ª–∏ orderId –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å ORDER_
    let realOrderId = orderId;
    let orderCreated = false;
    
    if (orderId.startsWith('ORDER_') && items && items.length > 0) {
      console.log('üì¶ –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç–æ—è—â–∏–π –∑–∞–∫–∞–∑ –ø–µ—Ä–µ–¥ –ø–ª–∞—Ç–µ–∂–æ–º...');
      
      const order = await prisma.$transaction(async (tx) => {
        // 1. –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º pending
        const newOrder = await tx.order.create({
          data: {
            userId: req.user.id,
            batchId: batchId ? parseInt(batchId) : null,
            addressId: addressId || 1,
            status: 'pending',
            totalAmount: parseFloat(amount),
            notes: notes || null,
          }
        });

        // 2. –°–æ–∑–¥–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–∞
        for (const item of items) {
          await tx.orderItem.create({
            data: {
              orderId: newOrder.id,
              productId: item.productId,
              quantity: item.quantity,
              price: parseFloat(item.price)
            }
          });
        }

        return newOrder;
      });

      realOrderId = order.id.toString();
      orderCreated = true;
      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –∑–∞–∫–∞–∑ #${realOrderId} —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º pending`);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞—Ä—Ç–∏–∏
      if (order.batchId) {
        try {
          await updateBatchOnOrderChange(order.id, 'create');
          console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞—Ä—Ç–∏–∏ #${order.batchId} –æ–±–Ω–æ–≤–ª–µ–Ω–∞`);
        } catch (error) {
          console.error(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${error.message}`);
        }
      }
    }

    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã
    const settings = await getSystemSettings();
    const vatCode = parseInt(settings.vat_code || '6');
    
    // –ü–æ–ª—É—á–∞–µ–º –º–∞—Ä–∂—É
    let marginPercent = parseFloat(settings.default_margin_percent || '20');
    
    if (batchId) {
      const batch = await prisma.batch.findUnique({
        where: { id: parseInt(batchId) }
      });
      if (batch && batch.marginPercent) {
        marginPercent = parseFloat(batch.marginPercent);
      }
    }

    // === –°–û–ó–î–ê–ï–ú –ü–õ–ê–¢–ï–ñ –ß–ï–†–ï–ó –¢–û–ß–ö–ê –ë–ê–ù–ö ===
    console.log('üè¶ –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ –¢–æ—á–∫–∞ –ë–∞–Ω–∫');
    
    const result = await tochkaService.createPayment({
      amount: amount,
      orderId: realOrderId,
      userId: req.user.id,
      batchId: batchId,
      marginPercent: marginPercent,
      vatCode: vatCode,
      customerPhone: customerPhone || '79999999999'
    });

    res.json(result);

  } catch (error) {
    console.error('‚ùå Payment creation error:', error.message);

    // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –∏ –∑–∞–∫–∞–∑ –±—ã–ª —Å–æ–∑–¥–∞–Ω - —É–¥–∞–ª—è–µ–º –µ–≥–æ
    if (orderCreated && realOrderId) {
      try {
        await prisma.order.delete({
          where: { id: parseInt(realOrderId) }
        });
        console.log(`üóëÔ∏è –ó–∞–∫–∞–∑ #${realOrderId} —É–¥–∞–ª–µ–Ω –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –ø–ª–∞—Ç–µ–∂–∞`);
      } catch (deleteError) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:', deleteError);
      }
    }

    res.status(500).json({
      success: false,
      error: error.response?.data?.message || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞'
    });
  }
});

// GET /api/payments/status/:paymentId - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
router.get('/status/:paymentId', authenticateToken, async (req, res) => {
  try {
    const { paymentId } = req.params;
    
    console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞: ${paymentId}`);
    
    const status = await tochkaService.checkPaymentStatus(paymentId);
    
    res.json({
      success: true,
      ...status
    });

  } catch (error) {
    console.error('‚ùå Payment status check error:', error.message);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞'
    });
  }
});

// POST /api/payments/webhook - Webhook –æ—Ç –¢–æ—á–∫–∞ –ë–∞–Ω–∫
router.post('/webhook', async (req, res) => {
  try {
    console.log('üîî Webhook –æ—Ç –¢–æ—á–∫–∞ –ë–∞–Ω–∫ –ø–æ–ª—É—á–µ–Ω');
    console.log('üì¶ –î–∞–Ω–Ω—ã–µ:', JSON.stringify(req.body, null, 2));

    const webhookData = req.body;
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º webhook
    await tochkaService.handleWebhook(webhookData);

    // –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω - –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑
    if (webhookData.event === 'acquiringInternetPayment' && 
        webhookData.data?.status === 'APPROVED') {
      
      const paymentId = webhookData.data.operationId;
      
      // –ù–∞—Ö–æ–¥–∏–º –∑–∞–∫–∞–∑ –ø–æ metadata (–Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Å–≤—è–∑—å)
      // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
      console.log(`‚úÖ –ü–ª–∞—Ç–µ–∂ ${paymentId} —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω`);
      
      // TODO: –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –≤ –ë–î
    }

    // –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ–º 200
    res.status(200).json({ success: true });

  } catch (error) {
    console.error('‚ùå Webhook processing error:', error);
    // –í—Å–µ —Ä–∞–≤–Ω–æ –æ—Ç–≤–µ—á–∞–µ–º 200, —á—Ç–æ–±—ã –±–∞–Ω–∫ –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–ª –∑–∞–ø—Ä–æ—Å
    res.status(200).json({ success: true });
  }
});

module.exports = router;
