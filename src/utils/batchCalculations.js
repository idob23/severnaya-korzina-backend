// src/utils/batchCalculations.js - –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–∫—É–ø–æ–∫

const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–∫—É–ø–∫–∏ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤)
 * @param {number} batchId - ID –∑–∞–∫—É–ø–∫–∏
 * @returns {Promise<Object>} –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
 */
async function updateBatchStatistics(batchId) {
  try {
    console.log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∑–∞–∫—É–ø–∫–∏ ${batchId}`);

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã –¥–ª—è —ç—Ç–æ–π –∑–∞–∫—É–ø–∫–∏
    const orders = await prisma.order.findMany({
      where: {
        batchId: parseInt(batchId),
        status: {
          in: ['pending', 'confirmed', 'paid'] // –£—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã
        }
      },
      select: {
        id: true,
        userId: true,
        totalAmount: true,
        status: true
      }
    });

    // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const currentAmount = orders.reduce((sum, order) => {
      return sum + parseFloat(order.totalAmount);
    }, 0);

    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    const uniqueUserIds = new Set(orders.map(order => order.userId));
    const participantsCount = uniqueUserIds.size;

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫—É–ø–∫–∏
    const currentBatch = await prisma.batch.findUnique({
      where: { id: parseInt(batchId) },
      select: { targetAmount: true, status: true }
    });

    if (!currentBatch) {
      throw new Error(`–ó–∞–∫—É–ø–∫–∞ —Å ID ${batchId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
    }

    // –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    const progressPercent = Math.min(
      Math.round((currentAmount / parseFloat(currentBatch.targetAmount)) * 100),
      100
    );

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
    let newStatus = currentBatch.status;
    if (currentAmount >= parseFloat(currentBatch.targetAmount) && 
        currentBatch.status === 'active') {
      newStatus = 'ready'; // –ì–æ—Ç–æ–≤–∞ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫—É–ø–∫—É
    const updatedBatch = await prisma.batch.update({
      where: { id: parseInt(batchId) },
      data: {
        currentAmount: currentAmount,
        participantsCount: participantsCount,
        progressPercent: progressPercent,
        lastCalculated: new Date(),
        status: newStatus
      }
    });

    console.log(`‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:`, {
      batchId,
      currentAmount,
      participantsCount,
      progressPercent,
      status: newStatus
    });

    return {
      success: true,
      batchId: parseInt(batchId),
      currentAmount,
      participantsCount,
      progressPercent,
      status: newStatus,
      targetAmount: parseFloat(currentBatch.targetAmount),
      isReady: newStatus === 'ready'
    };

  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–∫—É–ø–∫–∏ ${batchId}:`, error);
    return {
      success: false,
      error: error.message
    };
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–∫—É–ø–∫–∏ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –ø–∞–Ω–µ–ª–∏
 * @param {number} batchId - ID –∑–∞–∫—É–ø–∫–∏
 * @param {number} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ª–∏—á–Ω–æ–≥–æ –≤–∫–ª–∞–¥–∞)
 * @returns {Promise<Object>} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫—É–ø–∫–∏
 */
async function getBatchProgressData(batchId, userId = null) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫—É–ø–∫–∏
    const batch = await prisma.batch.findUnique({
      where: { id: parseInt(batchId) },
      include: {
        orders: userId ? {
          where: { userId: parseInt(userId) },
          select: { totalAmount: true }
        } : false
      }
    });

    if (!batch) {
      throw new Error(`–ó–∞–∫—É–ø–∫–∞ —Å ID ${batchId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
    }

    // –í—ã—á–∏—Å–ª—è–µ–º –ª–∏—á–Ω—ã–π –≤–∫–ª–∞–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let userContribution = 0;
    if (userId && batch.orders) {
      userContribution = batch.orders.reduce((sum, order) => {
        return sum + parseFloat(order.totalAmount);
      }, 0);
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    const getMotivationalText = (progress) => {
      if (progress < 30) return '–ù—É–∂–Ω–æ –±–æ–ª—å—à–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤! üöÄ';
      if (progress < 50) return '–û—Ç–ª–∏—á–Ω–æ–µ –Ω–∞—á–∞–ª–æ! üí™';
      if (progress < 70) return '–ë–æ–ª—å—à–µ –ø–æ–ª–æ–≤–∏–Ω—ã! –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º! üî•';
      if (progress < 90) return '–ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ! –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä—ã–≤–æ–∫! ‚ö°';
      if (progress < 100) return '–ï—â—ë —á—É—Ç—å-—á—É—Ç—å! üéØ';
      return '–¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞! –ì–æ—Ç–æ–≤–∏–º –º–∞—à–∏–Ω—É! üöõ';
    };

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    const getProgressColor = (progress) => {
      if (progress < 30) return 'red';
      if (progress < 70) return 'orange';
      if (progress < 90) return 'blue';
      return 'green';
    };

    const result = {
      id: batch.id,
      title: batch.title,
      status: batch.status,
      targetAmount: parseFloat(batch.targetAmount),
      currentAmount: parseFloat(batch.currentAmount),
      participantsCount: batch.participantsCount,
      progressPercent: batch.progressPercent,
      userContribution: userContribution,
      motivationalText: getMotivationalText(batch.progressPercent),
      progressColor: getProgressColor(batch.progressPercent),
      isReady: batch.status === 'ready',
      canLaunch: batch.progressPercent >= 100 && batch.status === 'ready',
      lastCalculated: batch.lastCalculated,
      autoLaunch: batch.autoLaunch,
      marginPercent: parseFloat(batch.marginPercent)
    };

    return result;

  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–∫—É–ø–∫–∏ ${batchId}:`, error);
    throw error;
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é –∑–∞–∫—É–ø–∫—É –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –ø–∞–Ω–µ–ª–∏
 * @param {number} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns {Promise<Object|null>} –î–∞–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–∫—É–ø–∫–∏ –∏–ª–∏ null
 */
async function getActiveBatchForUser(userId = null) {
  try {
    // –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω—É—é –∑–∞–∫—É–ø–∫—É
    const activeBatch = await prisma.batch.findFirst({
      where: {
        status: {
          in: ['active', 'collecting', 'ready']
        }
      },
      orderBy: {
        createdAt: 'desc' // –°–∞–º–∞—è —Å–≤–µ–∂–∞—è –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–∫—É–ø–∫–∞
      }
    });

    if (!activeBatch) {
      return null;
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —ç—Ç–æ–π –∑–∞–∫—É–ø–∫–∏
    return await getBatchProgressData(activeBatch.id, userId);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–∫—É–ø–∫–∏:', error);
    return null;
  }
}

/**
 * Middleware –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞
 */
async function updateBatchOnOrderChange(orderId, action = 'update') {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–∫—É–ø–∫–µ
    const order = await prisma.order.findUnique({
      where: { id: parseInt(orderId) },
      select: { batchId: true }
    });

    if (order && order.batchId) {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–∫—É–ø–∫–∏
      await updateBatchStatistics(order.batchId);
      
      console.log(`üîÑ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫—É–ø–∫–∏ ${order.batchId} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ—Å–ª–µ ${action} –∑–∞–∫–∞–∑–∞ ${orderId}`);
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error);
  }
}

module.exports = {
  updateBatchStatistics,
  getBatchProgressData,
  getActiveBatchForUser,
  updateBatchOnOrderChange
};