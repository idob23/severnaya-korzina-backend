// src/middleware/safety.js - –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ú–ï–†–´ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò
const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∑–∞–ø—Ä–æ—Å–µ
const checkUserStatus = async (req, res, next) => {
  try {
    if (req.user && req.user.id) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
      const currentUser = await prisma.user.findUnique({
        where: { id: req.user.id },
        select: { isActive: true }
      });

      if (!currentUser || !currentUser.isActive) {
        return res.status(403).json({
          error: '–ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º',
          code: 'ACCOUNT_BLOCKED'
        });
      }
    }
    next();
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    next();
  }
};

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–æ–≤
const checkProductAvailability = async (req, res, next) => {
  try {
    if (req.body.items && Array.isArray(req.body.items)) {
      const productIds = req.body.items.map(item => item.productId);
      
      const products = await prisma.product.findMany({
        where: {
          id: { in: productIds },
          isActive: true
        },
        select: { id: true, price: true, name: true }
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –¥–æ—Å—Ç—É–ø–Ω—ã
      const unavailableProducts = productIds.filter(
        id => !products.find(p => p.id === id)
      );

      if (unavailableProducts.length > 0) {
        return res.status(400).json({
          error: '–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–æ–≤–∞—Ä—ã –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã',
          unavailableProducts,
          code: 'PRODUCTS_UNAVAILABLE'
        });
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—ã –≤ –∑–∞–∫–∞–∑–µ –¥–æ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö
      req.body.items = req.body.items.map(item => {
        const product = products.find(p => p.id === item.productId);
        return {
          ...item,
          price: product ? product.price : item.price,
          productName: product ? product.name : item.productName
        };
      });
    }
    next();
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–æ–≤:', error);
    next();
  }
};

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –∞–¥–º–∏–Ω–∞
const logAdminAction = (action) => {
  return async (req, res, next) => {
    const originalSend = res.send;
    
    res.send = function(data) {
      // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
      if (res.statusCode >= 200 && res.statusCode < 300) {
        console.log(`üìù ADMIN ACTION: ${action}`, {
          admin: req.user?.phone || 'unknown',
          timestamp: new Date().toISOString(),
          request: {
            method: req.method,
            url: req.originalUrl,
            body: req.body
          },
          ip: req.ip
        });
      }
      
      originalSend.call(this, data);
    };
    
    next();
  };
};

// –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ª—É—á–∞–π–Ω–æ–≥–æ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
const preventBulkDeletion = (req, res, next) => {
  const dangerousActions = [
    'DELETE /api/admin/products',
    'DELETE /api/admin/users',
    'PUT /api/admin/users/bulk'
  ];

  const currentAction = `${req.method} ${req.route?.path || req.originalUrl}`;
  
  if (dangerousActions.some(action => currentAction.includes(action.split(' ')[1]))) {
    // –¢—Ä–µ–±—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –º–∞—Å—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    if (!req.headers['x-confirm-bulk-action']) {
      return res.status(400).json({
        error: '–ú–∞—Å—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ç—Ä–µ–±—É—é—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è',
        code: 'BULK_CONFIRMATION_REQUIRED',
        hint: '–î–æ–±–∞–≤—å—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ X-Confirm-Bulk-Action: true'
      });
    }
  }
  
  next();
};

module.exports = {
  checkUserStatus,
  checkProductAvailability,
  logAdminAction,
  preventBulkDeletion
};