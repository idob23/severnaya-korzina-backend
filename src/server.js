// src/server.js - –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –î–õ–Ø –í–ù–ï–®–ù–ï–ì–û –î–û–°–¢–£–ü–ê
const express = require('express');
const cors = require('cors');
const helmet = require('helmet');
const compression = require('compression');
const morgan = require('morgan');
require('dotenv').config();
const settingsRoutes = require('./routes/settings');

const { PrismaClient } = require('@prisma/client');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
const app = express();
const prisma = new PrismaClient();
const PORT = process.env.PORT || 3000;
const HOST = process.env.HOST || '0.0.0.0'; // –°–ª—É—à–∞–µ–º –≤—Å–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã

// Middleware –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
app.use(helmet({
  crossOriginResourcePolicy: { policy: "cross-origin" }
}));
app.use(compression());

// CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ - —Ä–∞–∑—Ä–µ—à–∞–µ–º –¥–ª—è –≤–µ–±-–≤–µ—Ä—Å–∏–∏
app.use(cors({
  origin: function (origin, callback) {
    const allowedOrigins = [
      'http://app.sevkorzina.ru',
      'https://app.sevkorzina.ru',
      'https://sevkorzina.ru',
      'http://sevkorzina.ru',
      'http://localhost:3000',
      'http://localhost:8080',
      'http://127.0.0.1:3000',
      'http://10.0.2.2:3000' // Android —ç–º—É–ª—è—Ç–æ—Ä
    ];
    
    // –†–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –±–µ–∑ origin (–º–æ–±–∏–ª—å–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è)
    if (!origin) return callback(null, true);
    
     // –†–∞–∑—Ä–µ—à–∞–µ–º –ª—é–±—ã–µ localhost –ø–æ—Ä—Ç—ã
    if (origin.startsWith('http://localhost:') || origin.startsWith('http://127.0.0.1:')) {
      return callback(null, true);
    }

    if (allowedOrigins.includes(origin)) {
      callback(null, true);
    } else {
      console.log(`‚ùå CORS blocked origin: ${origin}`);
      callback(new Error('Not allowed by CORS'));
    }
  },
  credentials: true,
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization']
}));


// –ü–∞—Ä—Å–∏–Ω–≥ JSON –∏ URL-encoded –¥–∞–Ω–Ω—ã—Ö
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true, limit: '10mb' }));

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
if (process.env.NODE_ENV !== 'production') {
  app.use(morgan('dev'));
} else {
  app.use(morgan('combined'));
}

// Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ debug —Ä–µ–∂–∏–º–µ
if (process.env.DEBUG_REQUESTS === 'true') {
  app.use((req, res, next) => {
    console.log(`üì• ${req.method} ${req.originalUrl}`, {
      ip: req.ip,
      userAgent: req.get('User-Agent'),
      body: req.body,
      query: req.query,
      headers: {
        'content-type': req.headers['content-type'],
        'authorization': req.headers.authorization ? 
          `Bearer ${req.headers.authorization.slice(7, 20)}...` : 'none'
      }
    });
    next();
  });
}

// === –°–¢–ê–¢–ò–ß–ï–°–ö–ò–ï –§–ê–ô–õ–´ ===
app.use(express.static('public'));

// === –ì–õ–ê–í–ù–ê–Ø –°–¢–†–ê–ù–ò–¶–ê API ===
app.get('/', (req, res) => {
  res.json({
    name: 'Severnaya Korzina API',
    version: '1.0.0',
    description: 'API –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫—É–ø–æ–∫',
    author: 'Severnaya Korzina Team',
    serverInfo: {
      host: req.get('host'),
      ip: req.ip,
      timestamp: new Date().toISOString(),
      environment: process.env.NODE_ENV || 'development'
    },
    endpoints: {
      // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
      auth: {
        login: 'POST /api/auth/login',
        register: 'POST /api/auth/register',
        profile: 'GET /api/auth/profile',
        check: 'GET /api/auth/check',
        adminLogin: 'POST /api/auth/admin-login',
        adminProfile: 'GET /api/auth/admin-profile',
        adminCheck: 'GET /api/auth/admin-check'
      },
       // SMS —Å–µ—Ä–≤–∏—Å
      sms: {
        send: 'POST /api/sms/send',
        verify: 'POST /api/sms/verify',
        status: 'GET /api/sms/status'
      },
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
      users: {
        list: 'GET /api/users',
        get: 'GET /api/users/:id',
        update: 'PUT /api/users/:id',
        addresses: 'GET|POST /api/addresses'
      },
      // –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
      admin: {
        dashboard: 'GET /api/admin/dashboard/stats',
        users: 'GET /api/admin/users',
        products: 'GET|POST|PUT|DELETE /api/admin/products',
        orders: 'GET /api/admin/orders',
        batches: 'GET|POST|PUT /api/admin/batches'
      },
      // –¢–æ–≤–∞—Ä—ã –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      products: {
        list: 'GET /api/products',
        get: 'GET /api/products/:id',
        categories: 'GET /api/categories'
      },
      // –î–û–ë–ê–í–ò–¢–¨ –≠–¢–£ –°–ï–ö–¶–ò–Æ:
      payments: {
        create: 'POST /api/payments/create',
        status: 'GET /api/payments/status/:paymentId',
        webhook: 'POST /api/payments/webhook' // ‚Üê –í–ê–ñ–ù–û!
      },
      // –ó–∞–∫–∞–∑—ã
      orders: {
        list: 'GET /api/orders',
        create: 'POST /api/orders',
        get: 'GET /api/orders/:id'
      },
      // –ó–∞–∫—É–ø–∫–∏
      batches: {
        list: 'GET /api/batches',
        get: 'GET /api/batches/:id'
      }
    },
    documentation: process.env.API_DOCS_URL || '–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ'
  });
});

// Health check
app.get('/health', async (req, res) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    await prisma.$queryRaw`SELECT 1`;
    
    res.json({
      status: 'healthy',
      database: 'connected',
      uptime: process.uptime(),
      timestamp: new Date().toISOString(),
      server: {
        host: req.get('host'),
        ip: req.ip,
        port: PORT,
        environment: process.env.NODE_ENV || 'development'
      },
      memory: {
        used: Math.round(process.memoryUsage().heapUsed / 1024 / 1024 * 100) / 100,
        total: Math.round(process.memoryUsage().heapTotal / 1024 / 1024 * 100) / 100
      },
      version: '1.0.0'
    });
  } catch (error) {
    console.error('‚ùå Health check failed:', error);
    res.status(500).json({
      status: 'unhealthy',
      database: 'disconnected',
      error: error.message,
      timestamp: new Date().toISOString()
    });
  }
});

// === API –ú–ê–†–®–†–£–¢–´ ===

app.use('/api/sms', require('./routes/sms'));
// –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
app.use('/api/auth', require('./routes/auth'));

// –û—Å–Ω–æ–≤–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
app.use('/api/users', require('./routes/users'));
app.use('/api/addresses', require('./routes/addresses'));
app.use('/api/products', require('./routes/products'));
app.use('/api/orders', require('./routes/orders'));
app.use('/api/batches', require('./routes/batches'));

// –ê–¥–º–∏–Ω—Å–∫–∏–µ –º–∞—Ä—à—Ä—É—Ç—ã
app.use('/api/admin', require('./routes/admin'));

// –î–û–ë–ê–í–ò–¢–¨ –≠–¢–£ –°–¢–†–û–ö–£:
app.use('/api/payments', require('./routes/payments'));
app.use('/api/app', require('./routes/app')); // –ù–û–í–´–ô –†–û–£–¢ –î–õ–Ø –ü–†–û–í–ï–†–ö–ò –í–ï–†–°–ò–ô

app.use('/api/settings', settingsRoutes);  // <- –î–û–ë–ê–í–ò–¢–¨ –≠–¢–£ –°–¢–†–û–ö–£

// –°—Ç–∞—Ç–∏–∫–∞ –¥–ª—è APK —Ñ–∞–π–ª–æ–≤ —Å –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–º –∫—ç—à–µ–º
app.use('/downloads', (req, res, next) => {
  // –û—Ç–∫–ª—é—á–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è APK —Ñ–∞–π–ª–æ–≤
  res.set({
    'Cache-Control': 'no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0',
    'Pragma': 'no-cache',
    'Expires': '0',
    'Surrogate-Control': 'no-store'
  });
  next();
}, express.static('public/downloads'));

// Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
app.use('*', (req, res, next) => {
  console.log(`‚ùå 404: ${req.method} ${req.originalUrl} from ${req.ip}`);
  next();
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ 404
app.use('*', (req, res) => {
  res.status(404).json({
    error: '–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω',
    path: req.originalUrl,
    method: req.method,
    timestamp: new Date().toISOString(),
    serverInfo: {
      host: req.get('host'),
      ip: req.ip
    },
    availableEndpoints: [
      '/',
      '/health',
      '/api/auth',
      '/api/users', 
      '/api/addresses',
      '/api/products',
      '/api/orders',
      '/api/batches'
    ]
  });
});

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
app.use((error, req, res, next) => {
  console.error('üö® –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
  
  // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
  console.error('–î–µ—Ç–∞–ª–∏ –∑–∞–ø—Ä–æ—Å–∞:', {
    method: req.method,
    url: req.originalUrl,
    body: req.body,
    headers: req.headers,
    ip: req.ip
  });

  // –†–∞–∑–ª–∏—á–∞–µ–º —Ç–∏–ø—ã –æ—à–∏–±–æ–∫
  if (error.name === 'ValidationError') {
    return res.status(400).json({
      error: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö',
      details: error.message
    });
  }

  if (error.code === 'P2002') { // Prisma unique constraint error
    return res.status(409).json({
      error: '–ö–æ–Ω—Ñ–ª–∏–∫—Ç –¥–∞–Ω–Ω—ã—Ö',
      message: '–ó–∞–ø–∏—Å—å —Å —Ç–∞–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'
    });
  }

  if (error.code === 'P2025') { // Prisma record not found
    return res.status(404).json({
      error: '–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
    });
  }

  // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ—à–∏–±–∫–∞
  res.status(error.status || 500).json({
    error: process.env.NODE_ENV === 'production' 
      ? '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' 
      : error.message,
    timestamp: new Date().toISOString(),
    ...(process.env.NODE_ENV !== 'production' && { stack: error.stack })
  });
});

// Graceful shutdown
process.on('SIGTERM', async () => {
  console.log('üìü –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...');
  
  try {
    await prisma.$disconnect();
    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∫–ª—é—á–µ–Ω–∞');
    process.exit(0);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –ë–î:', error);
    process.exit(1);
  }
});

process.on('SIGINT', async () => {
  console.log('üìü –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...');
  
  try {
    await prisma.$disconnect();
    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∫–ª—é—á–µ–Ω–∞');
    process.exit(0);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –ë–î:', error);
    process.exit(1);
  }
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –≤—Å–µ—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞—Ö
const server = app.listen(PORT, HOST, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`üåç Environment: ${process.env.NODE_ENV || 'development'}`);
  console.log(`üìö API –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:${PORT}/api`);
  console.log(`üåê –í–Ω–µ—à–Ω–∏–π –¥–æ—Å—Ç—É–ø: http://84.201.149.245:${PORT}/api`);
  console.log(`‚ù§Ô∏è  Health check: http://84.201.149.245:${PORT}/health`);
 // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º SMS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  console.log(`üìß SMS Email: ${process.env.SMS_AERO_EMAIL || '–ù–ï –£–ö–ê–ó–ê–ù'}`);
  console.log(`üîë SMS API Key: ${process.env.SMS_AERO_API_KEY ? '[–£–°–¢–ê–ù–û–í–õ–ï–ù]' : '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}`);
    

  if (process.env.NODE_ENV !== 'production') {
    console.log(`üîß Prisma Studio: npx prisma studio`);
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å–µ—Ä–≤–µ—Ä–∞
server.on('error', (error) => {
  if (error.code === 'EADDRINUSE') {
    console.error(`‚ùå –ü–æ—Ä—Ç ${PORT} —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è`);
  } else {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
  }
  process.exit(1);
});

module.exports = app;
