// src/cron/checkPendingPayments.js
// Cron –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ "–∑–∞–≤–∏—Å—à–∏—Ö" –ø–ª–∞—Ç–µ–∂–µ–π

const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();
const TochkaPaymentService = require('../services/tochkaPaymentService');
const { updateBatchStatistics } = require('../utils/batchCalculations');

const tochkaService = new TochkaPaymentService();

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–ª–∞—Ç–µ–∂–∏ —Å—Ç–∞—Ä—à–µ N –º–∏–Ω—É—Ç –≤ —Å—Ç–∞—Ç—É—Å–µ CREATED/PENDING
 * –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏—Ö —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ API –¢–æ—á–∫–∞ –ë–∞–Ω–∫
 */
async function checkPendingPayments() {
  const startTime = Date.now();
  console.log('\nüîç ========================================');
  console.log('üîç CRON: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å—à–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π');
  console.log('üîç ========================================');
  console.log(`üïê –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: ${new Date().toLocaleString('ru-RU')}`);

  try {
    // –ù–∞—Ö–æ–¥–∏–º –ø–ª–∞—Ç–µ–∂–∏ —Å—Ç–∞—Ä—à–µ 5 –º–∏–Ω—É—Ç –≤ —Å—Ç–∞—Ç—É—Å–∞—Ö CREATED –∏–ª–∏ PENDING
    const fiveMinutesAgo = new Date(Date.now() - 5 * 60 * 1000);
    
    const pendingPayments = await prisma.payment.findMany({
      where: {
        status: {
          in: ['CREATED', 'PENDING']
        },
        createdAt: {
          lt: fiveMinutesAgo
        }
      },
      include: {
        order: {
          include: {
            batch: true
          }
        }
      },
      orderBy: {
        createdAt: 'asc'
      }
    });

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: ${pendingPayments.length}`);

    if (pendingPayments.length === 0) {
      console.log('‚úÖ –í—Å–µ –ø–ª–∞—Ç–µ–∂–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã, –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è');
      console.log(`‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${Date.now() - startTime}ms`);
      console.log('üîç ========================================\n');
      return {
        success: true,
        checked: 0,
        updated: 0,
        failed: 0
      };
    }

    let updatedCount = 0;
    let failedCount = 0;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –ø–ª–∞—Ç—ë–∂
    for (const payment of pendingPayments) {
      try {
        console.log(`\nüí≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞: ${payment.paymentId}`);
        console.log(`   –ó–∞–∫–∞–∑: #${payment.orderId}`);
        console.log(`   –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: ${payment.status}`);
        console.log(`   –°–æ–∑–¥–∞–Ω: ${payment.createdAt.toLocaleString('ru-RU')}`);

        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å —É –¢–æ—á–∫–∞ –ë–∞–Ω–∫
        const actualStatus = await tochkaService.checkPaymentStatus(payment.paymentId);
        
        console.log(`   –ê–∫—Ç—É–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å: ${actualStatus.status}`);

        // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è - –æ–±–Ω–æ–≤–ª—è–µ–º
        if (actualStatus.status !== payment.status) {
          console.log(`   üîÑ –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è: ${payment.status} ‚Üí ${actualStatus.status}`);

          // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –ø–ª–∞—Ç–µ–∂–∞
          await prisma.payment.update({
            where: { paymentId: payment.paymentId },
            data: {
              status: actualStatus.status,
              paidAt: actualStatus.isPaid ? new Date() : null,
              metadata: JSON.stringify({
                ...JSON.parse(payment.metadata || '{}'),
                cronUpdatedAt: new Date().toISOString(),
                previousStatus: payment.status
              })
            }
          });

          console.log(`   ‚úÖ –ü–ª–∞—Ç—ë–∂ –æ–±–Ω–æ–≤–ª—ë–Ω –≤ –ë–î`);

          // –ï—Å–ª–∏ –ø–ª–∞—Ç—ë–∂ —É—Å–ø–µ—à–µ–Ω - –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑
          if (actualStatus.isPaid) {
            console.log(`   üí∞ –ü–ª–∞—Ç—ë–∂ —É—Å–ø–µ—à–µ–Ω! –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑...`);
            
            await prisma.order.update({
              where: { id: payment.orderId },
              data: { 
                status: 'paid',
                updatedAt: new Date()
              }
            });

            console.log(`   ‚úÖ –ó–∞–∫–∞–∑ #${payment.orderId} –æ–±–Ω–æ–≤–ª—ë–Ω ‚Üí status: paid`);

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞—Ä—Ç–∏–∏
            if (payment.order.batchId) {
              console.log(`   üìä –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞—Ä—Ç–∏–∏ #${payment.order.batchId}...`);
              
              try {
                await updateBatchStatistics(payment.order.batchId);
                console.log(`   ‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞—Ä—Ç–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞`);
              } catch (batchError) {
                console.error(`   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä—Ç–∏–∏:`, batchError.message);
              }
            }
          }

          // –ï—Å–ª–∏ –ø–ª–∞—Ç—ë–∂ –æ—Ç–∫–ª–æ–Ω—ë–Ω - –æ—Ç–º–µ–Ω—è–µ–º –∑–∞–∫–∞–∑
          if (actualStatus.status === 'FAILED' || actualStatus.status === 'REJECTED') {
            console.log(`   ‚ùå –ü–ª–∞—Ç—ë–∂ –æ—Ç–∫–ª–æ–Ω—ë–Ω! –û—Ç–º–µ–Ω—è–µ–º –∑–∞–∫–∞–∑...`);
            
            await prisma.order.update({
              where: { id: payment.orderId },
              data: { 
                status: 'cancelled',
                updatedAt: new Date()
              }
            });

            console.log(`   ‚úÖ –ó–∞–∫–∞–∑ #${payment.orderId} –æ—Ç–º–µ–Ω—ë–Ω`);

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞—Ä—Ç–∏–∏ (—É–º–µ–Ω—å—à–∞–µ–º —Å—É–º–º—É)
            if (payment.order.batchId) {
              console.log(`   üìä –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞—Ä—Ç–∏–∏ #${payment.order.batchId}...`);
              
              try {
                await updateBatchStatistics(payment.order.batchId);
                console.log(`   ‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞—Ä—Ç–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞`);
              } catch (batchError) {
                console.error(`   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä—Ç–∏–∏:`, batchError.message);
              }
            }
          }

          updatedCount++;
        } else {
          console.log(`   ‚è∏Ô∏è  –°—Ç–∞—Ç—É—Å –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
        }

      } catch (error) {
        console.error(`   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ ${payment.paymentId}:`, error.message);
        failedCount++;
      }
    }

    const duration = Date.now() - startTime;
    
    console.log('\nüìä ========================================');
    console.log('üìä –ò–¢–û–ì–ò –ü–†–û–í–ï–†–ö–ò:');
    console.log('üìä ========================================');
    console.log(`‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: ${pendingPayments.length}`);
    console.log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${updatedCount}`);
    console.log(`‚ùå –û—à–∏–±–æ–∫: ${failedCount}`);
    console.log(`‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${duration}ms`);
    console.log('üîç ========================================\n');

    return {
      success: true,
      checked: pendingPayments.length,
      updated: updatedCount,
      failed: failedCount,
      duration
    };

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ cron:', error);
    console.error('Stack:', error.stack);
    
    return {
      success: false,
      error: error.message
    };
  }
}

// –ï—Å–ª–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ cron –∑–∞–¥–∞—á–∏ –≤—Ä—É—á–Ω—É—é...\n');
  
  checkPendingPayments()
    .then((result) => {
      console.log('\n‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞:', result);
      process.exit(0);
    })
    .catch((error) => {
      console.error('\n‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:', error);
      process.exit(1);
    });
}

module.exports = { checkPendingPayments };
