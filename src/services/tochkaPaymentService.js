// src/services/tochkaPaymentService.js
// –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API –¢–æ—á–∫–∞ –±–∞–Ω–∫ - –û–ë–ù–û–í–õ–ï–ù–û –î–õ–Ø –ü–†–ê–í–ò–õ–¨–ù–û–ô –§–ò–°–ö–ê–õ–ò–ó–ê–¶–ò–ò –ß–ï–†–ï–ó payments_with_receipt

const axios = require('axios');
const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

class TochkaPaymentService {
  constructor() {
    this.apiUrl = process.env.TOCHKA_API_URL || 'https://enter.tochka.com/uapi';
    this.customerCode = process.env.TOCHKA_CUSTOMER_CODE || '305236529';
    this.merchantId = process.env.TOCHKA_MERCHANT_ID || '200000000026552';
    this.terminalId = process.env.TOCHKA_TERMINAL_ID || '20025552';
    this.jwtToken = process.env.TOCHKA_JWT_TOKEN;
  }

  /**
   * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API –¢–æ—á–∫–∞ –±–∞–Ω–∫
   */
  async makeRequest(method, endpoint, data = null, params = null) {
    const config = {
      method,
      url: `${this.apiUrl}${endpoint}`,
      headers: {
        'Authorization': `Bearer ${this.jwtToken}`,
        'Content-Type': 'application/json',
        'Accept': 'application/json'
      },
      timeout: 30000
    };
    
    if (data) config.data = data;
    if (params) config.params = params;
    
    try {
      const response = await axios(config);
      return response.data;
    } catch (error) {
      console.error(`‚ùå –¢–æ—á–∫–∞ API –æ—à–∏–±–∫–∞ (${method} ${endpoint}):`, error.response?.data || error.message);
      throw error;
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ñ–∏—Å–∫–∞–ª–∏–∑–∞—Ü–∏–µ–π —á–µ—Ä–µ–∑ payments_with_receipt
   */
  async createPayment({ 
    amount, 
    orderId, 
    userId, 
    batchId, 
    marginPercent = 20, 
    vatCode = 6,
    customerPhone = '79999999999',
    customerEmail = null,
    items = [], // –º–∞—Å—Å–∏–≤ —Ç–æ–≤–∞—Ä–æ–≤
    platform = 'web'
  }) {
    console.log(`üí≥ [–¢–æ—á–∫–∞] –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ #${orderId}, —Å—É–º–º–∞: ${amount}‚ÇΩ`);
    console.log(`üì¶ [–¢–æ—á–∫–∞] –¢–æ–≤–∞—Ä–æ–≤ –≤ –∑–∞–∫–∞–∑–µ: ${items.length}`);
    console.log(`üí∞ [–¢–æ—á–∫–∞] –ú–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å: ${marginPercent}%`);

    const totalAmount = parseFloat(amount);
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏–∏ —á–µ–∫–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –¥–ª—è payments_with_receipt
    const Items = [];
    let totalGoodsAmount = 0;

    // 1. –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π —Ç–æ–≤–∞—Ä –æ—Ç–¥–µ–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–µ–π
    if (items && items.length > 0) {
      for (const item of items) {
	// –î–û–ë–ê–í–õ–ï–ù–û: –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –ë–î –µ—Å–ª–∏ name –∏–ª–∏ unit –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
        let productName = item.name;
        let productUnit = item.unit;

	if (!productName || !productUnit) {
          try {
            const product = await prisma.product.findUnique({
              where: { id: parseInt(item.productId) }
            });
            
            if (product) {
              productName = productName || product.name;
              productUnit = productUnit || product.unit || '—à—Ç';
            }
          } catch (error) {
            console.error(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–≤–∞—Ä #${item.productId}:`, error.message);
          }
        }

        // –¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ –ë–ï–ó –º–∞—Ä–∂–∏ (–±–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞)
        const itemPrice = parseFloat(item.price);
        const itemQuantity = parseInt(item.quantity);
        const itemTotal = itemPrice * itemQuantity;
        
        totalGoodsAmount += itemTotal;

	console.log(`   Debug: itemTotal=${itemTotal}, totalGoodsAmount=${totalGoodsAmount}`);

        Items.push({
	  name: productName || `–¢–æ–≤–∞—Ä #${item.productId}`,
	  amount: itemPrice.toFixed(2),        // –¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
          quantity: itemQuantity,
          vatType: this.getVatType(vatCode),
          paymentMethod: "full_payment",
          paymentObject: "goods",
	  measure: this.normalizeUnit(productUnit)
        });

        console.log(`   üì¶ ${productName}: ${itemQuantity} √ó ${itemPrice}‚ÇΩ = ${itemTotal}‚ÇΩ`);
      }
    } else {
      // –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä—ã –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã - –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–¥–Ω—É –æ–±—â—É—é –ø–æ–∑–∏—Ü–∏—é
      const goodsAmount = (totalAmount / (1 + marginPercent / 100)).toFixed(2);
      totalGoodsAmount = parseFloat(goodsAmount);
      
      Items.push({
        name: `–¢–æ–≤–∞—Ä—ã –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–π –∑–∞–∫—É–ø–∫–∏${batchId ? ` (–ø–∞—Ä—Ç–∏—è ‚Ññ${batchId})` : ''}`,
	amount: goodsAmount,
	quantity: 1,
        vatType: this.getVatType(vatCode),
        paymentMethod: "full_payment",
        paymentObject: "goods",
        measure: "—à—Ç."
      });
    }

    // 2. –î–æ–±–∞–≤–ª—è–µ–º –£–°–õ–£–ì–£ (–º–∞—Ä–∂–∞)
    const serviceAmount = (totalAmount - totalGoodsAmount).toFixed(2);
    
    if (parseFloat(serviceAmount) > 0) {
      Items.push({
        name: "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–π –∑–∞–∫—É–ø–∫–∏ –∏ –¥–æ—Å—Ç–∞–≤–∫–∏",
        amount: serviceAmount,
	quantity: 1,
        vatType: this.getVatType(vatCode),
        paymentMethod: "full_payment",
        paymentObject: "service",
        measure: "—à—Ç."
      });
    }

    console.log(`üí∞ –†–∞—Å—á–µ—Ç —á–µ–∫–∞:`);
    console.log(`   –¢–æ–≤–∞—Ä—ã: ${totalGoodsAmount.toFixed(2)}‚ÇΩ`);
    console.log(`   –£—Å–ª—É–≥–∞: ${serviceAmount}‚ÇΩ`);
    console.log(`   –ò–¢–û–ì–û: ${totalAmount.toFixed(2)}‚ÇΩ`);

    // –ü–æ–ª—É—á–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –Ω–∞–ª–æ–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
    const settings = await this.getSystemSettings();
    const taxSystemCode = settings.tax_system_code || 'usn_income'; // –£–°–ù –¥–æ—Ö–æ–¥—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    // –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è payments_with_receipt endpoint
    // –í–ê–ñ–ù–û: –î–ª—è —ç—Ç–æ–≥–æ endpoint —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –æ–±—ã—á–Ω–æ–≥–æ /payments

    const requestData = {
      Data: {
        customerCode: this.customerCode,
        merchantId: this.merchantId,
        amount: totalAmount.toFixed(2),
        purpose: `–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ ‚Ññ${orderId}`,
        paymentMode: ["card", "sbp"],
redirectUrl: `https://api.sevkorzina.ru/api/payments/redirect/success?orderId=${orderId}`,
failRedirectUrl: `https://api.sevkorzina.ru/api/payments/redirect/failed?orderId=${orderId}`,
        ttl: 60,
        saveCard: false,
        preAuthorization: false,
        taxSystemCode: 'usn_income',
        Client: {
          phone: customerPhone.startsWith('+') ? customerPhone : `+${customerPhone}`,
          email: customerEmail || 'customer@sevkorzina.ru'
        },
        Items: Items
      }
    };
    
    console.log(`üì§ [–¢–æ—á–∫–∞] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ /payments_with_receipt:`, JSON.stringify(requestData, null, 2));
    
    // ‚úÖ –ò–°–ü–û–õ–¨–ó–£–ï–ú –ù–û–í–´–ô ENDPOINT payments_with_receipt
    const response = await this.makeRequest('POST', '/acquiring/v1.0/payments_with_receipt', requestData);
    
    console.log(`‚úÖ [–¢–æ—á–∫–∞] –ü–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω: ${response.Data.operationId}`);
    console.log(`üìã [–¢–æ—á–∫–∞] –ß–µ–∫ –±—É–¥–µ—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω —Å ${Items.length} –ø–æ–∑–∏—Ü–∏—è–º–∏`);

    return {
      success: true,
      paymentId: response.Data.operationId,
      confirmationUrl: response.Data.paymentLink,
      status: response.Data.status,
      realOrderId: orderId,
      orderCreated: true,
      breakdown: {
        goods: totalGoodsAmount,
        service: parseFloat(serviceAmount),
        total: totalAmount,
        marginPercent: marginPercent,
        itemsCount: items.length
      }
    };
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
   */
  async checkPaymentStatus(paymentId) {
    console.log(`üîç [–¢–æ—á–∫–∞] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞: ${paymentId}`);

    try {
      const response = await this.makeRequest('GET', `/acquiring/v1.0/payments/${paymentId}`, null, {
        customerCode: this.customerCode
      });
      
      const operation = response.Data?.Operation?.[0];
      
      if (!operation) {
        console.warn('‚ö†Ô∏è [–¢–æ—á–∫–∞] –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ API');
        return {
          paymentId: paymentId,
          status: 'UNKNOWN',
          isPaid: false,
          isCanceled: false,
          isPending: true,
          amount: 0,
          createdAt: new Date().toISOString(),
          paidAt: null
        };
      }
      
      const status = operation.status || 'UNKNOWN';
      console.log(`üìä [–¢–æ—á–∫–∞] –°—Ç–∞—Ç—É—Å: ${status}`);

      return {
        paymentId: operation.operationId || paymentId,
        status: status,
        isPaid: status === 'APPROVED',
        isCanceled: status === 'FAILED' || status === 'REJECTED',
        isPending: status === 'CREATED' || status === 'PENDING',
        amount: operation.amount ? parseFloat(operation.amount) : 0,
        createdAt: operation.createdAt || new Date().toISOString(),
        paidAt: operation.paidAt || null
      };
    } catch (error) {
      console.error(`‚ùå [–¢–æ—á–∫–∞] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞:`, error.message);
      return {
        paymentId: paymentId,
        status: 'ERROR',
        isPaid: false,
        isCanceled: false,
        isPending: false,
        amount: 0,
        createdAt: new Date().toISOString(),
        paidAt: null,
        error: error.message
      };
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ–±—Ö—É–∫–∞ –æ—Ç –¢–æ—á–∫–∞ –±–∞–Ω–∫
   */
  async handleWebhook(webhookData) {
    const { event, data } = webhookData;
    
    console.log(`üîî [–¢–æ—á–∫–∞] –í–µ–±—Ö—É–∫ –ø–æ–ª—É—á–µ–Ω: ${event}`);

    if (event === 'acquiringInternetPayment') {
      const { operationId, status } = data;

      if (status === 'APPROVED') {
        console.log(`‚úÖ [–¢–æ—á–∫–∞] –ü–ª–∞—Ç–µ–∂ ${operationId} —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω`);
        return { success: true, message: 'Payment approved' };
      }

      if (status === 'FAILED' || status === 'REJECTED') {
        console.log(`‚ùå [–¢–æ—á–∫–∞] –ü–ª–∞—Ç–µ–∂ ${operationId} –æ—Ç–∫–ª–æ–Ω–µ–Ω`);
        return { success: true, message: 'Payment failed' };
      }
    }
    
    return { success: true, message: 'Webhook processed' };
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–∏–ø –ù–î–° –¥–ª—è –¢–æ—á–∫–∞ –±–∞–Ω–∫ (–Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç)
   */
  getVatType(vatCode) {
    const vatMap = {
      1: 'vat20',     // –ù–î–° 20%
      2: 'vat10',     // –ù–î–° 10%
      3: 'vat120',    // –ù–î–° 20/120
      4: 'vat110',    // –ù–î–° 10/110
      5: 'vat0',      // –ù–î–° 0%
      6: 'none'       // –ë–µ–∑ –ù–î–° (–£–°–ù)
    };
    return vatMap[vatCode] || 'none';
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞–≤–∫—É –ù–î–° (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
   */
  getVatRate(vatCode) {
    return this.getVatType(vatCode);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
   */
  async getSystemSettings() {
    try {
      const settings = await prisma.systemSettings.findMany();
      const result = {};
      settings.forEach(s => {
        result[s.key] = s.value;
      });
      return result;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
      return {
        default_margin_percent: '20',
        vat_code: '6',
        tax_system_code: 'usn_income'
      };
    }
  }
  normalizeUnit(unit) {
    const unitMap = {
      '–ª': '–ª.',
      '–∫–≥': '–∫–≥.',
      '–≥': '–≥.',
      '—à—Ç': '—à—Ç.',
      '—É–ø–∞–∫': '—à—Ç.',
      '–ø–∞—á': '—à—Ç.',
      '–º': '–º.',
      '—Å–º': '—Å–º.',
      '–¥–º': '–¥–º.',
      '–º–ª': '–º–ª.',
      '—Ç': '—Ç.'
    };
    const normalized = (unit || '—à—Ç').toLowerCase().trim();
    return unitMap[normalized] || '—à—Ç.';
  }

} 
module.exports = TochkaPaymentService;
