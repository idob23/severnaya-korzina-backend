// create-test-user.js - –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
require('dotenv').config();
const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function createTestUser() {
  try {
    console.log('üë§ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...\n');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const existingUsers = await prisma.user.findMany({
      select: { id: true, phone: true, firstName: true, lastName: true }
    });

    console.log('üìã –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:');
    if (existingUsers.length === 0) {
      console.log('   (–ø—É—Å—Ç–æ)');
    } else {
      existingUsers.forEach(user => {
        console.log(`   ID: ${user.id}, Phone: ${user.phone}, Name: ${user.firstName} ${user.lastName}`);
      });
    }
    console.log('');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID 1
    const user1 = await prisma.user.findUnique({ where: { id: 1 } });

    if (user1) {
      console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID 1 —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!');
      console.log(`   Phone: ${user1.phone}`);
      console.log(`   Name: ${user1.firstName} ${user1.lastName}`);
      return;
    }

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const newUser = await prisma.user.create({
      data: {
        phone: '+79142667582',
        firstName: '–¢–µ—Å—Ç–æ–≤—ã–π',
        lastName: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
        isActive: true,
        acceptedTerms: true,
        acceptedTermsAt: new Date()
      }
    });

    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω!');
    console.log(`   ID: ${newUser.id}`);
    console.log(`   Phone: ${newUser.phone}`);
    console.log(`   Name: ${newUser.firstName} ${newUser.lastName}`);
    console.log('');

    // –°–æ–∑–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –∞–¥—Ä–µ—Å
    const address = await prisma.address.create({
      data: {
        userId: newUser.id,
        city: '–£—Å—Ç—å-–ù–µ—Ä–∞',
        street: '–¢–µ—Å—Ç–æ–≤–∞—è',
        house: '1',
        apartment: '1',
        isDefault: true
      }
    });

    console.log('‚úÖ –ê–¥—Ä–µ—Å —Å–æ–∑–¥–∞–Ω!');
    console.log(`   ID: ${address.id}`);
    console.log('');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  } finally {
    await prisma.$disconnect();
  }
}

createTestUser();
