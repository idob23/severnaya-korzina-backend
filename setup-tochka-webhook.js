// setup-tochka-webhook.js - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–∞ –≤ –¢–æ—á–∫–∞ –ë–∞–Ω–∫
// –ó–∞–ø—É—Å–∫: node setup-tochka-webhook.js

require('dotenv').config();
const axios = require('axios');

const API_URL = process.env.TOCHKA_API_URL || 'https://enter.tochka.com/uapi';
const JWT_TOKEN = process.env.TOCHKA_JWT_TOKEN;
const WEBHOOK_URL = 'https://app.sevkorzina.ru/api/payments/webhook';

async function listWebhooks() {
  console.log('üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≤–µ–±—Ö—É–∫–∏...\n');
  
  try {
    const response = await axios.get(`${API_URL}/webhook/v1.0/list`, {
      headers: {
        'Authorization': `Bearer ${JWT_TOKEN}`,
        'Content-Type': 'application/json'
      }
    });

    console.log('‚úÖ –¢–µ–∫—É—â–∏–µ –≤–µ–±—Ö—É–∫–∏:');
    console.log(JSON.stringify(response.data, null, 2));
    
    return response.data;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤–µ–±—Ö—É–∫–æ–≤:');
    if (error.response) {
      console.error('–°—Ç–∞—Ç—É—Å:', error.response.status);
      console.error('–î–∞–Ω–Ω—ã–µ:', JSON.stringify(error.response.data, null, 2));
    } else {
      console.error(error.message);
    }
    return null;
  }
}

async function createWebhook() {
  console.log('\nüîß –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –≤–µ–±—Ö—É–∫...\n');
  console.log(`URL: ${WEBHOOK_URL}`);
  console.log(`Event: acquiringInternetPayment\n`);
  
  try {
    const response = await axios.post(
      `${API_URL}/webhook/v1.0/create`,
      {
        Data: {
          url: WEBHOOK_URL,
          events: ['acquiringInternetPayment']
        }
      },
      {
        headers: {
          'Authorization': `Bearer ${JWT_TOKEN}`,
          'Content-Type': 'application/json'
        }
      }
    );

    console.log('‚úÖ –í–µ–±—Ö—É–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!');
    console.log(JSON.stringify(response.data, null, 2));
    
    return response.data;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–µ–±—Ö—É–∫–∞:');
    if (error.response) {
      console.error('–°—Ç–∞—Ç—É—Å:', error.response.status);
      console.error('–î–∞–Ω–Ω—ã–µ:', JSON.stringify(error.response.data, null, 2));
      
      // –ï—Å–ª–∏ –≤–µ–±—Ö—É–∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
      if (error.response.status === 400 && 
          error.response.data?.Errors?.some(e => e.message?.includes('already exists'))) {
        console.log('\n‚ö†Ô∏è –í–µ–±—Ö—É–∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ!');
        return { alreadyExists: true };
      }
    } else {
      console.error(error.message);
    }
    return null;
  }
}

async function deleteWebhook(webhookId) {
  console.log(`\nüóëÔ∏è –£–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫ ${webhookId}...\n`);
  
  try {
    const response = await axios.delete(
      `${API_URL}/webhook/v1.0/delete`,
      {
        headers: {
          'Authorization': `Bearer ${JWT_TOKEN}`,
          'Content-Type': 'application/json'
        },
        data: {
          Data: {
            id: webhookId
          }
        }
      }
    );

    console.log('‚úÖ –í–µ–±—Ö—É–∫ —É–¥–∞–ª—ë–Ω!');
    console.log(JSON.stringify(response.data, null, 2));
    
    return response.data;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤–µ–±—Ö—É–∫–∞:');
    if (error.response) {
      console.error('–°—Ç–∞—Ç—É—Å:', error.response.status);
      console.error('–î–∞–Ω–Ω—ã–µ:', JSON.stringify(error.response.data, null, 2));
    } else {
      console.error(error.message);
    }
    return null;
  }
}

async function testWebhook() {
  console.log('\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–µ–±—Ö—É–∫ –ª–æ–∫–∞–ª—å–Ω–æ...\n');
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π webhook –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä
  const testData = {
    event: 'acquiringInternetPayment',
    data: {
      operationId: 'TEST_WEBHOOK_' + Date.now(),
      status: 'APPROVED',
      amount: 100.00,
      currency: 'RUB',
      createdAt: new Date().toISOString(),
      paidAt: new Date().toISOString(),
      metadata: {
        test: true
      }
    }
  };
  
  try {
    const response = await axios.post(WEBHOOK_URL, testData, {
      headers: {
        'Content-Type': 'application/json'
      },
      timeout: 5000
    });
    
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –≤–µ–±—Ö—É–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
    console.log('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response.data);
  } catch (error) {
    if (error.code === 'ECONNREFUSED') {
      console.error('‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ backend –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 3000');
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≤–µ–±—Ö—É–∫–∞:', error.message);
    }
  }
}

async function main() {
  console.log('=====================================');
  console.log('üîß –ù–ê–°–¢–†–û–ô–ö–ê –í–ï–ë–•–£–ö–ê –¢–û–ß–ö–ê –ë–ê–ù–ö');
  console.log('=====================================\n');

  if (!JWT_TOKEN) {
    console.error('‚ùå JWT —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env!');
    console.log('–î–æ–±–∞–≤—å—Ç–µ TOCHKA_JWT_TOKEN –≤ —Ñ–∞–π–ª .env');
    process.exit(1);
  }

  console.log(`API URL: ${API_URL}`);
  console.log(`Webhook URL: ${WEBHOOK_URL}\n`);

  // –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
  const action = process.argv[2];

  switch (action) {
    case 'list':
      await listWebhooks();
      break;
      
    case 'create':
      await createWebhook();
      break;
      
    case 'delete':
      const webhookId = process.argv[3];
      if (!webhookId) {
        console.error('‚ùå –£–∫–∞–∂–∏—Ç–µ ID –≤–µ–±—Ö—É–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è');
        console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node setup-tochka-webhook.js delete <webhook_id>');
        process.exit(1);
      }
      await deleteWebhook(webhookId);
      break;
      
    case 'test':
      await testWebhook();
      break;
      
    default:
      // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –ø–æ–ª–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
      console.log('üîÑ –ü–û–õ–ù–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê (list ‚Üí create)\n');
      
      // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≤–µ–±—Ö—É–∫–∏
      await listWebhooks();
      
      // 2. –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –≤–µ–±—Ö—É–∫
      await createWebhook();
      
      // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      console.log('\nüìã –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ–±—Ö—É–∫–æ–≤:');
      await listWebhooks();
      
      console.log('\n=====================================');
      console.log('‚úÖ –ù–ê–°–¢–†–û–ô–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê');
      console.log('=====================================\n');
      console.log('üí° –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:');
      console.log('   node setup-tochka-webhook.js list   - —Å–ø–∏—Å–æ–∫ –≤–µ–±—Ö—É–∫–æ–≤');
      console.log('   node setup-tochka-webhook.js create - —Å–æ–∑–¥–∞—Ç—å –≤–µ–±—Ö—É–∫');
      console.log('   node setup-tochka-webhook.js delete <id> - —É–¥–∞–ª–∏—Ç—å –≤–µ–±—Ö—É–∫');
      console.log('   node setup-tochka-webhook.js test   - —Ç–µ—Å—Ç –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –≤–µ–±—Ö—É–∫–∞\n');
  }
}

// –ó–∞–ø—É—Å–∫
main().then(() => {
  console.log('\n‚úÖ –ì–æ—Ç–æ–≤–æ!');
  process.exit(0);
}).catch(err => {
  console.error('\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', err.message);
  process.exit(1);
});
