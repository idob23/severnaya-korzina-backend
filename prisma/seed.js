// prisma/seed.js - –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –° –î–ê–ù–ù–´–ú–ò –î–õ–Ø –ü–ê–ù–ï–õ–ò

const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function main() {
  console.log('üå± –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');

  try {
    // 1. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log('üë• –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    
    const users = await Promise.all([
      prisma.user.upsert({
        where: { phone: '+79991234567' },
        update: {},
        create: {
          phone: '+79991234567',
          firstName: '–ò–≤–∞–Ω',
          lastName: '–ü–µ—Ç—Ä–æ–≤',
          email: 'ivan@example.com',
          isActive: true
        }
      }),
      prisma.user.upsert({
        where: { phone: '+79987654321' },
        update: {},
        create: {
          phone: '+79987654321',
          firstName: '–ú–∞—Ä–∏—è',
          lastName: '–°–∏–¥–æ—Ä–æ–≤–∞',
          email: 'maria@example.com',
          isActive: true
        }
      }),
      prisma.user.upsert({
        where: { phone: '+79876543210' },
        update: {},
        create: {
          phone: '+79876543210',
          firstName: '–ê–ª–µ–∫—Å–µ–π',
          lastName: '–ò–≤–∞–Ω–æ–≤',
          email: 'alex@example.com',
          isActive: true
        }
      })
    ]);

    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);

    // 2. –°–æ–∑–¥–∞–µ–º –∞–¥—Ä–µ—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log('üè† –°–æ–∑–¥–∞–µ–º –∞–¥—Ä–µ—Å–∞...');
    
    const addresses = await Promise.all([
      prisma.address.create({
        data: {
          userId: users[0].id,
          title: '–î–æ–º',
          address: '–≥. –£—Å—Ç—å-–ù–µ—Ä–∞, —É–ª. –õ–µ–Ω–∏–Ω–∞, 15, –∫–≤. 12',
          isDefault: true
        }
      }),
      prisma.address.create({
        data: {
          userId: users[1].id,
          title: '–ö–≤–∞—Ä—Ç–∏—Ä–∞',
          address: '–≥. –£—Å—Ç—å-–ù–µ—Ä–∞, —É–ª. –°–æ–≤–µ—Ç—Å–∫–∞—è, 23, –∫–≤. 45',
          isDefault: true
        }
      }),
      prisma.address.create({
        data: {
          userId: users[2].id,
          title: '–û—Ñ–∏—Å',
          address: '–≥. –£—Å—Ç—å-–ù–µ—Ä–∞, —É–ª. –ú–∏—Ä–∞, 7, –æ—Ñ–∏—Å 301',
          isDefault: true
        }
      })
    ]);

    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${addresses.length} –∞–¥—Ä–µ—Å–æ–≤`);

    // 3. –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤
    console.log('üìÇ –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏...');
    
    const categories = await Promise.all([
      prisma.category.upsert({
        where: { id: 1 },
        update: {},
        create: {
          name: '–ú–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã',
          description: '–ú–æ–ª–æ–∫–æ, —Ç–≤–æ—Ä–æ–≥, —Å—ã—Ä, –∫–µ—Ñ–∏—Ä',
          isActive: true
        }
      }),
      prisma.category.upsert({
        where: { id: 2 },
        update: {},
        create: {
          name: '–ú—è—Å–æ –∏ –ø—Ç–∏—Ü–∞',
          description: '–ì–æ–≤—è–¥–∏–Ω–∞, —Å–≤–∏–Ω–∏–Ω–∞, –∫—É—Ä–∏—Ü–∞',
          isActive: true
        }
      }),
      prisma.category.upsert({
        where: { id: 3 },
        update: {},
        create: {
          name: '–•–ª–µ–±–æ–±—É–ª–æ—á–Ω—ã–µ –∏–∑–¥–µ–ª–∏—è',
          description: '–•–ª–µ–±, –±–∞—Ç–æ–Ω—ã, –±—É–ª–æ—á–∫–∏',
          isActive: true
        }
      })
    ]);

    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${categories.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π`);

    // 4. –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä—ã
    console.log('üõí –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä—ã...');
    
    const products = await Promise.all([
      // –ú–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
      prisma.product.upsert({
        where: { id: 1 },
        update: {},
        create: {
          categoryId: categories[0].id,
          name: '–ú–æ–ª–æ–∫–æ 3.2%',
          description: '–ù–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —Ü–µ–ª—å–Ω–æ–µ –º–æ–ª–æ–∫–æ',
          price: 85.00,
          unit: '–ª',
          minQuantity: 1,
          maxQuantity: 20,
          isActive: true
        }
      }),
      prisma.product.upsert({
        where: { id: 2 },
        update: {},
        create: {
          categoryId: categories[0].id,
          name: '–¢–≤–æ—Ä–æ–≥ 9%',
          description: '–î–æ–º–∞—à–Ω–∏–π —Ç–≤–æ—Ä–æ–≥',
          price: 320.00,
          unit: '–∫–≥',
          minQuantity: 1,
          maxQuantity: 10,
          isActive: true
        }
      }),
      // –ú—è—Å–æ
      prisma.product.upsert({
        where: { id: 3 },
        update: {},
        create: {
          categoryId: categories[1].id,
          name: '–ì–æ–≤—è–¥–∏–Ω–∞ (–ª–æ–ø–∞—Ç–∫–∞)',
          description: '–°–≤–µ–∂–∞—è –æ—Ö–ª–∞–∂–¥–µ–Ω–Ω–∞—è –≥–æ–≤—è–¥–∏–Ω–∞',
          price: 650.00,
          unit: '–∫–≥',
          minQuantity: 1,
          maxQuantity: 5,
          isActive: true
        }
      }),
      // –•–ª–µ–±
      prisma.product.upsert({
        where: { id: 4 },
        update: {},
        create: {
          categoryId: categories[2].id,
          name: '–•–ª–µ–± —Ä–∂–∞–Ω–æ–π',
          description: '–¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–π —Ä–∂–∞–Ω–æ–π —Ö–ª–µ–±',
          price: 95.00,
          unit: '—à—Ç',
          minQuantity: 1,
          maxQuantity: 10,
          isActive: true
        }
      })
    ]);

    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${products.length} —Ç–æ–≤–∞—Ä–æ–≤`);

    // 5. –°–æ–∑–¥–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∑–∞–∫—É–ø–∫—É —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –ø–∞–Ω–µ–ª–∏
    console.log('üì¶ –°–æ–∑–¥–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∑–∞–∫—É–ø–∫—É...');
    
    const batch = await prisma.batch.upsert({
      where: { id: 1 },
      update: {},
      create: {
        title: '–ú–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã - —è–Ω–≤–∞—Ä—å 2025',
        description: '–ö–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–∞—è –∑–∞–∫—É–ø–∫–∞ –º–æ–ª–æ—á–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –æ—Ç –º–µ—Å—Ç–Ω—ã—Ö —Ñ–µ—Ä–º–µ—Ä–æ–≤. –≠–∫–æ–Ω–æ–º–∏—è –¥–æ 20%!',
        startDate: new Date('2025-01-15'),
        endDate: new Date('2025-02-15'),
        deliveryDate: new Date('2025-02-20'),
        minParticipants: 30,
        maxParticipants: 200,
        status: 'active',
        pickupAddress: '–≥. –£—Å—Ç—å-–ù–µ—Ä–∞, —É–ª. –õ–µ–Ω–∏–Ω–∞, 15 (–æ—Ñ–∏—Å –°–µ–≤–µ—Ä–Ω–æ–π –∫–æ—Ä–∑–∏–Ω—ã)',
        
        // –ù–û–í–´–ï –ü–û–õ–Ø –î–õ–Ø –ò–ù–§–û–†–ú–ê–¶–ò–û–ù–ù–û–ô –ü–ê–ù–ï–õ–ò
        targetAmount: 3000000.00,    // 3 –º–ª–Ω —Ä—É–±–ª–µ–π - —Ü–µ–ª—å
        currentAmount: 2250000.00,   // 2.25 –º–ª–Ω - —Ç–µ–∫—É—â–∞—è —Å—É–º–º–∞ (75%)
        participantsCount: 187,      // 187 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        progressPercent: 75,         // 75% –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        autoLaunch: true,
        marginPercent: 20.00,        // 20% –Ω–∞—Ü–µ–Ω–∫–∞
        lastCalculated: new Date()
      }
    });

    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∑–∞–∫—É–ø–∫–∞: ${batch.title}`);

    // 6. –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –∑–∞–∫—É–ø–∫—É
    console.log('üìù –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –∑–∞–∫—É–ø–∫—É...');
    
    await Promise.all([
      prisma.batchItem.upsert({
        where: { 
          batchId_productId: {
            batchId: batch.id,
            productId: products[0].id
          }
        },
        update: {},
        create: {
          batchId: batch.id,
          productId: products[0].id, // –ú–æ–ª–æ–∫–æ
          price: 75.00,  // –¶–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π
          discount: 10.00,
          isActive: true
        }
      }),
      prisma.batchItem.upsert({
        where: { 
          batchId_productId: {
            batchId: batch.id,
            productId: products[1].id
          }
        },
        update: {},
        create: {
          batchId: batch.id,
          productId: products[1].id, // –¢–≤–æ—Ä–æ–≥
          price: 290.00, // –¶–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π
          discount: 30.00,
          isActive: true
        }
      })
    ]);

    console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã —Ç–æ–≤–∞—Ä—ã –≤ –∑–∞–∫—É–ø–∫—É`);

    // 7. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    console.log('üõçÔ∏è –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã...');
    
    const orders = await Promise.all([
      // –ó–∞–∫–∞–∑ –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      prisma.order.create({
        data: {
          userId: users[0].id,
          batchId: batch.id,
          addressId: addresses[0].id,
          status: 'pending',
          totalAmount: 15000.00,
          notes: '–î–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ 18:00',
          orderItems: {
            create: [
              {
                productId: products[0].id,
                quantity: 10,
                price: 75.00
              },
              {
                productId: products[1].id,
                quantity: 5,
                price: 290.00
              }
            ]
          }
        }
      }),
      
      // –ó–∞–∫–∞–∑ –æ—Ç –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è  
      prisma.order.create({
        data: {
          userId: users[1].id,
          batchId: batch.id,
          addressId: addresses[1].id,
          status: 'pending',
          totalAmount: 8500.00,
          orderItems: {
            create: [
              {
                productId: products[0].id,
                quantity: 5,
                price: 75.00
              },
              {
                productId: products[1].id,
                quantity: 2,
                price: 290.00
              }
            ]
          }
        }
      })
    ]);

    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${orders.length} —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤`);

    // 8. –°–æ–∑–¥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –Ω–µ–∞–∫—Ç–∏–≤–Ω—É—é –∑–∞–∫—É–ø–∫—É –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
    console.log('üìã –°–æ–∑–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é –∑–∞–∫—É–ø–∫—É...');
    
    await prisma.batch.upsert({
      where: { id: 2 },
      update: {},
      create: {
        title: '–ú—è—Å–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã - –¥–µ–∫–∞–±—Ä—å 2024',
        description: '–ó–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è –∑–∞–∫—É–ø–∫–∞ –º—è—Å–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤',
        startDate: new Date('2024-12-01'),
        endDate: new Date('2024-12-31'),
        deliveryDate: new Date('2025-01-05'),
        minParticipants: 25,
        maxParticipants: 100,
        status: 'delivered',
        pickupAddress: '–≥. –£—Å—Ç—å-–ù–µ—Ä–∞, —É–ª. –õ–µ–Ω–∏–Ω–∞, 15',
        targetAmount: 2500000.00,
        currentAmount: 2500000.00,  // –¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞
        participantsCount: 156,
        progressPercent: 100,
        autoLaunch: true,
        marginPercent: 18.00
      }
    });

    console.log('‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è –∑–∞–∫—É–ø–∫–∞');

    console.log('\nüéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞!');
    console.log('\nüìä –°–æ–∑–¥–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:');
    console.log(`- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${users.length}`);
    console.log(`- –ê–¥—Ä–µ—Å–∞: ${addresses.length}`);
    console.log(`- –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: ${categories.length}`);
    console.log(`- –¢–æ–≤–∞—Ä—ã: ${products.length}`);
    console.log(`- –ó–∞–∫—É–ø–∫–∏: 2 (1 –∞–∫—Ç–∏–≤–Ω–∞—è, 1 –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è)`);
    console.log(`- –ó–∞–∫–∞–∑—ã: ${orders.length}`);
    
    console.log('\nüéØ –î–∞–Ω–Ω—ã–µ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –ø–∞–Ω–µ–ª–∏:');
    console.log(`- –ê–∫—Ç–∏–≤–Ω–∞—è –∑–∞–∫—É–ø–∫–∞: "${batch.title}"`);
    console.log(`- –¶–µ–ª—å: ${batch.targetAmount.toLocaleString()} ‚ÇΩ`);
    console.log(`- –°–æ–±—Ä–∞–Ω–æ: ${batch.currentAmount.toLocaleString()} ‚ÇΩ (${batch.progressPercent}%)`);
    console.log(`- –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${batch.participantsCount}`);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
    throw error;
  }
}

main()
  .catch((e) => {
    console.error(e);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  });