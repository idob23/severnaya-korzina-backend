const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function main() {
  console.log('üå± –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...');

  // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
  await prisma.orderItem.deleteMany({});
  await prisma.order.deleteMany({});
  await prisma.batchItem.deleteMany({});
  await prisma.batch.deleteMany({});
  await prisma.product.deleteMany({});
  await prisma.category.deleteMany({});
  await prisma.address.deleteMany({});
  await prisma.user.deleteMany({});

  // –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const categories = await Promise.all([
    prisma.category.create({
      data: {
        name: '–ú–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã',
        description: '–ú–æ–ª–æ–∫–æ, —Å—ã—Ä, –∫–µ—Ñ–∏—Ä, —Ç–≤–æ—Ä–æ–≥',
        imageUrl: 'https://example.com/dairy.jpg'
      }
    }),
    prisma.category.create({
      data: {
        name: '–ú—è—Å–æ –∏ –ø—Ç–∏—Ü–∞',
        description: '–°–≤–µ–∂–µ–µ –º—è—Å–æ, –∫—É—Ä–∏—Ü–∞, –∫–æ–ª–±–∞—Å—ã',
        imageUrl: 'https://example.com/meat.jpg'
      }
    }),
    prisma.category.create({
      data: {
        name: '–û–≤–æ—â–∏ –∏ —Ñ—Ä—É–∫—Ç—ã',
        description: '–°–≤–µ–∂–∏–µ –æ–≤–æ—â–∏ –∏ —Ñ—Ä—É–∫—Ç—ã',
        imageUrl: 'https://example.com/vegetables.jpg'
      }
    }),
    prisma.category.create({
      data: {
        name: '–•–ª–µ–± –∏ –≤—ã–ø–µ—á–∫–∞',
        description: '–•–ª–µ–±, –±—É–ª–æ—á–∫–∏, —Ç–æ—Ä—Ç—ã',
        imageUrl: 'https://example.com/bread.jpg'
      }
    }),
    prisma.category.create({
      data: {
        name: '–ë–∞–∫–∞–ª–µ—è',
        description: '–ö—Ä—É–ø—ã, –º–∞–∫–∞—Ä–æ–Ω—ã, –∫–æ–Ω—Å–µ—Ä–≤—ã',
        imageUrl: 'https://example.com/groceries.jpg'
      }
    })
  ]);

  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${categories.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π`);

  // –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä—ã
  const products = await Promise.all([
    // –ú–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
    prisma.product.create({
      data: {
        categoryId: categories[0].id,
        name: '–ú–æ–ª–æ–∫–æ 3.2%',
        description: '–ü–∞—Å—Ç–µ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –º–æ–ª–æ–∫–æ –≤—ã—Å—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞',
        price: 65.00,
        unit: '–ª',
        minQuantity: 1,
        maxQuantity: 10,
        imageUrl: 'https://example.com/milk.jpg'
      }
    }),
    prisma.product.create({
      data: {
        categoryId: categories[0].id,
        name: '–¢–≤–æ—Ä–æ–≥ 9%',
        description: '–î–æ–º–∞—à–Ω–∏–π —Ç–≤–æ—Ä–æ–≥ –∏–∑ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–≥–æ –º–æ–ª–æ–∫–∞',
        price: 150.00,
        unit: '–∫–≥',
        minQuantity: 1,
        maxQuantity: 5,
        imageUrl: 'https://example.com/cottage-cheese.jpg'
      }
    }),
    prisma.product.create({
      data: {
        categoryId: categories[0].id,
        name: '–°—ã—Ä "–†–æ—Å—Å–∏–π—Å–∫–∏–π"',
        description: '–¢–≤–µ—Ä–¥—ã–π —Å—ã—Ä –ø—Ä–µ–º–∏—É–º –∫–∞—á–µ—Å—Ç–≤–∞',
        price: 450.00,
        unit: '–∫–≥',
        minQuantity: 1,
        maxQuantity: 3,
        imageUrl: 'https://example.com/cheese.jpg'
      }
    }),

    // –ú—è—Å–æ –∏ –ø—Ç–∏—Ü–∞
    prisma.product.create({
      data: {
        categoryId: categories[1].id,
        name: '–ì–æ–≤—è–¥–∏–Ω–∞ (–≤—ã—Ä–µ–∑–∫–∞)',
        description: '–ú—Ä–∞–º–æ—Ä–Ω–∞—è –≥–æ–≤—è–¥–∏–Ω–∞ –≤—ã—Å—à–µ–≥–æ —Å–æ—Ä—Ç–∞',
        price: 800.00,
        unit: '–∫–≥',
        minQuantity: 1,
        maxQuantity: 5,
        imageUrl: 'https://example.com/beef.jpg'
      }
    }),
    prisma.product.create({
      data: {
        categoryId: categories[1].id,
        name: '–ö—É—Ä–∏—Ü–∞ –¥–æ–º–∞—à–Ω—è—è',
        description: '–°–≤–µ–∂–∞—è –∫—É—Ä–∏—Ü–∞ –æ—Ç –º–µ—Å—Ç–Ω—ã—Ö —Ñ–µ—Ä–º–µ—Ä–æ–≤',
        price: 300.00,
        unit: '–∫–≥',
        minQuantity: 1,
        maxQuantity: 10,
        imageUrl: 'https://example.com/chicken.jpg'
      }
    }),

    // –û–≤–æ—â–∏ –∏ —Ñ—Ä—É–∫—Ç—ã
    prisma.product.create({
      data: {
        categoryId: categories[2].id,
        name: '–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å',
        description: '–ú–æ–ª–æ–¥–æ–π –∫–∞—Ä—Ç–æ—Ñ–µ–ª—å –∏–∑ –Ø–∫—É—Ç–∏–∏',
        price: 80.00,
        unit: '–∫–≥',
        minQuantity: 5,
        maxQuantity: 50,
        imageUrl: 'https://example.com/potato.jpg'
      }
    }),
    prisma.product.create({
      data: {
        categoryId: categories[2].id,
        name: '–ú–æ—Ä–∫–æ–≤—å',
        description: '–°–ª–∞–¥–∫–∞—è –º–æ—Ä–∫–æ–≤—å –Ω–æ–≤–æ–≥–æ —É—Ä–æ–∂–∞—è',
        price: 60.00,
        unit: '–∫–≥',
        minQuantity: 2,
        maxQuantity: 20,
        imageUrl: 'https://example.com/carrot.jpg'
      }
    }),
    prisma.product.create({
      data: {
        categoryId: categories[2].id,
        name: '–Ø–±–ª–æ–∫–∏',
        description: '–ö—Ä–∞—Å–Ω—ã–µ —è–±–ª–æ–∫–∏ —Å–æ—Ä—Ç–∞ "–ì–∞–ª–∞"',
        price: 120.00,
        unit: '–∫–≥',
        minQuantity: 2,
        maxQuantity: 20,
        imageUrl: 'https://example.com/apples.jpg'
      }
    }),

    // –•–ª–µ–± –∏ –≤—ã–ø–µ—á–∫–∞
    prisma.product.create({
      data: {
        categoryId: categories[3].id,
        name: '–•–ª–µ–± —á–µ—Ä–Ω—ã–π',
        description: '–†–∂–∞–Ω–æ–π —Ö–ª–µ–± –Ω–∞ –∑–∞–∫–≤–∞—Å–∫–µ',
        price: 45.00,
        unit: '—à—Ç',
        minQuantity: 1,
        maxQuantity: 10,
        imageUrl: 'https://example.com/bread.jpg'
      }
    }),
    prisma.product.create({
      data: {
        categoryId: categories[3].id,
        name: '–ë—É–ª–æ—á–∫–∏ —Å –º–∞–∫–æ–º',
        description: '–°–≤–µ–∂–∏–µ –±—É–ª–æ—á–∫–∏ —Å –º–∞–∫–æ–≤–æ–π –Ω–∞—á–∏–Ω–∫–æ–π',
        price: 25.00,
        unit: '—à—Ç',
        minQuantity: 4,
        maxQuantity: 20,
        imageUrl: 'https://example.com/rolls.jpg'
      }
    }),

    // –ë–∞–∫–∞–ª–µ—è
    prisma.product.create({
      data: {
        categoryId: categories[4].id,
        name: '–†–∏—Å –¥–ª–∏–Ω–Ω–æ–∑–µ—Ä–Ω—ã–π',
        description: '–ü—Ä–µ–º–∏—É–º —Ä–∏—Å –¥–ª—è –ø–ª–æ–≤–∞ –∏ –≥–∞—Ä–Ω–∏—Ä–æ–≤',
        price: 90.00,
        unit: '–∫–≥',
        minQuantity: 1,
        maxQuantity: 10,
        imageUrl: 'https://example.com/rice.jpg'
      }
    }),
    prisma.product.create({
      data: {
        categoryId: categories[4].id,
        name: '–ì—Ä–µ—á–∫–∞ —è–¥—Ä–∏—Ü–∞',
        description: '–û—Ç–±–æ—Ä–Ω–∞—è –≥—Ä–µ—á–Ω–µ–≤–∞—è –∫—Ä—É–ø–∞',
        price: 85.00,
        unit: '–∫–≥',
        minQuantity: 1,
        maxQuantity: 10,
        imageUrl: 'https://example.com/buckwheat.jpg'
      }
    })
  ]);

  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${products.length} —Ç–æ–≤–∞—Ä–æ–≤`);

  // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  const users = await Promise.all([
    prisma.user.create({
      data: {
        phone: '+79142667582',
        firstName: '–ò–≤–∞–Ω',
        lastName: '–ü–µ—Ç—Ä–æ–≤',
        email: 'ivan@example.com'
      }
    }),
    prisma.user.create({
      data: {
        phone: '+79001234567',
        firstName: '–ú–∞—Ä–∏—è',
        lastName: '–°–∏–¥–æ—Ä–æ–≤–∞',
        email: 'maria@example.com'
      }
    }),
    prisma.user.create({
      data: {
        phone: '+79009876543',
        firstName: '–ê–ª–µ–∫—Å–µ–π',
        lastName: '–ò–≤–∞–Ω–æ–≤'
      }
    })
  ]);

  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);

  // –°–æ–∑–¥–∞–µ–º –∞–¥—Ä–µ—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  const addresses = await Promise.all([
    prisma.address.create({
      data: {
        userId: users[0].id,
        title: '–î–æ–º',
        address: '—É–ª. –õ–µ–Ω–∏–Ω–∞, 15, –∫–≤. 10',
        isDefault: true
      }
    }),
    prisma.address.create({
      data: {
        userId: users[0].id,
        title: '–†–∞–±–æ—Ç–∞',
        address: '—É–ª. –°–æ–≤–µ—Ç—Å–∫–∞—è, 22, –æ—Ñ–∏—Å 5'
      }
    }),
    prisma.address.create({
      data: {
        userId: users[1].id,
        title: '–î–æ–º',
        address: '—É–ª. –ú–∏—Ä–∞, 8, –∫–≤. 25',
        isDefault: true
      }
    }),
    prisma.address.create({
      data: {
        userId: users[2].id,
        title: '–î–æ–º',
        address: '—É–ª. –ö–∏—Ä–æ–≤–∞, 33, –∫–≤. 7',
        isDefault: true
      }
    })
  ]);

  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${addresses.length} –∞–¥—Ä–µ—Å–æ–≤`);

  // –°–æ–∑–¥–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∑–∞–∫—É–ø–∫—É
  const batch = await prisma.batch.create({
    data: {
      title: '–ó–∏–º–Ω—è—è –∑–∞–∫—É–ø–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤',
      description: '–ë–æ–ª—å—à–∞—è –∑–∞–∫—É–ø–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –Ω–∞ –∑–∏–º–Ω–∏–π –ø–µ—Ä–∏–æ–¥ —Å–æ —Å–∫–∏–¥–∫–∞–º–∏ –¥–æ 30%',
      startDate: new Date('2024-12-01'),
      endDate: new Date('2024-12-25'),
      deliveryDate: new Date('2024-12-30'),
      minParticipants: 10,
      maxParticipants: 100,
      pickupAddress: '—É–ª. –õ–µ–Ω–∏–Ω–∞, 15 (–º–∞–≥–∞–∑–∏–Ω "–°–µ–≤–µ—Ä–Ω–∞—è –∫–æ—Ä–∑–∏–Ω–∞")',
      status: 'active'
    }
  });

  // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –∑–∞–∫—É–ø–∫—É —Å–æ —Å–∫–∏–¥–∫–∞–º–∏
  const batchItems = await Promise.all([
    prisma.batchItem.create({
      data: {
        batchId: batch.id,
        productId: products[0].id, // –ú–æ–ª–æ–∫–æ
        price: 55.00, // –°–∫–∏–¥–∫–∞ —Å 65
        discount: 15.38
      }
    }),
    prisma.batchItem.create({
      data: {
        batchId: batch.id,
        productId: products[3].id, // –ì–æ–≤—è–¥–∏–Ω–∞
        price: 650.00, // –°–∫–∏–¥–∫–∞ —Å 800
        discount: 18.75
      }
    }),
    prisma.batchItem.create({
      data: {
        batchId: batch.id,
        productId: products[5].id, // –ö–∞—Ä—Ç–æ—Ñ–µ–ª—å
        price: 60.00, // –°–∫–∏–¥–∫–∞ —Å 80
        discount: 25.00
      }
    }),
    prisma.batchItem.create({
      data: {
        batchId: batch.id,
        productId: products[10].id, // –†–∏—Å
        price: 75.00, // –°–∫–∏–¥–∫–∞ —Å 90
        discount: 16.67
      }
    })
  ]);

  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∑–∞–∫—É–ø–∫–∞ —Å ${batchItems.length} —Ç–æ–≤–∞—Ä–∞–º–∏`);

  // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã
  const orders = await Promise.all([
    prisma.order.create({
      data: {
        userId: users[0].id,
        batchId: batch.id,
        addressId: addresses[0].id,
        status: 'pending',
        totalAmount: 340.00,
        notes: '–î–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ 18:00',
        orderItems: {
          create: [
            {
              productId: products[0].id,
              quantity: 2,
              price: 55.00
            },
            {
              productId: products[5].id,
              quantity: 5,
              price: 60.00
            }
          ]
        }
      }
    }),
    prisma.order.create({
      data: {
        userId: users[1].id,
        batchId: batch.id,
        addressId: addresses[2].id,
        status: 'confirmed',
        totalAmount: 725.00,
        orderItems: {
          create: [
            {
              productId: products[3].id,
              quantity: 1,
              price: 650.00
            },
            {
              productId: products[10].id,
              quantity: 1,
              price: 75.00
            }
          ]
        }
      }
    })
  ]);

  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${orders.length} –∑–∞–∫–∞–∑–æ–≤`);

  console.log('üéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏!');
  console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
  console.log(`   - –ö–∞—Ç–µ–≥–æ—Ä–∏–π: ${categories.length}`);
  console.log(`   - –¢–æ–≤–∞—Ä–æ–≤: ${products.length}`);
  console.log(`   - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}`);
  console.log(`   - –ê–¥—Ä–µ—Å–æ–≤: ${addresses.length}`);
  console.log(`   - –ó–∞–∫—É–ø–æ–∫: 1`);
  console.log(`   - –ó–∞–∫–∞–∑–æ–≤: ${orders.length}`);
}

main()
  .catch((e) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–∑—ã:', e);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  });