generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  phone     String    @unique
  firstName String
  lastName  String?
  email     String?
  isActive  Boolean   @default(true)
    acceptedTerms   Boolean   @default(false)  // –î–û–ë–ê–í–ò–¢–¨
  acceptedTermsAt DateTime?                   // –î–û–ë–ê–í–ò–¢–¨ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  addresses Address[]
  orders    Order[]

  @@map("users")
}

model SystemSettings {
  id          Int      @id @default(autoincrement())
  key         String   @unique
  value       String
  description String?
  updatedAt   DateTime @default(now()) @updatedAt

  @@map("system_settings")
}

// üÜï –ù–û–í–ê–Ø –¢–ê–ë–õ–ò–¶–ê Payment
model Payment {
  id        Int      @id @default(autoincrement())
  paymentId String   @unique              // ID –ø–ª–∞—Ç–µ–∂–∞ –æ—Ç –¢–æ—á–∫–∞ –ë–∞–Ω–∫
  orderId   Int                           // –°–≤—è–∑—å —Å –∑–∞–∫–∞–∑–æ–º
  provider  String   @default("tochka")   // –ü—Ä–æ–≤–∞–π–¥–µ—Ä (tochka, yookassa)
  status    String                        // CREATED, PENDING, APPROVED, FAILED, REJECTED
  amount    Decimal  @db.Decimal(10, 2)  // –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞
  metadata  String?                       // JSON —Å –¥–æ–ø. –¥–∞–Ω–Ω—ã–º–∏
  createdAt DateTime @default(now())      // –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è
  paidAt    DateTime?                     // –î–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã
  
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  
  @@index([orderId])
  @@index([status])
  @@index([createdAt])
  @@map("payments")
}

model Address {
  id        Int      @id @default(autoincrement())
  userId    Int
  title     String
  address   String
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders    Order[]

  @@map("addresses")
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  imageUrl    String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  products    Product[]

  @@map("categories")
}

model Product {
  id          Int         @id @default(autoincrement())
  categoryId  Int
  name        String
  description String?
  imageUrl    String?
  price       Decimal     @db.Decimal(10, 2)
  unit        String
  minQuantity Int         @default(1)
  maxQuantity Int?
  isActive    Boolean     @default(true)

  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  batchItems  BatchItem[]
  orderItems  OrderItem[]
  category    Category    @relation(fields: [categoryId], references: [id])

  @@map("products")
}

model Batch {
  id                  Int         @id @default(autoincrement())
  title               String
  description         String?
  startDate           DateTime
  endDate             DateTime
  deliveryDate        DateTime?
  minParticipants     Int         @default(5)
  maxParticipants     Int?
  status              String      @default("active")
  pickupAddress       String?
  targetAmount        Decimal     @default(3000000) @db.Decimal(10, 2)
  currentAmount       Decimal     @default(0) @db.Decimal(10, 2)
  participantsCount   Int         @default(0)
  progressPercent     Int         @default(0)
  lastCalculated      DateTime    @default(now())
  autoLaunch          Boolean     @default(true)
  marginPercent       Decimal     @default(20) @db.Decimal(5, 2)
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
  collectionStartDate DateTime?
  batchItems          BatchItem[]
  orders              Order[]

  @@map("batches")
}

model BatchItem {
  id        Int     @id @default(autoincrement())
  batchId   Int
  productId Int
  price     Decimal @db.Decimal(10, 2)
  discount  Decimal @default(0) @db.Decimal(5, 2)
  isActive  Boolean @default(true)
  batch     Batch   @relation(fields: [batchId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id])

  @@unique([batchId, productId])
  @@map("batch_items")
}

model Order {
  id          Int         @id @default(autoincrement())
  userId      Int
  batchId     Int?
  addressId   Int
  status      String      @default("pending")
  totalAmount Decimal     @db.Decimal(10, 2)
  notes       String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  orderItems  OrderItem[]
payments    Payment[]   // üÜï –î–û–ë–ê–í–¨–¢–ï –≠–¢–£ –°–¢–†–û–ö–£ 
 address     Address     @relation(fields: [addressId], references: [id])
  batch       Batch?      @relation(fields: [batchId], references: [id])
  user        User        @relation(fields: [userId], references: [id])

  @@map("orders")
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  price     Decimal @db.Decimal(10, 2)
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}
