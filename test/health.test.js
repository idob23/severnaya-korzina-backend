// test/health.test.js
// –¢–µ—Å—Ç—ã –¥–ª—è Health Check API

const request = require('supertest');
const { PrismaClient } = require('@prisma/client');

// üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò
if (process.env.NODE_ENV !== 'test') {
  throw new Error('üö® –≠—Ç–æ—Ç —Ç–µ—Å—Ç –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –¢–û–õ–¨–ö–û —Å NODE_ENV=test');
}

const prisma = new PrismaClient();
const app = require('../src/server');

jest.setTimeout(30000);

describe('Health Check API Tests', () => {

  afterAll(async () => {
    await prisma.$disconnect();
    console.log('‚úÖ Health —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã');
  });

  // ========================================
  // –†–ê–ó–î–ï–õ 1: –ë–ê–ó–û–í–´–ô HEALTH CHECK
  // ========================================

  test('1. GET /health - –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å —Å—Ç–∞—Ç—É—Å healthy', async () => {
    const response = await request(app)
      .get('/health')
      .expect(200);

    expect(response.body).toBeDefined();
    expect(response.body.status).toBe('healthy');
    expect(response.body.database).toBe('connected');
    expect(response.body.timestamp).toBeDefined();

    console.log('‚úÖ –¢–µ—Å—Ç 1 –ø—Ä–æ–π–¥–µ–Ω: –°–µ—Ä–≤–µ—Ä –∑–¥–æ—Ä–æ–≤');
  });

  test('2. GET /health - –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å uptime —Å–µ—Ä–≤–µ—Ä–∞', async () => {
    const response = await request(app)
      .get('/health')
      .expect(200);

    expect(response.body.uptime).toBeDefined();
    expect(typeof response.body.uptime).toBe('number');
    expect(response.body.uptime).toBeGreaterThan(0);

    console.log(`‚úÖ –¢–µ—Å—Ç 2 –ø—Ä–æ–π–¥–µ–Ω: Uptime = ${response.body.uptime.toFixed(2)}s`);
  });

  test('3. GET /health - –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–º—è—Ç–∏', async () => {
    const response = await request(app)
      .get('/health')
      .expect(200);

    expect(response.body.memory).toBeDefined();
    expect(response.body.memory.used).toBeDefined();
    expect(response.body.memory.total).toBeDefined();
    expect(typeof response.body.memory.used).toBe('number');
    expect(typeof response.body.memory.total).toBe('number');
    expect(response.body.memory.used).toBeGreaterThan(0);
    expect(response.body.memory.total).toBeGreaterThan(0);

    console.log(`‚úÖ –¢–µ—Å—Ç 3 –ø—Ä–æ–π–¥–µ–Ω: Memory = ${response.body.memory.used}MB / ${response.body.memory.total}MB`);
  });

  test('4. GET /health - –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –≤–µ—Ä—Å–∏—é API', async () => {
    const response = await request(app)
      .get('/health')
      .expect(200);

    expect(response.body.version).toBeDefined();
    expect(typeof response.body.version).toBe('string');

    console.log(`‚úÖ –¢–µ—Å—Ç 4 –ø—Ä–æ–π–¥–µ–Ω: Version = ${response.body.version}`);
  });

  test('5. GET /health - –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ', async () => {
    const response = await request(app)
      .get('/health')
      .expect(200);

    if (response.body.server) {
      expect(response.body.server.host).toBeDefined();
      expect(response.body.server.environment).toBeDefined();
      expect(response.body.server.environment).toBe('test');
      
      console.log(`‚úÖ –¢–µ—Å—Ç 5 –ø—Ä–æ–π–¥–µ–Ω: Environment = ${response.body.server.environment}`);
    } else {
      console.log('‚ö†Ô∏è –¢–µ—Å—Ç 5: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)');
    }
  });

  // ========================================
  // –†–ê–ó–î–ï–õ 2: –ü–†–û–í–ï–†–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö –ë–î
  // ========================================

  test('6. GET /health - –¥–æ–ª–∂–µ–Ω –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î', async () => {
    const response = await request(app)
      .get('/health')
      .expect(200);

    expect(response.body.database).toBe('connected');

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä—è–º—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
    const dbCheck = await prisma.$queryRaw`SELECT 1 as result`;
    expect(dbCheck).toBeDefined();
    expect(Array.isArray(dbCheck)).toBe(true);

    console.log('‚úÖ –¢–µ—Å—Ç 6 –ø—Ä–æ–π–¥–µ–Ω: –ë–î –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
  });

  test('7. GET /health - –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –ë–î –æ—Ç–≤–µ—á–∞–µ—Ç –±—ã—Å—Ç—Ä–æ', async () => {
    const startTime = Date.now();
    
    const response = await request(app)
      .get('/health')
      .expect(200);

    const responseTime = Date.now() - startTime;

    expect(response.body.database).toBe('connected');
    expect(responseTime).toBeLessThan(5000); // –î–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—Ç–∏—Ç—å –∑–∞ 5 —Å–µ–∫—É–Ω–¥

    console.log(`‚úÖ –¢–µ—Å—Ç 7 –ø—Ä–æ–π–¥–µ–Ω: Health check –æ—Ç–≤–µ—Ç–∏–ª –∑–∞ ${responseTime}ms`);
  });

  // ========================================
  // –†–ê–ó–î–ï–õ 3: –§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê
  // ========================================

  test('8. GET /health - –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –≤–∞–ª–∏–¥–Ω—ã–π JSON', async () => {
    const response = await request(app)
      .get('/health')
      .expect(200)
      .expect('Content-Type', /json/);

    expect(typeof response.body).toBe('object');
    expect(response.body).not.toBeNull();

    console.log('‚úÖ –¢–µ—Å—Ç 8 –ø—Ä–æ–π–¥–µ–Ω: –û—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON');
  });

  test('9. GET /health - –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å ISO timestamp', async () => {
    const response = await request(app)
      .get('/health')
      .expect(200);

    expect(response.body.timestamp).toBeDefined();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ timestamp –≤–∞–ª–∏–¥–Ω—ã–π ISO —Ñ–æ—Ä–º–∞—Ç
    const timestamp = new Date(response.body.timestamp);
    expect(timestamp.toString()).not.toBe('Invalid Date');

    console.log(`‚úÖ –¢–µ—Å—Ç 9 –ø—Ä–æ–π–¥–µ–Ω: Timestamp = ${response.body.timestamp}`);
  });

  test('10. GET /health - –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è', async () => {
    const response = await request(app)
      .get('/health')
      .expect(200);

    const requiredFields = ['status', 'database', 'timestamp'];
    
    requiredFields.forEach(field => {
      expect(response.body).toHaveProperty(field);
    });

    console.log('‚úÖ –¢–µ—Å—Ç 10 –ø—Ä–æ–π–¥–µ–Ω: –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç');
  });

  // ========================================
  // –†–ê–ó–î–ï–õ 4: EDGE CASES
  // ========================================

  test('11. GET /health - –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏', async () => {
    const response = await request(app)
      .get('/health')
      .expect(200);

    expect(response.body.status).toBe('healthy');

    console.log('‚úÖ –¢–µ—Å—Ç 11 –ø—Ä–æ–π–¥–µ–Ω: Health check –ø—É–±–ª–∏—á–Ω—ã–π (–±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)');
  });

  test('12. GET /health - –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö', async () => {
    const requests = [];
    
    for (let i = 0; i < 5; i++) {
      requests.push(
        request(app).get('/health').expect(200)
      );
    }

    const responses = await Promise.all(requests);

    responses.forEach((response, index) => {
      expect(response.body.status).toBe('healthy');
      expect(response.body.database).toBe('connected');
    });

    console.log('‚úÖ –¢–µ—Å—Ç 12 –ø—Ä–æ–π–¥–µ–Ω: 5 –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã');
  });

  test('13. GET /health - –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å —Å—Ç–∞–±–∏–ª—å–Ω–æ –≤–æ –≤—Ä–µ–º–µ–Ω–∏', async () => {
    const response1 = await request(app).get('/health').expect(200);
    
    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
    await new Promise(resolve => setTimeout(resolve, 100));
    
    const response2 = await request(app).get('/health').expect(200);

    expect(response1.body.status).toBe('healthy');
    expect(response2.body.status).toBe('healthy');
    expect(response2.body.uptime).toBeGreaterThanOrEqual(response1.body.uptime);

    console.log('‚úÖ –¢–µ—Å—Ç 13 –ø—Ä–æ–π–¥–µ–Ω: Health check —Å—Ç–∞–±–∏–ª–µ–Ω –≤–æ –≤—Ä–µ–º–µ–Ω–∏');
  });

  // ========================================
  // –†–ê–ó–î–ï–õ 5: –ú–û–ù–ò–¢–û–†–ò–ù–ì –†–ï–°–£–†–°–û–í
  // ========================================

  test('14. GET /health - –ø–∞–º—è—Ç—å –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å —Ä–∞–∑—É–º–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–æ–≤', async () => {
    const response = await request(app)
      .get('/health')
      .expect(200);

    if (response.body.memory) {
      const memoryUsed = response.body.memory.used;
      const memoryTotal = response.body.memory.total;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–µ –±–æ–ª–µ–µ 90% –ø–∞–º—è—Ç–∏
      const memoryPercent = (memoryUsed / memoryTotal) * 100;
      expect(memoryPercent).toBeLessThan(90);

      console.log(`‚úÖ –¢–µ—Å—Ç 14 –ø—Ä–æ–π–¥–µ–Ω: Memory usage = ${memoryPercent.toFixed(2)}%`);
    } else {
      console.log('‚ö†Ô∏è –¢–µ—Å—Ç 14: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–º—è—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
    }
  });

  test('15. GET /health - uptime –¥–æ–ª–∂–µ–Ω —É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å—Å—è', async () => {
    const response1 = await request(app).get('/health').expect(200);
    const uptime1 = response1.body.uptime;

    await new Promise(resolve => setTimeout(resolve, 1000));

    const response2 = await request(app).get('/health').expect(200);
    const uptime2 = response2.body.uptime;

    expect(uptime2).toBeGreaterThan(uptime1);
    expect(uptime2 - uptime1).toBeGreaterThanOrEqual(1);

    console.log(`‚úÖ –¢–µ—Å—Ç 15 –ø—Ä–æ–π–¥–µ–Ω: Uptime —É–≤–µ–ª–∏—á–∏–ª—Å—è —Å ${uptime1.toFixed(2)}s –¥–æ ${uptime2.toFixed(2)}s`);
  });

  // ========================================
  // –ò–¢–û–ì–û–í–´–ô –¢–ï–°–¢
  // ========================================

  test('–ò–¢–û–ì: Health Check API –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–±–æ—Ç–∞–µ—Ç', async () => {
    console.log('\n' + '='.repeat(70));
    console.log('üìä –ò–¢–û–ì–û–í–ê–Ø –ü–†–û–í–ï–†–ö–ê HEALTH CHECK');
    console.log('='.repeat(70));

    const response = await request(app)
      .get('/health')
      .expect(200);

    // –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    expect(response.body.status).toBe('healthy');
    expect(response.body.database).toBe('connected');
    expect(response.body.timestamp).toBeDefined();
    expect(response.body.uptime).toBeGreaterThan(0);

    // –õ–æ–≥–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    console.log(`‚úÖ Status: ${response.body.status}`);
    console.log(`‚úÖ Database: ${response.body.database}`);
    console.log(`‚úÖ Uptime: ${response.body.uptime.toFixed(2)}s`);
    
    if (response.body.memory) {
      console.log(`‚úÖ Memory: ${response.body.memory.used}MB / ${response.body.memory.total}MB`);
    }
    
    if (response.body.version) {
      console.log(`‚úÖ Version: ${response.body.version}`);
    }

    console.log('='.repeat(70));
    console.log('üéâ HEALTH CHECK API –ü–û–õ–ù–û–°–¢–¨–Æ –ü–†–û–¢–ï–°–¢–ò–†–û–í–ê–ù');
    console.log('üéâ 15 –¢–ï–°–¢–û–í –ü–†–û–ô–î–ï–ù–û –£–°–ü–ï–®–ù–û!');
    console.log('='.repeat(70) + '\n');
  });
});
