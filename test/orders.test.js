// __tests__/orders.test.js
// –¢–µ—Å—Ç—ã –¥–ª—è Orders API

const { PrismaClient } = require('@prisma/client');
const jwt = require('jsonwebtoken');

const prisma = new PrismaClient();

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞ –¥–ª—è –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
jest.setTimeout(30000);

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
const generateTestToken = (userId) => {
  return jwt.sign(
    { id: userId, phone: '+79991234567' },
    process.env.JWT_SECRET || 'test-secret-key-for-testing',
    { expiresIn: '24h' }
  );
};

describe('Orders API Tests', () => {
  let testUser;
  let testAddress;
  let testBatch;
  let testCategory;
  let testProduct1;
  let testProduct2;
  let testToken;

  // –û—á–∏—Å—Ç–∫–∞ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –≤—Å–µ–º–∏ —Ç–µ—Å—Ç–∞–º–∏
  beforeAll(async () => {
    console.log('üßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');

    // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (–≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –∏–∑-–∑–∞ foreign keys)
    await prisma.orderItem.deleteMany({});
    await prisma.order.deleteMany({});
    await prisma.payment.deleteMany({});
    await prisma.batchItem.deleteMany({});
    await prisma.batch.deleteMany({});
    await prisma.product.deleteMany({});
    await prisma.category.deleteMany({});
    await prisma.address.deleteMany({});
    await prisma.user.deleteMany({
      where: { phone: { startsWith: '+7999' } }
    });

    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã');

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    testUser = await prisma.user.create({
      data: {
        phone: '+79991234567',
        firstName: '–¢–µ—Å—Ç–æ–≤—ã–π',
        lastName: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
        isActive: true,
        acceptedTerms: true
      }
    });
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${testUser.id}`);

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å
    testAddress = await prisma.address.create({
      data: {
        userId: testUser.id,
        title: '–¢–µ—Å—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å',
        address: '—É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, –¥. 1',
        isDefault: true
      }
    });
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å: ${testAddress.id}`);

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    testCategory = await prisma.category.create({
      data: {
        name: '–¢–µ—Å—Ç–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è',
        isActive: true
      }
    });

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã
    testProduct1 = await prisma.product.create({
      data: {
        categoryId: testCategory.id,
        name: '–¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä 1',
        price: 1000,
        unit: '—à—Ç',
        maxQuantity: 10,
        isActive: true
      }
    });

    testProduct2 = await prisma.product.create({
      data: {
        categoryId: testCategory.id,
        name: '–¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä 2',
        price: 2000,
        unit: '–∫–≥',
        maxQuantity: 5,
        isActive: true
      }
    });

    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã: ${testProduct1.id}, ${testProduct2.id}`);

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –ø–∞—Ä—Ç–∏—é
    testBatch = await prisma.batch.create({
      data: {
        title: '–¢–µ—Å—Ç–æ–≤–∞—è –ø–∞—Ä—Ç–∏—è',
        status: 'active',
        targetAmount: 100000,
        currentAmount: 0,
        participantsCount: 0,
        progressPercent: 0,
        marginPercent: 20,
	startDate: new Date(), // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û
        endDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000) // +7 –¥–Ω–µ–π
      }
    });
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è –ø–∞—Ä—Ç–∏—è: ${testBatch.id}`);

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º JWT —Ç–æ–∫–µ–Ω
    testToken = generateTestToken(testUser.id);
    console.log('‚úÖ –°–æ–∑–¥–∞–Ω JWT —Ç–æ–∫–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–æ–≤');
  });

  // –û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
  afterAll(async () => {
    console.log('üßπ –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞...');
    await prisma.orderItem.deleteMany({});
    await prisma.order.deleteMany({});
    await prisma.payment.deleteMany({});
    await prisma.batchItem.deleteMany({});
    await prisma.batch.deleteMany({});
    await prisma.product.deleteMany({});
    await prisma.category.deleteMany({});
    await prisma.address.deleteMany({});
    await prisma.user.deleteMany({
      where: { phone: { startsWith: '+7999' } }
    });
    await prisma.$disconnect();
    console.log('‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
  });

  // –¢–ï–°–¢ 1: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
  test('1. –î–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑', async () => {
    const orderData = {
      addressId: testAddress.id,
      items: [
        {
          productId: testProduct1.id,
          quantity: 2,
          price: 1000
        },
        {
          productId: testProduct2.id,
          quantity: 1,
          price: 2000
        }
      ],
      notes: '–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑'
    };

    // –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ Prisma
    const order = await prisma.$transaction(async (tx) => {
      const newOrder = await tx.order.create({
        data: {
          userId: testUser.id,
          batchId: testBatch.id,
          addressId: orderData.addressId,
          status: 'pending',
          totalAmount: 4000, // 2*1000 + 1*2000
          notes: orderData.notes
        }
      });

      // –°–æ–∑–¥–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–∞
      for (const item of orderData.items) {
        await tx.orderItem.create({
          data: {
            orderId: newOrder.id,
            productId: item.productId,
            quantity: item.quantity,
            price: item.price
          }
        });

        // –£–º–µ–Ω—å—à–∞–µ–º –æ—Å—Ç–∞—Ç–æ–∫ —Ç–æ–≤–∞—Ä–∞
        await tx.product.update({
          where: { id: item.productId },
          data: {
            maxQuantity: { decrement: item.quantity }
          }
        });
      }

      return newOrder;
    });

    expect(order).toBeDefined();
    expect(order.userId).toBe(testUser.id);
    expect(order.status).toBe('pending');
    expect(parseFloat(order.totalAmount)).toBe(4000);
    
    console.log(`‚úÖ –¢–µ—Å—Ç 1 –ø—Ä–æ–π–¥–µ–Ω: –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω #${order.id}`);
  });

  // –¢–ï–°–¢ 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  test('2. –î–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', async () => {
    const orders = await prisma.order.findMany({
      where: { userId: testUser.id },
      include: {
        orderItems: {
          include: {
            product: true
          }
        }
      }
    });

    expect(orders).toBeDefined();
    expect(Array.isArray(orders)).toBe(true);
    expect(orders.length).toBeGreaterThan(0);
    expect(orders[0].userId).toBe(testUser.id);
    
    console.log(`‚úÖ –¢–µ—Å—Ç 2 –ø—Ä–æ–π–¥–µ–Ω: –ù–∞–π–¥–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤ - ${orders.length}`);
  });

  // –¢–ï–°–¢ 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ –ø–æ ID
  test('3. –î–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑ –ø–æ ID', async () => {
    const orders = await prisma.order.findMany({
      where: { userId: testUser.id }
    });
    
    const orderId = orders[0].id;

    const order = await prisma.order.findFirst({
      where: {
        id: orderId,
        userId: testUser.id
      },
      include: {
        address: true,
        batch: true,
        orderItems: {
          include: {
            product: true
          }
        }
      }
    });

    expect(order).toBeDefined();
    expect(order.id).toBe(orderId);
    expect(order.orderItems.length).toBeGreaterThan(0);
    
    console.log(`‚úÖ –¢–µ—Å—Ç 3 –ø—Ä–æ–π–¥–µ–Ω: –ó–∞–∫–∞–∑ #${orderId} –ø–æ–ª—É—á–µ–Ω`);
  });

  // –¢–ï–°–¢ 4: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
  test('4. –î–æ–ª–∂–µ–Ω –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞', async () => {
    const orders = await prisma.order.findMany({
      where: { userId: testUser.id, status: 'pending' }
    });
    
    const orderId = orders[0].id;

    const updatedOrder = await prisma.order.update({
      where: { id: orderId },
      data: {
        status: 'paid',
        updatedAt: new Date()
      }
    });

    expect(updatedOrder.status).toBe('paid');
    expect(updatedOrder.id).toBe(orderId);
    
    console.log(`‚úÖ –¢–µ—Å—Ç 4 –ø—Ä–æ–π–¥–µ–Ω: –ó–∞–∫–∞–∑ #${orderId} –æ–±–Ω–æ–≤–ª–µ–Ω ‚Üí paid`);
  });

  // –¢–ï–°–¢ 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–∞–º–∏ —Ç–æ–≤–∞—Ä–æ–≤
  test('5. –î–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —É–ø—Ä–∞–≤–ª—è—Ç—å –æ—Å—Ç–∞—Ç–∫–∞–º–∏ —Ç–æ–≤–∞—Ä–æ–≤', async () => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Å—Ç–∞—Ç–∫–∏ —É–º–µ–Ω—å—à–∏–ª–∏—Å—å –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
    const product1 = await prisma.product.findUnique({
      where: { id: testProduct1.id }
    });

    const product2 = await prisma.product.findUnique({
      where: { id: testProduct2.id }
    });

    // –ù–∞—á–∞–ª—å–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–∏ –±—ã–ª–∏: product1: 10, product2: 5
    // –ü–æ—Å–ª–µ –∑–∞–∫–∞–∑–∞: product1: 10-2=8, product2: 5-1=4
    expect(product1.maxQuantity).toBe(8);
    expect(product2.maxQuantity).toBe(4);
    
    console.log(`‚úÖ –¢–µ—Å—Ç 5 –ø—Ä–æ–π–¥–µ–Ω: –û—Å—Ç–∞—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã (${product1.maxQuantity}, ${product2.maxQuantity})`);
  });

  // –¢–ï–°–¢ 6: –û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞ –∏ –≤–æ–∑–≤—Ä–∞—Ç –æ—Å—Ç–∞—Ç–∫–æ–≤
  test('6. –î–æ–ª–∂–µ–Ω –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ –∏ –≤–µ—Ä–Ω—É—Ç—å –æ—Å—Ç–∞—Ç–∫–∏', async () => {
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –¥–ª—è –æ—Ç–º–µ–Ω—ã
    const newOrder = await prisma.$transaction(async (tx) => {
      const order = await tx.order.create({
        data: {
          userId: testUser.id,
          batchId: testBatch.id,
          addressId: testAddress.id,
          status: 'pending',
          totalAmount: 1000,
          notes: '–ó–∞–∫–∞–∑ –¥–ª—è –æ—Ç–º–µ–Ω—ã'
        }
      });

      await tx.orderItem.create({
        data: {
          orderId: order.id,
          productId: testProduct1.id,
          quantity: 1,
          price: 1000
        }
      });

      await tx.product.update({
        where: { id: testProduct1.id },
        data: { maxQuantity: { decrement: 1 } }
      });

      return order;
    });

    // –û—Å—Ç–∞—Ç–æ–∫ –ø–µ—Ä–µ–¥ –æ—Ç–º–µ–Ω–æ–π
    const productBefore = await prisma.product.findUnique({
      where: { id: testProduct1.id }
    });
    const quantityBefore = productBefore.maxQuantity;

    // –û—Ç–º–µ–Ω—è–µ–º –∑–∞–∫–∞–∑ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏
    await prisma.$transaction(async (tx) => {
      await tx.order.update({
        where: { id: newOrder.id },
        data: { status: 'cancelled' }
      });

      const orderItems = await tx.orderItem.findMany({
        where: { orderId: newOrder.id }
      });

      for (const item of orderItems) {
        await tx.product.update({
          where: { id: item.productId },
          data: { maxQuantity: { increment: item.quantity } }
        });
      }
    });

    // –û—Å—Ç–∞—Ç–æ–∫ –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã
    const productAfter = await prisma.product.findUnique({
      where: { id: testProduct1.id }
    });

    expect(productAfter.maxQuantity).toBe(quantityBefore + 1);
    
    console.log(`‚úÖ –¢–µ—Å—Ç 6 –ø—Ä–æ–π–¥–µ–Ω: –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω, –æ—Å—Ç–∞—Ç–∫–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã (${quantityBefore} ‚Üí ${productAfter.maxQuantity})`);
  });

  // –¢–ï–°–¢ 7: –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º pending
  test('7. –î–æ–ª–∂–µ–Ω —É–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º pending', async () => {
    // –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    const orderToDelete = await prisma.order.create({
      data: {
        userId: testUser.id,
        batchId: testBatch.id,
        addressId: testAddress.id,
        status: 'pending',
        totalAmount: 500,
        notes: '–ó–∞–∫–∞–∑ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è'
      }
    });

    const orderId = orderToDelete.id;

    // –£–¥–∞–ª—è–µ–º –∑–∞–∫–∞–∑
    await prisma.$transaction(async (tx) => {
      await tx.orderItem.deleteMany({
        where: { orderId }
      });

      await tx.order.delete({
        where: { id: orderId }
      });
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞–∫–∞–∑ —É–¥–∞–ª–µ–Ω
    const deletedOrder = await prisma.order.findUnique({
      where: { id: orderId }
    });

    expect(deletedOrder).toBeNull();
    
    console.log(`‚úÖ –¢–µ—Å—Ç 7 –ø—Ä–æ–π–¥–µ–Ω: –ó–∞–∫–∞–∑ #${orderId} —É–¥–∞–ª–µ–Ω`);
  });

  // –¢–ï–°–¢ 8: –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑ —Å –¥—Ä—É–≥–∏–º —Å—Ç–∞—Ç—É—Å–æ–º
  test('8. –ù–µ –¥–æ–ª–∂–µ–Ω —É–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –æ—Ç–ª–∏—á–Ω—ã–º –æ—Ç pending', async () => {
    // –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º paid
    const paidOrder = await prisma.order.create({
      data: {
        userId: testUser.id,
        batchId: testBatch.id,
        addressId: testAddress.id,
        status: 'paid',
        totalAmount: 500,
        notes: '–û–ø–ª–∞—á–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑'
      }
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞–∫–∞–∑ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const order = await prisma.order.findFirst({
      where: {
        id: paidOrder.id,
        userId: testUser.id,
        status: 'pending'
      }
    });

    expect(order).toBeNull(); // –ù–µ –Ω–∞–π–¥–µ–º, —Ç.–∫. —Å—Ç–∞—Ç—É—Å 'paid'
    
    console.log(`‚úÖ –¢–µ—Å—Ç 8 –ø—Ä–æ–π–¥–µ–Ω: –ó–∞–∫–∞–∑ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'paid' –Ω–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å`);
  });

  // –¢–ï–°–¢ 9: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–∫–∞–∑–æ–≤ –ø–æ —Å—Ç–∞—Ç—É—Å—É
  test('9. –î–æ–ª–∂–µ–Ω —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –∑–∞–∫–∞–∑—ã –ø–æ —Å—Ç–∞—Ç—É—Å—É', async () => {
    const paidOrders = await prisma.order.findMany({
      where: {
        userId: testUser.id,
        status: 'paid'
      }
    });

    const pendingOrders = await prisma.order.findMany({
      where: {
        userId: testUser.id,
        status: 'pending'
      }
    });

    expect(Array.isArray(paidOrders)).toBe(true);
    expect(Array.isArray(pendingOrders)).toBe(true);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –∑–∞–∫–∞–∑—ã –∏–º–µ—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
    paidOrders.forEach(order => {
      expect(order.status).toBe('paid');
    });

    pendingOrders.forEach(order => {
      expect(order.status).toBe('pending');
    });
    
    console.log(`‚úÖ –¢–µ—Å—Ç 9 –ø—Ä–æ–π–¥–µ–Ω: paid: ${paidOrders.length}, pending: ${pendingOrders.length}`);
  });

  // –¢–ï–°–¢ 10: –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–π —Å—É–º–º—ã –∑–∞–∫–∞–∑–æ–≤
  test('10. –î–æ–ª–∂–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–¥—Å—á–∏—Ç–∞—Ç—å –æ–±—â—É—é —Å—É–º–º—É –∑–∞–∫–∞–∑–æ–≤', async () => {
    const orders = await prisma.order.findMany({
      where: {
        userId: testUser.id,
        status: { in: ['paid', 'delivered'] }
      }
    });

    const totalAmount = orders.reduce((sum, order) => {
      return sum + parseFloat(order.totalAmount);
    }, 0);

    expect(totalAmount).toBeGreaterThan(0);
    expect(typeof totalAmount).toBe('number');
    
    console.log(`‚úÖ –¢–µ—Å—Ç 10 –ø—Ä–æ–π–¥–µ–Ω: –û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–æ–≤ = ${totalAmount} ‚ÇΩ`);
  });
});
