// test/orders.test.js
// –¢–µ—Å—Ç—ã –¥–ª—è Orders API

const { PrismaClient } = require('@prisma/client');
const { cleanDatabase } = require('./helpers/db-cleaner');
const jwt = require('jsonwebtoken');

const prisma = new PrismaClient();

// üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò
if (process.env.NODE_ENV !== 'test') {
  throw new Error('üö® –≠—Ç–æ—Ç —Ç–µ—Å—Ç –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –¢–û–õ–¨–ö–û —Å NODE_ENV=test');
}

jest.setTimeout(30000);

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
const generateTestToken = (userId) => {
  return jwt.sign(
    { id: userId, phone: '+79991234567' },
    process.env.JWT_SECRET || 'test-secret-key-for-testing',
    { expiresIn: '24h' }
  );
};

describe('Orders API Tests', () => {
  let testUser;
  let testAddress;
  let testBatch;
  let testCategory;
  let testProduct1;
  let testProduct2;
  let testToken;

  beforeAll(async () => {
    console.log('üßπ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Orders...');
    
    // –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –ë–î
    await cleanDatabase(prisma);

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    testUser = await prisma.user.create({
      data: {
        phone: '+79991234567',
        firstName: '–¢–µ—Å—Ç–æ–≤—ã–π',
        lastName: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
        isActive: true,
        acceptedTerms: true
      }
    });

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å
    testAddress = await prisma.address.create({
      data: {
        userId: testUser.id,
        title: '–¢–µ—Å—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å',
        address: '—É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, –¥. 1',
        isDefault: true
      }
    });

    // –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ —Ç–æ–≤–∞—Ä—ã
    testCategory = await prisma.category.create({
      data: {
        name: 'TEST_Category_Orders',
        isActive: true
      }
    });

    testProduct1 = await prisma.product.create({
      data: {
        categoryId: testCategory.id,
        name: 'TEST_Product_1',
        price: 100,
        unit: '—à—Ç',
        isActive: true
      }
    });

    testProduct2 = await prisma.product.create({
      data: {
        categoryId: testCategory.id,
        name: 'TEST_Product_2',
        price: 200,
        unit: '–∫–≥',
        isActive: true
      }
    });

    // –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Ç–∏—é
    testBatch = await prisma.batch.create({
      data: {
        title: 'TEST_Batch_Orders',
        status: 'active',
        targetAmount: 10000,
        currentAmount: 0,
        participantsCount: 0,
        progressPercent: 0,
        marginPercent: 20,
        startDate: new Date(),
        endDate: new Date(Date.now() + 14 * 24 * 60 * 60 * 1000)
      }
    });

    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –ø–∞—Ä—Ç–∏—é
    await prisma.batchItem.createMany({
      data: [
        {
          batchId: testBatch.id,
          productId: testProduct1.id,
          price: testProduct1.price,
          discount: 10,
          isActive: true
        },
        {
          batchId: testBatch.id,
          productId: testProduct2.id,
          price: testProduct2.price,
          discount: 15,
          isActive: true
        }
      ]
    });

    testToken = generateTestToken(testUser.id);
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã');
  });

  afterAll(async () => {
    console.log('üßπ –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ orders —Ç–µ—Å—Ç–æ–≤...');
    await cleanDatabase(prisma);
    await prisma.$disconnect();
    console.log('‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
  });

  test('1. –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞', async () => {
    const order = await prisma.order.create({
      data: {
        userId: testUser.id,
        batchId: testBatch.id,
        addressId: testAddress.id,
        status: 'pending',
        totalAmount: 300
      }
    });

    expect(order).toBeDefined();
    expect(order.status).toBe('pending');
    console.log('‚úÖ –¢–µ—Å—Ç 1 –ø—Ä–æ–π–¥–µ–Ω: –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω');
  });
});
