// test/users-addresses.test.js
// –¢–µ—Å—Ç—ã –¥–ª—è Users & Addresses API

const request = require('supertest');
const { PrismaClient } = require('@prisma/client');
const { cleanDatabase } = require('./helpers/db-cleaner');
const jwt = require('jsonwebtoken');

const prisma = new PrismaClient();

// üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò
if (process.env.NODE_ENV !== 'test') {
  throw new Error('üö® –≠—Ç–æ—Ç —Ç–µ—Å—Ç –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –¢–û–õ–¨–ö–û —Å NODE_ENV=test');
}

jest.setTimeout(30000);

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Express app
const app = require('../src/server');

describe('Users & Addresses API - –ü–æ–ª–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ', () => {
  
  let testUser1;
  let testUser2;
  let testAddress1;
  let testAddress2;
  let userToken;
  let adminToken;

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è JWT —Ç–æ–∫–µ–Ω–æ–≤
  const generateToken = (userId, role = 'user') => {
    return jwt.sign(
      { id: userId, phone: '+79991234567', role: role },
      process.env.JWT_SECRET || 'test-secret-key-for-testing',
      { expiresIn: '24h' }
    );
  };

  const generateAdminToken = () => {
    return jwt.sign(
      { userId: 'admin-id', login: 'admin', role: 'admin' },
      process.env.JWT_SECRET || 'test-secret-key-for-testing',
      { expiresIn: '24h' }
    );
  };

  beforeAll(async () => {
    console.log('üßπ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Users & Addresses...');
    
    await cleanDatabase(prisma);

    // –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    testUser1 = await prisma.user.create({
      data: {
        phone: '+79991111111',
        firstName: '–ò–≤–∞–Ω',
        lastName: '–ò–≤–∞–Ω–æ–≤',
        email: 'ivan@test.ru',
        isActive: true,
        acceptedTerms: true
      }
    });

    testUser2 = await prisma.user.create({
      data: {
        phone: '+79992222222',
        firstName: '–ü—ë—Ç—Ä',
        lastName: '–ü–µ—Ç—Ä–æ–≤',
        isActive: true,
        acceptedTerms: true
      }
    });

    userToken = generateToken(testUser1.id);
    adminToken = generateAdminToken();

    // –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∞–¥—Ä–µ—Å–∞
    testAddress1 = await prisma.address.create({
      data: {
        userId: testUser1.id,
        title: '–î–æ–º',
        address: '—É–ª. –õ–µ–Ω–∏–Ω–∞, –¥. 1',
        isDefault: true
      }
    });

    testAddress2 = await prisma.address.create({
      data: {
        userId: testUser1.id,
        title: '–†–∞–±–æ—Ç–∞',
        address: '—É–ª. –ü—É—à–∫–∏–Ω–∞, –¥. 10',
        isDefault: false
      }
    });

    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è Users & Addresses –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã');
  });

  afterAll(async () => {
    console.log('üßπ –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ users-addresses —Ç–µ—Å—Ç–æ–≤...');
    await cleanDatabase(prisma);
    await prisma.$disconnect();
    console.log('‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
  });

  // ========================================
  // –†–ê–ó–î–ï–õ 1: USERS API (ADMIN)
  // ========================================

  test('1. GET /api/users - –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∞–¥–º–∏–Ω)', async () => {
    const response = await request(app)
      .get('/api/users')
      .set('Authorization', `Bearer ${adminToken}`);

    expect(response.status).toBe(200);
    expect(response.body.users).toBeDefined();
    expect(Array.isArray(response.body.users)).toBe(true);
    expect(response.body.users.length).toBeGreaterThanOrEqual(2);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = response.body.users[0];
    expect(user).toHaveProperty('id');
    expect(user).toHaveProperty('phone');
    expect(user).toHaveProperty('firstName');
    expect(user).toHaveProperty('isActive');
    
    console.log(`‚úÖ –¢–µ—Å—Ç 1 –ø—Ä–æ–π–¥–µ–Ω: –ü–æ–ª—É—á–µ–Ω–æ ${response.body.users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
  });

  test('2. GET /api/users - –¥–æ–ª–∂–µ–Ω –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –±–µ–∑ —Ç–æ–∫–µ–Ω–∞', async () => {
    const response = await request(app)
      .get('/api/users');

    expect(response.status).toBe(401);
    
    console.log('‚úÖ –¢–µ—Å—Ç 2 –ø—Ä–æ–π–¥–µ–Ω: –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω');
  });

  test('3. GET /api/users - –¥–æ–ª–∂–µ–Ω –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', async () => {
    const response = await request(app)
      .get('/api/users')
      .set('Authorization', `Bearer ${userToken}`);

    // –ú–æ–∂–µ—Ç –±—ã—Ç—å 403 (Forbidden) –∏–ª–∏ 401 –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç middleware
    expect([401, 403]).toContain(response.status);
    
    console.log('‚úÖ –¢–µ—Å—Ç 3 –ø—Ä–æ–π–¥–µ–Ω: –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫');
  });

  test('4. GET /api/users/:id - –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID (–∞–¥–º–∏–Ω)', async () => {
    const response = await request(app)
      .get(`/api/users/${testUser1.id}`)
      .set('Authorization', `Bearer ${adminToken}`);

    expect(response.status).toBe(200);
    expect(response.body.user).toBeDefined();
    expect(response.body.user.id).toBe(testUser1.id);
    expect(response.body.user.phone).toBe(testUser1.phone);
    expect(response.body.user.firstName).toBe(testUser1.firstName);
    
    console.log('‚úÖ –¢–µ—Å—Ç 4 –ø—Ä–æ–π–¥–µ–Ω: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–µ–Ω –ø–æ ID');
  });

  test('5. GET /api/users/:id - –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å 404 –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', async () => {
    const response = await request(app)
      .get('/api/users/99999')
      .set('Authorization', `Bearer ${adminToken}`);

    expect(response.status).toBe(404);
    expect(response.body.error).toBeDefined();
    
    console.log('‚úÖ –¢–µ—Å—Ç 5 –ø—Ä–æ–π–¥–µ–Ω: –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω');
  });

  test('6. GET /api/users/:id - –¥–æ–ª–∂–µ–Ω –≤–∫–ª—é—á–∞—Ç—å –∞–¥—Ä–µ—Å–∞ –∏ –∑–∞–∫–∞–∑—ã', async () => {
    const response = await request(app)
      .get(`/api/users/${testUser1.id}`)
      .set('Authorization', `Bearer ${adminToken}`);

    expect(response.status).toBe(200);
    expect(response.body.user.addresses).toBeDefined();
    expect(Array.isArray(response.body.user.addresses)).toBe(true);
    expect(response.body.user.addresses.length).toBeGreaterThanOrEqual(2);
    expect(response.body.user.orders).toBeDefined();
    
    console.log('‚úÖ –¢–µ—Å—Ç 6 –ø—Ä–æ–π–¥–µ–Ω: –ê–¥—Ä–µ—Å–∞ –∏ –∑–∞–∫–∞–∑—ã –≤–∫–ª—é—á–µ–Ω—ã –≤ –æ—Ç–≤–µ—Ç');
  });

  // ========================================
  // –†–ê–ó–î–ï–õ 2: ADDRESSES API - –ü–û–õ–£–ß–ï–ù–ò–ï
  // ========================================

  test('7. GET /api/addresses - –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å –∞–¥—Ä–µ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', async () => {
    const response = await request(app)
      .get('/api/addresses')
      .set('Authorization', `Bearer ${userToken}`);

    expect(response.status).toBe(200);
    expect(response.body.addresses).toBeDefined();
    expect(Array.isArray(response.body.addresses)).toBe(true);
    expect(response.body.addresses.length).toBe(2);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –∞–¥—Ä–µ—Å –ø–µ—Ä–≤—ã–π
    expect(response.body.addresses[0].isDefault).toBe(true);
    
    console.log(`‚úÖ –¢–µ—Å—Ç 7 –ø—Ä–æ–π–¥–µ–Ω: –ü–æ–ª—É—á–µ–Ω–æ ${response.body.addresses.length} –∞–¥—Ä–µ—Å–æ–≤`);
  });

  test('8. GET /api/addresses - –¥–æ–ª–∂–µ–Ω –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –±–µ–∑ —Ç–æ–∫–µ–Ω–∞', async () => {
    const response = await request(app)
      .get('/api/addresses');

    expect(response.status).toBe(401);
    
    console.log('‚úÖ –¢–µ—Å—Ç 8 –ø—Ä–æ–π–¥–µ–Ω: –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω');
  });

  test('9. GET /api/addresses - –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Ç–æ–ª—å–∫–æ –∞–¥—Ä–µ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', async () => {
    const user2Token = generateToken(testUser2.id);
    
    const response = await request(app)
      .get('/api/addresses')
      .set('Authorization', `Bearer ${user2Token}`);

    expect(response.status).toBe(200);
    expect(response.body.addresses.length).toBe(0);
    
    console.log('‚úÖ –¢–µ—Å—Ç 9 –ø—Ä–æ–π–¥–µ–Ω: –ò–∑–æ–ª—è—Ü–∏—è –∞–¥—Ä–µ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ä–∞–±–æ—Ç–∞–µ—Ç');
  });

  // ========================================
  // –†–ê–ó–î–ï–õ 3: ADDRESSES API - –°–û–ó–î–ê–ù–ò–ï
  // ========================================

  test('10. POST /api/addresses - –¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å', async () => {
    const newAddress = {
      title: '–î–∞—á–∞',
      address: '–°–∞–¥–æ–≤–æ–µ —Ç–æ–≤–∞—Ä–∏—â–µ—Å—Ç–≤–æ "–†–æ–º–∞—à–∫–∞", —É—á–∞—Å—Ç–æ–∫ 42',
      isDefault: false
    };

    const response = await request(app)
      .post('/api/addresses')
      .set('Authorization', `Bearer ${userToken}`)
      .send(newAddress);

    expect(response.status).toBe(201);
    expect(response.body.message).toBeDefined();
    expect(response.body.address).toBeDefined();
    expect(response.body.address.title).toBe(newAddress.title);
    expect(response.body.address.address).toBe(newAddress.address);
    expect(response.body.address.userId).toBe(testUser1.id);
    
    console.log('‚úÖ –¢–µ—Å—Ç 10 –ø—Ä–æ–π–¥–µ–Ω: –ê–¥—Ä–µ—Å —Å–æ–∑–¥–∞–Ω');
  });

  test('11. POST /api/addresses - –¥–æ–ª–∂–µ–Ω —Ç—Ä–µ–±–æ–≤–∞—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è', async () => {
    const response = await request(app)
      .post('/api/addresses')
      .set('Authorization', `Bearer ${userToken}`)
      .send({
        title: '–¢–µ—Å—Ç'
        // address –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
      });

    expect(response.status).toBe(400);
    expect(response.body.error).toMatch(/–æ–±—è–∑–∞—Ç–µ–ª—å–Ω/i);
    
    console.log('‚úÖ –¢–µ—Å—Ç 11 –ø—Ä–æ–π–¥–µ–Ω: –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π —Ä–∞–±–æ—Ç–∞–µ—Ç');
  });

  test('12. POST /api/addresses - –¥–æ–ª–∂–µ–Ω –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –±–µ–∑ —Ç–æ–∫–µ–Ω–∞', async () => {
    const response = await request(app)
      .post('/api/addresses')
      .send({
        title: '–¢–µ—Å—Ç',
        address: '–¢–µ—Å—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å'
      });

    expect(response.status).toBe(401);
    
    console.log('‚úÖ –¢–µ—Å—Ç 12 –ø—Ä–æ–π–¥–µ–Ω: –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω');
  });

  test('13. POST /api/addresses - –¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞—Ç—å –∞–¥—Ä–µ—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é', async () => {
    const newAddress = {
      title: '–ù–æ–≤—ã–π –¥–æ–º',
      address: '—É–ª. –ù–æ–≤–∞—è, –¥. 5',
      isDefault: true
    };

    const response = await request(app)
      .post('/api/addresses')
      .set('Authorization', `Bearer ${userToken}`)
      .send(newAddress);

    expect(response.status).toBe(201);
    expect(response.body.address.isDefault).toBe(true);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å—Ç–∞—Ä—ã–π –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –∞–¥—Ä–µ—Å —Å–±—Ä–æ—à–µ–Ω
    const oldDefaultAddress = await prisma.address.findUnique({
      where: { id: testAddress1.id }
    });

    expect(oldDefaultAddress.isDefault).toBe(false);
    
    console.log('‚úÖ –¢–µ—Å—Ç 13 –ø—Ä–æ–π–¥–µ–Ω: –î–µ—Ñ–æ–ª—Ç–Ω—ã–π –∞–¥—Ä–µ—Å –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω');
  });

  // ========================================
  // –†–ê–ó–î–ï–õ 4: –í–ê–õ–ò–î–ê–¶–ò–Ø –ò –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨
  // ========================================

  test('14. –î–æ–ª–∂–µ–Ω —Ö—Ä–∞–Ω–∏—Ç—å userId –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ', async () => {
    const addresses = await prisma.address.findMany({
      where: { userId: testUser1.id }
    });

    addresses.forEach(addr => {
      expect(addr.userId).toBe(testUser1.id);
    });
    
    console.log('‚úÖ –¢–µ—Å—Ç 14 –ø—Ä–æ–π–¥–µ–Ω: userId —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
  });

  test('15. –î–æ–ª–∂–µ–Ω —Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–¥—Ä–µ—Å–∞ (–¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –ø–µ—Ä–≤—ã–π)', async () => {
    const response = await request(app)
      .get('/api/addresses')
      .set('Authorization', `Bearer ${userToken}`);

    expect(response.status).toBe(200);
    
    const addresses = response.body.addresses;
    
    // –î–µ—Ñ–æ–ª—Ç–Ω—ã–π –∞–¥—Ä–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–≤—ã–º
    if (addresses.some(a => a.isDefault)) {
      expect(addresses[0].isDefault).toBe(true);
    }
    
    console.log('‚úÖ –¢–µ—Å—Ç 15 –ø—Ä–æ–π–¥–µ–Ω: –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∞–¥—Ä–µ—Å–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç');
  });

  test('16. –î–æ–ª–∂–µ–Ω –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', async () => {
    const user2Token = generateToken(testUser2.id);
    
    const response = await request(app)
      .post('/api/addresses')
      .set('Authorization', `Bearer ${user2Token}`)
      .send({
        title: '–ê–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 2',
        address: '–ï–≥–æ –∞–¥—Ä–µ—Å'
      });

    expect(response.status).toBe(201);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∞–¥—Ä–µ—Å —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const createdAddress = await prisma.address.findUnique({
      where: { id: response.body.address.id }
    });

    expect(createdAddress.userId).toBe(testUser2.id);
    expect(createdAddress.userId).not.toBe(testUser1.id);
    
    console.log('‚úÖ –¢–µ—Å—Ç 16 –ø—Ä–æ–π–¥–µ–Ω: –ò–∑–æ–ª—è—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ä–∞–±–æ—Ç–∞–µ—Ç');
  });

  // ========================================
  // –†–ê–ó–î–ï–õ 5: –°–í–Ø–ó–ò –ò –¶–ï–õ–û–°–¢–ù–û–°–¢–¨
  // ========================================

  test('17. –î–æ–ª–∂–µ–Ω —Å–≤—è–∑—ã–≤–∞—Ç—å –∞–¥—Ä–µ—Å–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏', async () => {
    const user = await prisma.user.findUnique({
      where: { id: testUser1.id },
      include: {
        addresses: true
      }
    });

    expect(user.addresses.length).toBeGreaterThanOrEqual(2);
    
    user.addresses.forEach(addr => {
      expect(addr.userId).toBe(testUser1.id);
    });
    
    console.log('‚úÖ –¢–µ—Å—Ç 17 –ø—Ä–æ–π–¥–µ–Ω: –°–≤—è–∑–∏ user ‚Üí addresses —Ä–∞–±–æ—Ç–∞—é—Ç');
  });

  test('18. –î–æ–ª–∂–µ–Ω —É–¥–∞–ª–∏—Ç—å –∞–¥—Ä–µ—Å–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (CASCADE)', async () => {
    // –°–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const tempUser = await prisma.user.create({
      data: {
        phone: '+79999999999',
        firstName: '–í—Ä–µ–º–µ–Ω–Ω—ã–π',
        isActive: true,
        acceptedTerms: true
      }
    });

    // –°–æ–∑–¥–∞—ë–º –¥–ª—è –Ω–µ–≥–æ –∞–¥—Ä–µ—Å
    const tempAddress = await prisma.address.create({
      data: {
        userId: tempUser.id,
        title: '–í—Ä–µ–º–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å',
        address: '–ë—É–¥–µ—Ç —É–¥–∞–ª—ë–Ω'
      }
    });

    // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await prisma.user.delete({
      where: { id: tempUser.id }
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∞–¥—Ä–µ—Å —Ç–æ–∂–µ —É–¥–∞–ª—ë–Ω
    const addressExists = await prisma.address.findUnique({
      where: { id: tempAddress.id }
    });

    expect(addressExists).toBeNull();
    
    console.log('‚úÖ –¢–µ—Å—Ç 18 –ø—Ä–æ–π–¥–µ–Ω: –ö–∞—Å–∫–∞–¥–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
  });

  // ========================================
  // –†–ê–ó–î–ï–õ 6: EDGE CASES
  // ========================================

  test('19. –î–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –¥–ª–∏–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–∞', async () => {
    const longAddress = '–ê'.repeat(500);
    
    const response = await request(app)
      .post('/api/addresses')
      .set('Authorization', `Bearer ${userToken}`)
      .send({
        title: '–î–ª–∏–Ω–Ω—ã–π –∞–¥—Ä–µ—Å',
        address: longAddress
      });

    expect(response.status).toBe(201);
    expect(response.body.address.address.length).toBe(500);
    
    console.log('‚úÖ –¢–µ—Å—Ç 19 –ø—Ä–æ–π–¥–µ–Ω: –î–ª–∏–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è');
  });

  test('20. –î–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã –≤ –∞–¥—Ä–µ—Å–∞—Ö', async () => {
    const specialAddress = '—É–ª. "–ù–æ–≤–∞—è", –¥. 5/7, –∫–≤. 10-–ê';
    
    const response = await request(app)
      .post('/api/addresses')
      .set('Authorization', `Bearer ${userToken}`)
      .send({
        title: '–°–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã',
        address: specialAddress
      });

    expect(response.status).toBe(201);
    expect(response.body.address.address).toBe(specialAddress);
    
    console.log('‚úÖ –¢–µ—Å—Ç 20 –ø—Ä–æ–π–¥–µ–Ω: –°–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è');
  });

  test('21. –î–æ–ª–∂–µ–Ω –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è', async () => {
    // –°–æ–∑–¥–∞—ë–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞–¥—Ä–µ—Å–æ–≤
    for (let i = 1; i <= 3; i++) {
      await request(app)
        .post('/api/addresses')
        .set('Authorization', `Bearer ${userToken}`)
        .send({
          title: `–ê–¥—Ä–µ—Å ${i}`,
          address: `–ê–¥—Ä–µ—Å –Ω–æ–º–µ—Ä ${i}`,
          isDefault: true // –ö–∞–∂–¥—ã–π —Ä–∞–∑ –¥–µ–ª–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º
        });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∞–¥—Ä–µ—Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π
    const addresses = await prisma.address.findMany({
      where: { userId: testUser1.id }
    });

    const defaultAddresses = addresses.filter(a => a.isDefault);
    
    expect(defaultAddresses.length).toBe(1);
    
    console.log('‚úÖ –¢–µ—Å—Ç 21 –ø—Ä–æ–π–¥–µ–Ω: –¢–æ–ª—å–∫–æ –æ–¥–∏–Ω –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –∞–¥—Ä–µ—Å');
  });

  test('22. –î–æ–ª–∂–µ–Ω –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–¥—Ä–µ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', async () => {
    const response = await request(app)
      .get(`/api/users/${testUser1.id}`)
      .set('Authorization', `Bearer ${adminToken}`);

    expect(response.status).toBe(200);
    
    const addressCount = response.body.user.addresses.length;
    expect(addressCount).toBeGreaterThan(0);
    
    console.log(`‚úÖ –¢–µ—Å—Ç 22 –ø—Ä–æ–π–¥–µ–Ω: –ü–æ–¥—Å—á–∏—Ç–∞–Ω–æ ${addressCount} –∞–¥—Ä–µ—Å–æ–≤`);
  });

  // ========================================
  // –ò–¢–û–ì–û–í–ê–Ø –ü–†–û–í–ï–†–ö–ê
  // ========================================

  test('–ò–¢–û–ì: Users & Addresses API –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω', async () => {
    console.log('\nüèÜ –ò–¢–û–ì–û–í–ê–Ø –ü–†–û–í–ï–†–ö–ê Users & Addresses API');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã —Å–æ–∑–¥–∞–Ω—ã
    expect(testUser1).toBeDefined();
    expect(testUser2).toBeDefined();
    expect(testAddress1).toBeDefined();
    expect(testAddress2).toBeDefined();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º Users API
    const usersResponse = await request(app)
      .get('/api/users')
      .set('Authorization', `Bearer ${adminToken}`);

    expect(usersResponse.status).toBe(200);
    expect(usersResponse.body.users.length).toBeGreaterThanOrEqual(2);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º Addresses API
    const addressesResponse = await request(app)
      .get('/api/addresses')
      .set('Authorization', `Bearer ${userToken}`);

    expect(addressesResponse.status).toBe(200);
    expect(addressesResponse.body.addresses.length).toBeGreaterThan(0);

    console.log('‚úÖ –í–°–ï –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò –†–ê–ë–û–¢–ê–Æ–¢');
    console.log('‚úÖ USERS & ADDRESSES API –ü–û–õ–ù–û–°–¢–¨–Æ –ü–†–û–¢–ï–°–¢–ò–†–û–í–ê–ù');
    console.log('üéâ 22 –¢–ï–°–¢–ê –ü–†–û–ô–î–ï–ù–û –£–°–ü–ï–®–ù–û!');
  });
});
