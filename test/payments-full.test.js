// test/payments-full.test.js
// –ü–æ–ª–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ Payments API - –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –¢–æ—á–∫–∞ –ë–∞–Ω–∫

const { PrismaClient } = require('@prisma/client');
const { cleanDatabase } = require('./helpers/db-cleaner');
const jwt = require('jsonwebtoken');
const TochkaPaymentService = require('../src/services/tochkaPaymentService');

const prisma = new PrismaClient();

// üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò
if (process.env.NODE_ENV !== 'test') {
  throw new Error('üö® –≠—Ç–æ—Ç —Ç–µ—Å—Ç –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –¢–û–õ–¨–ö–û —Å NODE_ENV=test');
}

jest.setTimeout(30000);

// Mock –¥–ª—è TochkaPaymentService —á—Ç–æ–±—ã –Ω–µ –¥–µ–ª–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∫ API
jest.mock('../src/services/tochkaPaymentService');

describe('Payments API - –ü–æ–ª–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ', () => {
  
  let testUser;
  let testAddress;
  let testCategory;
  let testProduct1;
  let testProduct2;
  let testBatch;
  let testOrder;
  let testPayment;
  let testToken;

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
  const generateTestToken = (userId) => {
    return jwt.sign(
      { id: userId, phone: '+79991234567' },
      process.env.JWT_SECRET || 'test-secret-key-for-testing',
      { expiresIn: '24h' }
    );
  };

  beforeAll(async () => {
    console.log('üßπ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Payments Full...');
    
    await cleanDatabase(prisma);

    // –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    testUser = await prisma.user.create({
      data: {
        phone: '+79991234567',
        firstName: '–¢–µ—Å—Ç–æ–≤—ã–π',
        lastName: '–ü–ª–∞—Ç–µ–ª—å—â–∏–∫',
        isActive: true,
        acceptedTerms: true
      }
    });

    testToken = generateTestToken(testUser.id);

    // –°–æ–∑–¥–∞—ë–º –∞–¥—Ä–µ—Å
    testAddress = await prisma.address.create({
      data: {
        userId: testUser.id,
        title: '–¢–µ—Å—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å',
        address: '—É–ª. –ü–ª–∞—Ç—ë–∂–Ω–∞—è, –¥. 1',
        isDefault: true
      }
    });

    // –°–æ–∑–¥–∞—ë–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    testCategory = await prisma.category.create({
      data: {
        name: '–¢–µ—Å—Ç–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è –ø–ª–∞—Ç–µ–∂–µ–π',
        isActive: true
      }
    });

    // –°–æ–∑–¥–∞—ë–º —Ç–æ–≤–∞—Ä—ã
    testProduct1 = await prisma.product.create({
      data: {
        name: '–¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä 1 (–æ–ø–ª–∞—Ç–∞)',
        categoryId: testCategory.id,
        price: 500,
        unit: '—à—Ç',
        isActive: true,
        maxQuantity: 100
      }
    });

    testProduct2 = await prisma.product.create({
      data: {
        name: '–¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä 2 (–æ–ø–ª–∞—Ç–∞)',
        categoryId: testCategory.id,
        price: 700,
        unit: '–∫–≥',
        isActive: true,
        maxQuantity: 50
      }
    });

    // –°–æ–∑–¥–∞—ë–º –ø–∞—Ä—Ç–∏—é
    testBatch = await prisma.batch.create({
      data: {
        title: '–¢–µ—Å—Ç–æ–≤–∞—è –ø–∞—Ä—Ç–∏—è –¥–ª—è –ø–ª–∞—Ç–µ–∂–µ–π',
        description: '–î–ª—è —Ç–µ—Å—Ç–æ–≤ –æ–ø–ª–∞—Ç—ã',
        targetAmount: 10000,
        currentAmount: 0,
        participantsCount: 0,
        progressPercent: 0,
        marginPercent: 20,
        startDate: new Date(),
        endDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000),
        status: 'collecting'
      }
    });

    // –°–æ–∑–¥–∞—ë–º –∑–∞–∫–∞–∑
    testOrder = await prisma.order.create({
      data: {
        userId: testUser.id,
        batchId: testBatch.id,
        addressId: testAddress.id,
        status: 'pending',
        totalAmount: 1200,
        notes: '–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑ –¥–ª—è –æ–ø–ª–∞—Ç—ã'
      }
    });

    // –°–æ–∑–¥–∞—ë–º –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–∞
    await prisma.orderItem.createMany({
      data: [
        {
          orderId: testOrder.id,
          productId: testProduct1.id,
          quantity: 1,
          price: 500,
        },
        {
          orderId: testOrder.id,
          productId: testProduct2.id,
          quantity: 1,
          price: 700,
        }
      ]
    });

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º mock –¥–ª—è TochkaPaymentService
    TochkaPaymentService.mockImplementation(() => {
      return {
        createPayment: jest.fn().mockResolvedValue({
          success: true,
          paymentId: 'TEST_PAYMENT_' + Date.now(),
          confirmationUrl: 'https://test.tochka.com/pay/test123',
          status: 'CREATED',
          realOrderId: testOrder.id,
          orderCreated: true,
          breakdown: {
            goods: 1200,
            service: 240,
            total: 1440,
            marginPercent: 20,
            itemsCount: 2
          }
        }),
        checkPaymentStatus: jest.fn().mockResolvedValue({
          paymentId: 'TEST_PAYMENT_123',
          status: 'APPROVED',
          isPaid: true,
          isCanceled: false,
          isPending: false,
          amount: 1440,
          createdAt: new Date().toISOString(),
          paidAt: new Date().toISOString()
        })
      };
    });

    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è Payments –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã');
  });

  afterAll(async () => {
    console.log('üßπ –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ payments-full —Ç–µ—Å—Ç–æ–≤...');
    await cleanDatabase(prisma);
    await prisma.$disconnect();
    console.log('‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
  });

  // ========================================
  // –†–ê–ó–î–ï–õ 1: –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–¨
  // ========================================

  test('1. –î–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å payment –≤ –ë–î', async () => {
    testPayment = await prisma.payment.create({
      data: {
        paymentId: 'TEST_PAYMENT_001',
        orderId: testOrder.id,
        status: 'CREATED',
        amount: 1200,
        provider: 'tochka',
        metadata: JSON.stringify({
          customerPhone: testUser.phone,
          items: [
            { productId: testProduct1.id, quantity: 1, price: 500 },
            { productId: testProduct2.id, quantity: 1, price: 700 }
          ]
        })
      }
    });

    expect(testPayment).toBeDefined();
    expect(testPayment.paymentId).toBe('TEST_PAYMENT_001');
    expect(testPayment.status).toBe('CREATED');
    expect(parseFloat(testPayment.amount)).toBe(1200);
    expect(testPayment.provider).toBe('tochka');
    
    console.log('‚úÖ –¢–µ—Å—Ç 1 –ø—Ä–æ–π–¥–µ–Ω: Payment –∑–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞');
  });

  test('2. –î–æ–ª–∂–µ–Ω —Å–≤—è–∑–∞—Ç—å payment —Å order', async () => {
    const payment = await prisma.payment.findUnique({
      where: { paymentId: 'TEST_PAYMENT_001' },
      include: {
        order: true
      }
    });

    expect(payment.order).toBeDefined();
    expect(payment.order.id).toBe(testOrder.id);
    expect(payment.order.status).toBe('pending');
    expect(parseFloat(payment.order.totalAmount)).toBe(1200);
    
    console.log('‚úÖ –¢–µ—Å—Ç 2 –ø—Ä–æ–π–¥–µ–Ω: Payment —Å–≤—è–∑–∞–Ω —Å Order');
  });

  test('3. –î–æ–ª–∂–µ–Ω –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å payment –Ω–∞ APPROVED', async () => {
    const updated = await prisma.payment.update({
      where: { paymentId: 'TEST_PAYMENT_001' },
      data: {
        status: 'APPROVED',
        paidAt: new Date()
      }
    });

    expect(updated.status).toBe('APPROVED');
    expect(updated.paidAt).toBeDefined();
    
    console.log('‚úÖ –¢–µ—Å—Ç 3 –ø—Ä–æ–π–¥–µ–Ω: –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞ APPROVED');
  });

  test('4. –î–æ–ª–∂–µ–Ω –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã', async () => {
    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –∫–∞–∫ —ç—Ç–æ –¥–µ–ª–∞–µ—Ç webhook
    const updatedOrder = await prisma.order.update({
      where: { id: testOrder.id },
      data: { status: 'paid' }
    });

    expect(updatedOrder.status).toBe('paid');
    
    console.log('‚úÖ –¢–µ—Å—Ç 4 –ø—Ä–æ–π–¥–µ–Ω: –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞ paid');
  });

  test('5. –î–æ–ª–∂–µ–Ω –Ω–∞–π—Ç–∏ payment –ø–æ paymentId', async () => {
    const found = await prisma.payment.findUnique({
      where: { paymentId: 'TEST_PAYMENT_001' }
    });

    expect(found).toBeDefined();
    expect(found.status).toBe('APPROVED');
    expect(found.paidAt).toBeDefined();
    
    console.log('‚úÖ –¢–µ—Å—Ç 5 –ø—Ä–æ–π–¥–µ–Ω: Payment –Ω–∞–π–¥–µ–Ω –ø–æ paymentId');
  });

  test('6. –î–æ–ª–∂–µ–Ω –Ω–∞–π—Ç–∏ –≤—Å–µ –ø–ª–∞—Ç–µ–∂–∏ –ø–æ orderId', async () => {
    const payments = await prisma.payment.findMany({
      where: { orderId: testOrder.id }
    });

    expect(payments.length).toBeGreaterThan(0);
    expect(payments[0].orderId).toBe(testOrder.id);
    
    console.log(`‚úÖ –¢–µ—Å—Ç 6 –ø—Ä–æ–π–¥–µ–Ω: –ù–∞–π–¥–µ–Ω–æ ${payments.length} –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è –∑–∞–∫–∞–∑–∞`);
  });

  // ========================================
  // –†–ê–ó–î–ï–õ 2: –†–ê–°–ß–Å–¢–´ –ò –§–ò–°–ö–ê–õ–ò–ó–ê–¶–ò–Ø
  // ========================================

  test('7. –î–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞–∑–¥–µ–ª–∏—Ç—å —Å—É–º–º—É –Ω–∞ —Ç–æ–≤–∞—Ä—ã –∏ —É—Å–ª—É–≥—É', async () => {
    const goodsAmount = 1200; // –°—É–º–º–∞ —Ç–æ–≤–∞—Ä–æ–≤
    const marginPercent = 20;
    const serviceAmount = goodsAmount * (marginPercent / 100);
    const totalAmount = goodsAmount + serviceAmount;

    expect(serviceAmount).toBe(240);
    expect(totalAmount).toBe(1440);
    
    console.log('‚úÖ –¢–µ—Å—Ç 7 –ø—Ä–æ–π–¥–µ–Ω: –†–∞—Å—á—ë—Ç –º–∞—Ä–∂–∏ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω (20% –æ—Ç 1200‚ÇΩ = 240‚ÇΩ)');
  });

  test('8. –î–æ–ª–∂–µ–Ω —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å metadata —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–æ–≤–∞—Ä–∞—Ö', async () => {
    const payment = await prisma.payment.findUnique({
      where: { paymentId: 'TEST_PAYMENT_001' }
    });

    const metadata = JSON.parse(payment.metadata);
    
    expect(metadata).toBeDefined();
    expect(metadata.items).toBeDefined();
    expect(metadata.items.length).toBe(2);
    expect(metadata.customerPhone).toBe(testUser.phone);
    
    console.log('‚úÖ –¢–µ—Å—Ç 8 –ø—Ä–æ–π–¥–µ–Ω: Metadata —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
  });

  test('9. –î–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –ù–î–° (vat_code=6 => 20%)', async () => {
    const amount = 1000;
    const vatPercent = 20;
    const vatAmount = amount * (vatPercent / 100);
    const totalWithVat = amount + vatAmount;

    // vat_code = 6 –≤ –¢–æ—á–∫–∞ –ë–∞–Ω–∫ –æ–∑–Ω–∞—á–∞–µ—Ç –ù–î–° 20%
    expect(vatAmount).toBe(200);
    expect(totalWithVat).toBe(1200);
    
    console.log('‚úÖ –¢–µ—Å—Ç 9 –ø—Ä–æ–π–¥–µ–Ω: –†–∞—Å—á—ë—Ç –ù–î–° –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω (20% –æ—Ç 1000‚ÇΩ = 200‚ÇΩ)');
  });

  // ========================================
  // –†–ê–ó–î–ï–õ 3: WEBHOOK –°–¶–ï–ù–ê–†–ò–ò
  // ========================================

  test('10. –î–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å webhook APPROVED', async () => {
    // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –ø–ª–∞—Ç—ë–∂ –¥–ª—è —Ç–µ—Å—Ç–∞ webhook
    const webhookPayment = await prisma.payment.create({
      data: {
        paymentId: 'WEBHOOK_TEST_001',
        orderId: testOrder.id,
        status: 'PENDING',
        amount: 1440,
        provider: 'tochka'
      }
    });

    // –°–∏–º—É–ª–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É webhook
    const updated = await prisma.payment.update({
      where: { paymentId: 'WEBHOOK_TEST_001' },
      data: {
        status: 'APPROVED',
        paidAt: new Date(),
        metadata: JSON.stringify({
          webhookData: {
            operationId: 'WEBHOOK_TEST_001',
            status: 'APPROVED',
            amount: 1440
          }
        })
      }
    });

    expect(updated.status).toBe('APPROVED');
    expect(updated.paidAt).toBeDefined();
    
    console.log('‚úÖ –¢–µ—Å—Ç 10 –ø—Ä–æ–π–¥–µ–Ω: Webhook APPROVED –æ–±—Ä–∞–±–æ—Ç–∞–Ω');
  });

  test('11. –î–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å webhook FAILED', async () => {
    const failedPayment = await prisma.payment.create({
      data: {
        paymentId: 'WEBHOOK_TEST_002',
        orderId: testOrder.id,
        status: 'PENDING',
        amount: 1440,
        provider: 'tochka'
      }
    });

    // –°–∏–º—É–ª–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É webhook FAILED
    const updated = await prisma.payment.update({
      where: { paymentId: 'WEBHOOK_TEST_002' },
      data: {
        status: 'FAILED',
        metadata: JSON.stringify({
          webhookData: {
            operationId: 'WEBHOOK_TEST_002',
            status: 'FAILED',
            errorMessage: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤'
          }
        })
      }
    });

    expect(updated.status).toBe('FAILED');
    expect(updated.paidAt).toBeNull();
    
    console.log('‚úÖ –¢–µ—Å—Ç 11 –ø—Ä–æ–π–¥–µ–Ω: Webhook FAILED –æ–±—Ä–∞–±–æ—Ç–∞–Ω');
  });

  // ========================================
  // –†–ê–ó–î–ï–õ 4: –°–í–Ø–ó–ò –ò –ö–ê–°–ö–ê–î–ù–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï
  // ========================================

  test('12. –î–æ–ª–∂–µ–Ω –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–∞—Ä—Ç–∏–∏ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã', async () => {
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä—Ç–∏—é –∫–∞–∫ —ç—Ç–æ –¥–µ–ª–∞–µ—Ç webhook
    const updatedBatch = await prisma.batch.update({
      where: { id: testBatch.id },
      data: {
        currentAmount: { increment: 1440 },
        participantsCount: { increment: 1 },
        progressPercent: Math.min(Math.round((1440 / 10000) * 100), 100)
      }
    });

    expect(parseFloat(updatedBatch.currentAmount)).toBe(1440);
    expect(updatedBatch.participantsCount).toBe(1);
    expect(updatedBatch.progressPercent).toBeGreaterThan(0);
    
    console.log('‚úÖ –¢–µ—Å—Ç 12 –ø—Ä–æ–π–¥–µ–Ω: –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–∞—Ä—Ç–∏–∏ –æ–±–Ω–æ–≤–ª—ë–Ω');
  });

  test('13. –î–æ–ª–∂–µ–Ω –Ω–∞–π—Ç–∏ –≤—Å–µ –ø–ª–∞—Ç–µ–∂–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', async () => {
    const userPayments = await prisma.payment.findMany({
      where: {
        order: {
          userId: testUser.id
        }
      },
      include: {
        order: true
      }
    });

    expect(userPayments.length).toBeGreaterThan(0);
    userPayments.forEach(payment => {
      expect(payment.order.userId).toBe(testUser.id);
    });
    
    console.log(`‚úÖ –¢–µ—Å—Ç 13 –ø—Ä–æ–π–¥–µ–Ω: –ù–∞–π–¥–µ–Ω–æ ${userPayments.length} –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è`);
  });

  // ========================================
  // –†–ê–ó–î–ï–õ 5: –í–ê–õ–ò–î–ê–¶–ò–Ø –ò –û–®–ò–ë–ö–ò
  // ========================================

  test('14. –ù–µ –¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞—Ç—å payment –±–µ–∑ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π', async () => {
    await expect(
      prisma.payment.create({
        data: {
          // –ü—Ä–æ–ø—É—â–µ–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
          status: 'CREATED'
        }
      })
    ).rejects.toThrow();
    
    console.log('‚úÖ –¢–µ—Å—Ç 14 –ø—Ä–æ–π–¥–µ–Ω: –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π —Ä–∞–±–æ—Ç–∞–µ—Ç');
  });

  test('15. –ù–µ –¥–æ–ª–∂–µ–Ω –Ω–∞–π—Ç–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π payment', async () => {
    const notFound = await prisma.payment.findUnique({
      where: { paymentId: 'NONEXISTENT_PAYMENT' }
    });

    expect(notFound).toBeNull();
    
    console.log('‚úÖ –¢–µ—Å—Ç 15 –ø—Ä–æ–π–¥–µ–Ω: –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π payment –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç null');
  });

  // ========================================
  // –†–ê–ó–î–ï–õ 6: –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò –§–ò–õ–¨–¢–†–ê–¶–ò–Ø
  // ========================================

  test('16. –î–æ–ª–∂–µ–Ω –ø–æ—Å—á–∏—Ç–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π', async () => {
    const approvedCount = await prisma.payment.count({
      where: { status: 'APPROVED' }
    });

    expect(approvedCount).toBeGreaterThan(0);
    
    console.log(`‚úÖ –¢–µ—Å—Ç 16 –ø—Ä–æ–π–¥–µ–Ω: –ù–∞–π–¥–µ–Ω–æ ${approvedCount} —É—Å–ø–µ—à–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π`);
  });

  test('17. –î–æ–ª–∂–µ–Ω –ø–æ—Å—á–∏—Ç–∞—Ç—å –æ–±—â—É—é —Å—É–º–º—É —É—Å–ø–µ—à–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π', async () => {
    const approvedPayments = await prisma.payment.findMany({
      where: { status: 'APPROVED' }
    });

    const totalAmount = approvedPayments.reduce((sum, p) => 
      sum + parseFloat(p.amount), 0
    );

    expect(totalAmount).toBeGreaterThan(0);
    
    console.log(`‚úÖ –¢–µ—Å—Ç 17 –ø—Ä–æ–π–¥–µ–Ω: –û–±—â–∞—è —Å—É–º–º–∞ —É—Å–ø–µ—à–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π: ${totalAmount}‚ÇΩ`);
  });

  test('18. –î–æ–ª–∂–µ–Ω –Ω–∞–π—Ç–∏ –ø–ª–∞—Ç–µ–∂–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞', async () => {
    const yesterday = new Date(Date.now() - 24 * 60 * 60 * 1000);
    
    const recentPayments = await prisma.payment.findMany({
      where: {
        createdAt: {
          gte: yesterday
        }
      }
    });

    expect(recentPayments.length).toBeGreaterThan(0);
    
    console.log(`‚úÖ –¢–µ—Å—Ç 18 –ø—Ä–æ–π–¥–µ–Ω: –ù–∞–π–¥–µ–Ω–æ ${recentPayments.length} –ø–ª–∞—Ç–µ–∂–µ–π –∑–∞ 24—á`);
  });

  // ========================================
  // –†–ê–ó–î–ï–õ 7: MOCK TOCHKA SERVICE
  // ========================================

  test('19. Mock: –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ TochkaPaymentService', async () => {
    const tochkaService = new TochkaPaymentService();
    
    const result = await tochkaService.createPayment({
      amount: 1200,
      orderId: testOrder.id,
      userId: testUser.id,
      batchId: testBatch.id,
      marginPercent: 20,
      vatCode: 6,
      customerPhone: testUser.phone,
      items: [
        { productId: testProduct1.id, quantity: 1, price: 500, name: testProduct1.name, unit: testProduct1.unit },
        { productId: testProduct2.id, quantity: 1, price: 700, name: testProduct2.name, unit: testProduct2.unit }
      ]
    });

    expect(result.success).toBe(true);
    expect(result.paymentId).toBeDefined();
    expect(result.confirmationUrl).toBeDefined();
    expect(result.breakdown.goods).toBe(1200);
    expect(result.breakdown.service).toBe(240);
    expect(result.breakdown.total).toBe(1440);
    
    console.log('‚úÖ –¢–µ—Å—Ç 19 –ø—Ä–æ–π–¥–µ–Ω: Mock —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç');
  });

  test('20. Mock: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —á–µ—Ä–µ–∑ TochkaPaymentService', async () => {
    const tochkaService = new TochkaPaymentService();
    
    const status = await tochkaService.checkPaymentStatus('TEST_PAYMENT_123');

    expect(status.paymentId).toBe('TEST_PAYMENT_123');
    expect(status.status).toBe('APPROVED');
    expect(status.isPaid).toBe(true);
    expect(status.amount).toBe(1440);
    
    console.log('‚úÖ –¢–µ—Å—Ç 20 –ø—Ä–æ–π–¥–µ–Ω: Mock –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç');
  });

  // ========================================
  // –ò–¢–û–ì–û–í–ê–Ø –ü–†–û–í–ï–†–ö–ê
  // ========================================

  test('–ò–¢–û–ì: –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –ø–ª–∞—Ç–µ–∂–∞ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω', async () => {
    console.log('\nüèÜ –ò–¢–û–ì–û–í–ê–Ø –ü–†–û–í–ï–†–ö–ê PAYMENTS API');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã —Å–æ–∑–¥–∞–Ω—ã
    expect(testUser).toBeDefined();
    expect(testAddress).toBeDefined();
    expect(testCategory).toBeDefined();
    expect(testProduct1).toBeDefined();
    expect(testProduct2).toBeDefined();
    expect(testBatch).toBeDefined();
    expect(testOrder).toBeDefined();
    expect(testPayment).toBeDefined();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑–∏
    const payment = await prisma.payment.findUnique({
      where: { paymentId: 'TEST_PAYMENT_001' },
      include: {
        order: {
          include: {
            user: true,
            batch: true,
            orderItems: {
              include: {
                product: true
              }
            }
          }
        }
      }
    });

    expect(payment.order.user.id).toBe(testUser.id);
    expect(payment.order.batch.id).toBe(testBatch.id);
    expect(payment.order.orderItems.length).toBe(2);

    console.log('‚úÖ –í–°–ï –°–í–Ø–ó–ò –¶–ï–õ–´–ï');
    console.log('‚úÖ PAYMENTS API –ü–û–õ–ù–û–°–¢–¨–Æ –ü–†–û–¢–ï–°–¢–ò–†–û–í–ê–ù');
    console.log('üéâ 20 –¢–ï–°–¢–û–í –ü–†–û–ô–î–ï–ù–û –£–°–ü–ï–®–ù–û!');
  });
});
