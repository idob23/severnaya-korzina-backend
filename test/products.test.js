// __tests__/products.test.js
// –¢–µ—Å—Ç—ã –¥–ª—è Products API

const { PrismaClient } = require('@prisma/client');

// üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò
if (process.env.NODE_ENV !== 'test') {
  throw new Error('üö® –≠—Ç–æ—Ç —Ç–µ—Å—Ç –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –¢–û–õ–¨–ö–û —Å NODE_ENV=test');
}

const prisma = new PrismaClient();

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞
jest.setTimeout(30000);

describe('Products API Tests', () => {
  let testCategory;
  let testProduct1;
  let testProduct2;

  // –û—á–∏—Å—Ç–∫–∞ –ø–µ—Ä–µ–¥ –≤—Å–µ–º–∏ —Ç–µ—Å—Ç–∞–º–∏
  beforeAll(async () => {
    console.log('üßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Products...');

    // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    await prisma.orderItem.deleteMany({});
    await prisma.product.deleteMany({
      where: { name: { startsWith: '–¢–µ—Å—Ç' } }
    });
    await prisma.category.deleteMany({
      where: { name: { startsWith: '–¢–µ—Å—Ç' } }
    });

    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã');
  });

  // –û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
  afterAll(async () => {
    console.log('üßπ –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ products —Ç–µ—Å—Ç–æ–≤...');
    await prisma.orderItem.deleteMany({});
    await prisma.product.deleteMany({
      where: { name: { startsWith: '–¢–µ—Å—Ç' } }
    });
    await prisma.category.deleteMany({
      where: { name: { startsWith: '–¢–µ—Å—Ç' } }
    });
    await prisma.$disconnect();
    console.log('‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
  });

  // –¢–ï–°–¢ 1: –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  test('1. –î–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é', async () => {
    const category = await prisma.category.create({
      data: {
        name: '–¢–µ—Å—Ç–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è',
        description: '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
        isActive: true
      }
    });

    testCategory = category;

    expect(category).toBeDefined();
    expect(category.name).toBe('–¢–µ—Å—Ç–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è');
    expect(category.isActive).toBe(true);
    
    console.log(`‚úÖ –¢–µ—Å—Ç 1 –ø—Ä–æ–π–¥–µ–Ω: –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞ #${category.id}`);
  });

// –¢–ï–°–¢ 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  test('2. –î–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π', async () => {
    const categories = await prisma.category.findMany({
      where: { name: { startsWith: '–¢–µ—Å—Ç' } }
    });

    expect(categories.length).toBeGreaterThan(0);
    expect(categories[0].name).toContain('–¢–µ—Å—Ç');
    
    console.log(`‚úÖ –¢–µ—Å—Ç 2 –ø—Ä–æ–π–¥–µ–Ω: –ù–∞–π–¥–µ–Ω–æ ${categories.length} —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π`);
  });    

  // –¢–ï–°–¢ 3: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
  test('3. –î–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä', async () => {
    const product = await prisma.product.create({
      data: {
        categoryId: testCategory.id,
        name: '–¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä 1',
        description: '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ 1',
        price: 299.99,
        unit: '—à—Ç',
        maxQuantity: 100,
        isActive: true
      }
    });

    testProduct1 = product;

    expect(product).toBeDefined();
    expect(product.name).toBe('–¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä 1');
    expect(parseFloat(product.price)).toBe(299.99);
    expect(product.maxQuantity).toBe(100);
    
    console.log(`‚úÖ –¢–µ—Å—Ç 3 –ø—Ä–æ–π–¥–µ–Ω: –¢–æ–≤–∞—Ä —Å–æ–∑–¥–∞–Ω #${product.id}`);
  });

  // –¢–ï–°–¢ 4: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
  test('4. –î–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞—Ç—å —Ç–æ–≤–∞—Ä –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è maxQuantity', async () => {
    const product = await prisma.product.create({
      data: {
        categoryId: testCategory.id,
        name: '–¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä 2',
        price: 150.50,
        unit: '–∫–≥',
        maxQuantity: null, // –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        isActive: true
      }
    });

    testProduct2 = product;

    expect(product.maxQuantity).toBeNull();
    expect(parseFloat(product.price)).toBe(150.50);
    
    console.log(`‚úÖ –¢–µ—Å—Ç 4 –ø—Ä–æ–π–¥–µ–Ω: –¢–æ–≤–∞—Ä –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω #${product.id}`);
  });

  // –¢–ï–°–¢ 5: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  test('5. –î–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', async () => {
    const products = await prisma.product.findMany({
      where: {
        categoryId: testCategory.id
      }
    });

    expect(products.length).toBeGreaterThanOrEqual(2);
    expect(products[0].categoryId).toBe(testCategory.id);
    
    console.log(`‚úÖ –¢–µ—Å—Ç 5 –ø—Ä–æ–π–¥–µ–Ω: –ù–∞–π–¥–µ–Ω–æ ${products.length} —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏`);
  });

  // –¢–ï–°–¢ 6: –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
  test('6. –î–æ–ª–∂–µ–Ω –Ω–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é', async () => {
    const products = await prisma.product.findMany({
      where: {
        name: {
          contains: '–¢–µ—Å—Ç–æ–≤—ã–π',
          mode: 'insensitive'
        }
      }
    });

    expect(products.length).toBeGreaterThan(0);
    expect(products[0].name).toContain('–¢–µ—Å—Ç–æ–≤—ã–π');
    
    console.log(`‚úÖ –¢–µ—Å—Ç 6 –ø—Ä–æ–π–¥–µ–Ω: –ü–æ–∏—Å–∫ –Ω–∞—à–µ–ª ${products.length} —Ç–æ–≤–∞—Ä–æ–≤`);
  });

  // –¢–ï–°–¢ 7: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
  test('7. –î–æ–ª–∂–µ–Ω –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞', async () => {
    const newPrice = 350.00;
    const newQuantity = 75;

    const updated = await prisma.product.update({
      where: { id: testProduct1.id },
      data: {
        price: newPrice,
        maxQuantity: newQuantity
      }
    });

    expect(parseFloat(updated.price)).toBe(newPrice);
    expect(updated.maxQuantity).toBe(newQuantity);
    
    console.log(`‚úÖ –¢–µ—Å—Ç 7 –ø—Ä–æ–π–¥–µ–Ω: –¢–æ–≤–∞—Ä –æ–±–Ω–æ–≤–ª–µ–Ω (—Ü–µ–Ω–∞: ${newPrice}, –æ—Å—Ç–∞—Ç–æ–∫: ${newQuantity})`);
  });

  // –¢–ï–°–¢ 8: –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–∞ (–º—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ)
  test('8. –î–æ–ª–∂–µ–Ω –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä', async () => {
    const deactivated = await prisma.product.update({
      where: { id: testProduct1.id },
      data: { isActive: false }
    });

    expect(deactivated.isActive).toBe(false);
    
    console.log(`‚úÖ –¢–µ—Å—Ç 8 –ø—Ä–æ–π–¥–µ–Ω: –¢–æ–≤–∞—Ä –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω`);
  });

  // –¢–ï–°–¢ 9: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
  test('9. –î–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã', async () => {
    const activeProducts = await prisma.product.findMany({
      where: {
        categoryId: testCategory.id,
        isActive: true
      }
    });

    const inactiveProducts = await prisma.product.findMany({
      where: {
        categoryId: testCategory.id,
        isActive: false
      }
    });

    activeProducts.forEach(p => expect(p.isActive).toBe(true));
    inactiveProducts.forEach(p => expect(p.isActive).toBe(false));
    
    console.log(`‚úÖ –¢–µ—Å—Ç 9 –ø—Ä–æ–π–¥–µ–Ω: active: ${activeProducts.length}, inactive: ${inactiveProducts.length}`);
  });

  // –¢–ï–°–¢ 10: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ —Å –Ω–∏–∑–∫–∏–º –æ—Å—Ç–∞—Ç–∫–æ–º
  test('10. –î–æ–ª–∂–µ–Ω –Ω–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä—ã —Å –Ω–∏–∑–∫–∏–º –æ—Å—Ç–∞—Ç–∫–æ–º', async () => {
    // –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä —Å –Ω–∏–∑–∫–∏–º –æ—Å—Ç–∞—Ç–∫–æ–º
    const lowStockProduct = await prisma.product.create({
      data: {
        categoryId: testCategory.id,
        name: '–¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä (–Ω–∏–∑–∫–∏–π –æ—Å—Ç–∞—Ç–æ–∫)',
        price: 100,
        unit: '—à—Ç',
        maxQuantity: 3, // –ù–∏–∑–∫–∏–π –æ—Å—Ç–∞—Ç–æ–∫
        isActive: true
      }
    });

    const threshold = 5;
    const lowStockProducts = await prisma.product.findMany({
      where: {
        maxQuantity: {
          not: null,
          lte: threshold
        },
        isActive: true
      }
    });

    expect(lowStockProducts.length).toBeGreaterThan(0);
    expect(lowStockProducts.some(p => p.id === lowStockProduct.id)).toBe(true);
    
    console.log(`‚úÖ –¢–µ—Å—Ç 10 –ø—Ä–æ–π–¥–µ–Ω: –ù–∞–π–¥–µ–Ω–æ ${lowStockProducts.length} —Ç–æ–≤–∞—Ä–æ–≤ —Å –Ω–∏–∑–∫–∏–º –æ—Å—Ç–∞—Ç–∫–æ–º (<=${threshold})`);
  });

  // –¢–ï–°–¢ 11: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤
  test('11. –î–æ–ª–∂–µ–Ω —É–≤–µ–ª–∏—á–∏—Ç—å –æ—Å—Ç–∞—Ç–æ–∫ —Ç–æ–≤–∞—Ä–∞', async () => {
    const product = await prisma.product.findUnique({
      where: { id: testProduct2.id }
    });

    const currentQuantity = product.maxQuantity || 0;
    const addAmount = 50;

    const updated = await prisma.product.update({
      where: { id: testProduct2.id },
      data: {
        maxQuantity: currentQuantity + addAmount
      }
    });

    expect(updated.maxQuantity).toBe(currentQuantity + addAmount);
    
    console.log(`‚úÖ –¢–µ—Å—Ç 11 –ø—Ä–æ–π–¥–µ–Ω: –û—Å—Ç–∞—Ç–æ–∫ —É–≤–µ–ª–∏—á–µ–Ω –Ω–∞ ${addAmount} (${currentQuantity} ‚Üí ${updated.maxQuantity})`);
  });

  // –¢–ï–°–¢ 12: –£–º–µ–Ω—å—à–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤ (–ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ)
  test('12. –î–æ–ª–∂–µ–Ω —É–º–µ–Ω—å—à–∏—Ç—å –æ—Å—Ç–∞—Ç–æ–∫ —Ç–æ–≤–∞—Ä–∞ –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ', async () => {
    const product = await prisma.product.findUnique({
      where: { id: testProduct2.id }
    });

    const currentQuantity = product.maxQuantity;
    const soldAmount = 10;

    const updated = await prisma.product.update({
      where: { id: testProduct2.id },
      data: {
        maxQuantity: currentQuantity - soldAmount
      }
    });

    expect(updated.maxQuantity).toBe(currentQuantity - soldAmount);
    
    console.log(`‚úÖ –¢–µ—Å—Ç 12 –ø—Ä–æ–π–¥–µ–Ω: –û—Å—Ç–∞—Ç–æ–∫ —É–º–µ–Ω—å—à–µ–Ω –Ω–∞ ${soldAmount} (${currentQuantity} ‚Üí ${updated.maxQuantity})`);
  });

  // –¢–ï–°–¢ 13: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
  test('13. –î–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', async () => {
    const product = await prisma.product.findUnique({
      where: { id: testProduct1.id },
      include: {
        category: true
      }
    });

    expect(product).toBeDefined();
    expect(product.category).toBeDefined();
    expect(product.category.id).toBe(testCategory.id);
    expect(product.category.name).toBe('–¢–µ—Å—Ç–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è');
    
    console.log(`‚úÖ –¢–µ—Å—Ç 13 –ø—Ä–æ–π–¥–µ–Ω: –¢–æ–≤–∞—Ä –ø–æ–ª—É—á–µ–Ω —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π "${product.category.name}"`);
  });

  // –¢–ï–°–¢ 14: –ü–æ–¥—Å—á–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  test('14. –î–æ–ª–∂–µ–Ω –ø–æ–¥—Å—á–∏—Ç–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', async () => {
    const count = await prisma.product.count({
      where: {
        categoryId: testCategory.id,
        isActive: true
      }
    });

    expect(count).toBeGreaterThan(0);
    expect(typeof count).toBe('number');
    
    console.log(`‚úÖ –¢–µ—Å—Ç 14 –ø—Ä–æ–π–¥–µ–Ω: –í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${count} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤`);
  });

  // –¢–ï–°–¢ 15: –ú–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤
  test('15. –î–æ–ª–∂–µ–Ω –º–∞—Å—Å–æ–≤–æ –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–≤–∞—Ä—ã', async () => {
    // –ü–æ–≤—ã—à–∞–µ–º —Ü–µ–Ω—ã –Ω–∞ 10% –¥–ª—è –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const products = await prisma.product.findMany({
      where: { categoryId: testCategory.id }
    });

    for (const product of products) {
      await prisma.product.update({
        where: { id: product.id },
        data: {
          price: parseFloat(product.price) * 1.10
        }
      });
    }

    const updatedProducts = await prisma.product.findMany({
      where: { categoryId: testCategory.id }
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ü–µ–Ω—ã –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
    expect(updatedProducts.length).toBe(products.length);
    
    console.log(`‚úÖ –¢–µ—Å—Ç 15 –ø—Ä–æ–π–¥–µ–Ω: –û–±–Ω–æ–≤–ª–µ–Ω–æ ${updatedProducts.length} —Ç–æ–≤–∞—Ä–æ–≤`);
  });

  // –¢–ï–°–¢ 16: –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
  test('16. –î–æ–ª–∂–µ–Ω –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –ø–æ —Ü–µ–Ω–µ', async () => {
    const productsAsc = await prisma.product.findMany({
      where: { categoryId: testCategory.id },
      orderBy: { price: 'asc' }
    });

    const productsDesc = await prisma.product.findMany({
      where: { categoryId: testCategory.id },
      orderBy: { price: 'desc' }
    });

    expect(productsAsc.length).toBeGreaterThan(0);
    expect(productsDesc.length).toBeGreaterThan(0);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ asc –º–µ–Ω—å—à–µ –ø–µ—Ä–≤–æ–≥–æ –≤ desc
    if (productsAsc.length > 1) {
      expect(parseFloat(productsAsc[0].price)).toBeLessThanOrEqual(
        parseFloat(productsAsc[productsAsc.length - 1].price)
      );
    }
    
    console.log(`‚úÖ –¢–µ—Å—Ç 16 –ø—Ä–æ–π–¥–µ–Ω: –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç (asc: ${productsAsc.length}, desc: ${productsDesc.length})`);
  });

  // –¢–ï–°–¢ 17: –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
  test('17. –î–æ–ª–∂–µ–Ω —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä', async () => {
    const productToDelete = await prisma.product.create({
      data: {
        categoryId: testCategory.id,
        name: '–¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è',
        price: 50,
        unit: '—à—Ç',
        isActive: true
      }
    });

    await prisma.product.delete({
      where: { id: productToDelete.id }
    });

    const deleted = await prisma.product.findUnique({
      where: { id: productToDelete.id }
    });

    expect(deleted).toBeNull();
    
    console.log(`‚úÖ –¢–µ—Å—Ç 17 –ø—Ä–æ–π–¥–µ–Ω: –¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω #${productToDelete.id}`);
  });

  // –¢–ï–°–¢ 18: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  test('18. –î–æ–ª–∂–µ–Ω –æ–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é', async () => {
    const newDescription = '–û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏';

    const updated = await prisma.category.update({
      where: { id: testCategory.id },
      data: { description: newDescription }
    });

    expect(updated.description).toBe(newDescription);
    
    console.log(`‚úÖ –¢–µ—Å—Ç 18 –ø—Ä–æ–π–¥–µ–Ω: –ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞`);
  });

  // –¢–ï–°–¢ 19: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ç–æ–≤–∞—Ä–æ–≤
  test('19. –î–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –ø–æ–¥—Å—á–µ—Ç–æ–º —Ç–æ–≤–∞—Ä–æ–≤', async () => {
    const categories = await prisma.category.findMany({
      include: {
        _count: {
          select: { products: true }
        }
      }
    });

    const testCat = categories.find(c => c.id === testCategory.id);
    
    expect(testCat).toBeDefined();
    expect(testCat._count.products).toBeGreaterThan(0);
    
    console.log(`‚úÖ –¢–µ—Å—Ç 19 –ø—Ä–æ–π–¥–µ–Ω: –ö–∞—Ç–µ–≥–æ—Ä–∏—è –∏–º–µ–µ—Ç ${testCat._count.products} —Ç–æ–≤–∞—Ä–æ–≤`);
  });

  // –¢–ï–°–¢ 20: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø—Ä–∏ –∑–∞–∫–∞–∑–µ
  test('20. –î–æ–ª–∂–µ–Ω –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞', async () => {
    const product = await prisma.product.findUnique({
      where: { id: testProduct2.id }
    });

    const requestedQuantity = 5;
    const isAvailable = product.maxQuantity === null || 
                       product.maxQuantity >= requestedQuantity;

    expect(typeof isAvailable).toBe('boolean');
    
    if (product.maxQuantity !== null) {
      if (requestedQuantity > product.maxQuantity) {
        expect(isAvailable).toBe(false);
      } else {
        expect(isAvailable).toBe(true);
      }
    }
    
    console.log(`‚úÖ –¢–µ—Å—Ç 20 –ø—Ä–æ–π–¥–µ–Ω: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ (–∑–∞–ø—Ä–æ—à–µ–Ω–æ: ${requestedQuantity}, –¥–æ—Å—Ç—É–ø–Ω–æ: ${product.maxQuantity || '‚àû'})`);
  });
});
