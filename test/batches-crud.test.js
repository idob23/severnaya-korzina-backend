// test/batches-crud.test.js
// –¢–µ—Å—Ç—ã –¥–ª—è Batches CRUD API

const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

jest.setTimeout(30000);

describe('Batches CRUD API Tests', () => {
  
  let testBatch;
  let testCategory;
  let testProduct;

  // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  beforeAll(async () => {
    console.log('üßπ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Batches CRUD...');

    // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–∞—Ä—Ç–∏–∏
    await prisma.batch.deleteMany({
      where: { title: { startsWith: '–¢–µ—Å—Ç' } }
    });

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ —Ç–æ–≤–∞—Ä –¥–ª—è batch_items
    testCategory = await prisma.category.findFirst({
      where: { name: { startsWith: '–¢–µ—Å—Ç' } }
    });

    if (!testCategory) {
      testCategory = await prisma.category.create({
        data: {
          name: '–¢–µ—Å—Ç–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è –ø–∞—Ä—Ç–∏–π',
          isActive: true
        }
      });
    }

    testProduct = await prisma.product.create({
      data: {
        categoryId: testCategory.id,
        name: '–¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä –¥–ª—è –ø–∞—Ä—Ç–∏–π',
        price: 500,
        unit: '—à—Ç',
        isActive: true
      }
    });

    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã');
  });

  // –û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
  afterAll(async () => {
    console.log('üßπ –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ batches-crud —Ç–µ—Å—Ç–æ–≤...');
    await prisma.batchItem.deleteMany({
      where: { batchId: testBatch?.id }
    });
    await prisma.batch.deleteMany({
      where: { title: { startsWith: '–¢–µ—Å—Ç' } }
    });
    await prisma.product.delete({
      where: { id: testProduct.id }
    });
    await prisma.$disconnect();
    console.log('‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
  });

  // –¢–ï–°–¢ 1: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–∞—Ä—Ç–∏–∏
  test('1. –î–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ø–∞—Ä—Ç–∏—é', async () => {
    const batch = await prisma.batch.create({
      data: {
        title: '–¢–µ—Å—Ç–æ–≤–∞—è –ø–∞—Ä—Ç–∏—è 1',
        description: '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –ø–∞—Ä—Ç–∏–∏',
        status: 'active',
        targetAmount: 50000,
        currentAmount: 0,
        participantsCount: 0,
        progressPercent: 0,
        marginPercent: 20,
        startDate: new Date(),
        endDate: new Date(Date.now() + 14 * 24 * 60 * 60 * 1000) // +14 –¥–Ω–µ–π
      }
    });

    testBatch = batch;

    expect(batch).toBeDefined();
    expect(batch.title).toBe('–¢–µ—Å—Ç–æ–≤–∞—è –ø–∞—Ä—Ç–∏—è 1');
    expect(batch.status).toBe('active');
    expect(parseFloat(batch.targetAmount)).toBe(50000);
    expect(parseFloat(batch.marginPercent)).toBe(20);
    
    console.log(`‚úÖ –¢–µ—Å—Ç 1 –ø—Ä–æ–π–¥–µ–Ω: –ü–∞—Ä—Ç–∏—è —Å–æ–∑–¥–∞–Ω–∞ #${batch.id}`);
  });

  // –¢–ï–°–¢ 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä—Ç–∏–∏ –ø–æ ID
  test('2. –î–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å –ø–∞—Ä—Ç–∏—é –ø–æ ID', async () => {
    const batch = await prisma.batch.findUnique({
      where: { id: testBatch.id }
    });

    expect(batch).toBeDefined();
    expect(batch.id).toBe(testBatch.id);
    expect(batch.title).toBe('–¢–µ—Å—Ç–æ–≤–∞—è –ø–∞—Ä—Ç–∏—è 1');
    
    console.log(`‚úÖ –¢–µ—Å—Ç 2 –ø—Ä–æ–π–¥–µ–Ω: –ü–∞—Ä—Ç–∏—è –ø–æ–ª—É—á–µ–Ω–∞ #${batch.id}`);
  });

  // –¢–ï–°–¢ 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä—Ç–∏–π
  test('3. –î–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä—Ç–∏–π', async () => {
    const batches = await prisma.batch.findMany({
      where: {
        status: { in: ['active', 'collecting', 'ready'] }
      }
    });

    expect(batches.length).toBeGreaterThan(0);
    expect(batches.some(b => b.id === testBatch.id)).toBe(true);
    
    console.log(`‚úÖ –¢–µ—Å—Ç 3 –ø—Ä–æ–π–¥–µ–Ω: –ù–∞–π–¥–µ–Ω–æ ${batches.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä—Ç–∏–π`);
  });

  // –¢–ï–°–¢ 4: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∞—Ä—Ç–∏–∏
  test('4. –î–æ–ª–∂–µ–Ω –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞—Ä—Ç–∏–∏', async () => {
    const updated = await prisma.batch.update({
      where: { id: testBatch.id },
      data: {
        title: '–¢–µ—Å—Ç–æ–≤–∞—è –ø–∞—Ä—Ç–∏—è 1 (–æ–±–Ω–æ–≤–ª–µ–Ω–æ)',
        description: '–ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ',
        targetAmount: 75000
      }
    });

    expect(updated.title).toBe('–¢–µ—Å—Ç–æ–≤–∞—è –ø–∞—Ä—Ç–∏—è 1 (–æ–±–Ω–æ–≤–ª–µ–Ω–æ)');
    expect(parseFloat(updated.targetAmount)).toBe(75000);
    
    console.log('‚úÖ –¢–µ—Å—Ç 4 –ø—Ä–æ–π–¥–µ–Ω: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
  });

  // –¢–ï–°–¢ 5: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–∞—Ä—Ç–∏–∏
  test('5. –î–æ–ª–∂–µ–Ω –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–∞—Ä—Ç–∏–∏', async () => {
    const updated = await prisma.batch.update({
      where: { id: testBatch.id },
      data: {
        status: 'collecting'
      }
    });

    expect(updated.status).toBe('collecting');
    
    console.log('‚úÖ –¢–µ—Å—Ç 5 –ø—Ä–æ–π–¥–µ–Ω: –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω (active ‚Üí collecting)');
  });

  // –¢–ï–°–¢ 6: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–∞—Ä—Ç–∏–∏
  test('6. –î–æ–ª–∂–µ–Ω –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–∞—Ä—Ç–∏–∏', async () => {
    const updated = await prisma.batch.update({
      where: { id: testBatch.id },
      data: {
        currentAmount: 25000,
        participantsCount: 5,
        progressPercent: 33 // 25000/75000
      }
    });

    expect(parseFloat(updated.currentAmount)).toBe(25000);
    expect(updated.participantsCount).toBe(5);
    expect(updated.progressPercent).toBe(33);
    
    console.log('‚úÖ –¢–µ—Å—Ç 6 –ø—Ä–æ–π–¥–µ–Ω: –ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω (0% ‚Üí 33%)');
  });

  // –¢–ï–°–¢ 7: –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π —Å—É–º–º—ã
  test('7. –î–æ–ª–∂–µ–Ω –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ 100%', async () => {
    const updated = await prisma.batch.update({
      where: { id: testBatch.id },
      data: {
        currentAmount: 75000,
        participantsCount: 15,
        progressPercent: 100,
        status: 'ready'
      }
    });

    expect(parseFloat(updated.currentAmount)).toBe(75000);
    expect(updated.progressPercent).toBe(100);
    expect(updated.status).toBe('ready');
    
    console.log('‚úÖ –¢–µ—Å—Ç 7 –ø—Ä–æ–π–¥–µ–Ω: –ü–∞—Ä—Ç–∏—è –≥–æ—Ç–æ–≤–∞ –∫ –∑–∞–ø—É—Å–∫—É (100%)');
  });

// –¢–ï–°–¢ 8: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –ø–∞—Ä—Ç–∏—é
  test('8. –î–æ–ª–∂–µ–Ω –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –≤ –ø–∞—Ä—Ç–∏—é', async () => {
    const batchItem = await prisma.batchItem.create({
      data: {
        batchId: testBatch.id,
        productId: testProduct.id,
        price: 500,  // ‚Üê –ë–ï–ó quantity!
        discount: 0
      }
    });

    expect(batchItem).toBeDefined();
    expect(batchItem.batchId).toBe(testBatch.id);
    expect(parseFloat(batchItem.price)).toBe(500);
    
    console.log('‚úÖ –¢–µ—Å—Ç 8 –ø—Ä–æ–π–¥–µ–Ω: –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø–∞—Ä—Ç–∏—é');
  });

  // –¢–ï–°–¢ 9: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä—Ç–∏–∏ —Å —Ç–æ–≤–∞—Ä–∞–º–∏
  test('9. –î–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å –ø–∞—Ä—Ç–∏—é —Å —Ç–æ–≤–∞—Ä–∞–º–∏', async () => {
    const batch = await prisma.batch.findUnique({
      where: { id: testBatch.id },
      include: {
        batchItems: {
          include: {
            product: true
          }
        }
      }
    });

    expect(batch.batchItems.length).toBeGreaterThan(0);
    expect(batch.batchItems[0].product).toBeDefined();
    expect(batch.batchItems[0].product.name).toBe('–¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä –¥–ª—è –ø–∞—Ä—Ç–∏–π');
    
    console.log(`‚úÖ –¢–µ—Å—Ç 9 –ø—Ä–æ–π–¥–µ–Ω: –ü–∞—Ä—Ç–∏—è —Å ${batch.batchItems.length} —Ç–æ–≤–∞—Ä–∞–º–∏`);
  });

  // –¢–ï–°–¢ 10: –ò–∑–º–µ–Ω–µ–Ω–∏–µ –º–∞—Ä–∂–∏ –ø–∞—Ä—Ç–∏–∏
  test('10. –î–æ–ª–∂–µ–Ω –∏–∑–º–µ–Ω–∏—Ç—å –º–∞—Ä–∂—É –ø–∞—Ä—Ç–∏–∏', async () => {
    const updated = await prisma.batch.update({
      where: { id: testBatch.id },
      data: {
        marginPercent: 25
      }
    });

    expect(parseFloat(updated.marginPercent)).toBe(25);
    
    console.log('‚úÖ –¢–µ—Å—Ç 10 –ø—Ä–æ–π–¥–µ–Ω: –ú–∞—Ä–∂–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ (20% ‚Üí 25%)');
  });

  // –¢–ï–°–¢ 11: –ü–æ–¥—Å—á–µ—Ç –ø–∞—Ä—Ç–∏–π –ø–æ —Å—Ç–∞—Ç—É—Å—É
  test('11. –î–æ–ª–∂–µ–Ω –ø–æ–¥—Å—á–∏—Ç–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä—Ç–∏–π –ø–æ —Å—Ç–∞—Ç—É—Å—É', async () => {
    const activeCount = await prisma.batch.count({
      where: { status: 'active' }
    });

    const readyCount = await prisma.batch.count({
      where: { status: 'ready' }
    });

    expect(typeof activeCount).toBe('number');
    expect(typeof readyCount).toBe('number');
    
    console.log(`‚úÖ –¢–µ—Å—Ç 11 –ø—Ä–æ–π–¥–µ–Ω: active=${activeCount}, ready=${readyCount}`);
  });

  // –¢–ï–°–¢ 12: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–∞—Ä—Ç–∏–π –ø–æ –¥–∞—Ç–µ
  test('12. –î–æ–ª–∂–µ–Ω –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–∞—Ä—Ç–∏–∏ –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è', async () => {
    const today = new Date();
    today.setHours(0, 0, 0, 0);

    const batches = await prisma.batch.findMany({
      where: {
        createdAt: {
          gte: today
        }
      }
    });

    expect(Array.isArray(batches)).toBe(true);
    
    console.log(`‚úÖ –¢–µ—Å—Ç 12 –ø—Ä–æ–π–¥–µ–Ω: –ù–∞–π–¥–µ–Ω–æ ${batches.length} –ø–∞—Ä—Ç–∏–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è`);
  });

  // –¢–ï–°–¢ 13: –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–∞—Ä—Ç–∏–π
  test('13. –î–æ–ª–∂–µ–Ω –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä—Ç–∏–∏ –ø–æ –¥–∞—Ç–µ', async () => {
    const batchesDesc = await prisma.batch.findMany({
      where: { title: { startsWith: '–¢–µ—Å—Ç' } },
      orderBy: { createdAt: 'desc' },
      take: 5
    });

    const batchesAsc = await prisma.batch.findMany({
      where: { title: { startsWith: '–¢–µ—Å—Ç' } },
      orderBy: { createdAt: 'asc' },
      take: 5
    });

    expect(batchesDesc.length).toBeGreaterThan(0);
    expect(batchesAsc.length).toBeGreaterThan(0);
    
    console.log(`‚úÖ –¢–µ—Å—Ç 13 –ø—Ä–æ–π–¥–µ–Ω: –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç (desc=${batchesDesc.length}, asc=${batchesAsc.length})`);
  });

  // –¢–ï–°–¢ 14: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –¥–∞—Ç
  test('14. –î–æ–ª–∂–µ–Ω –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞—Ç', async () => {
    const batch = await prisma.batch.findUnique({
      where: { id: testBatch.id }
    });

    expect(batch.startDate).toBeInstanceOf(Date);
    expect(batch.endDate).toBeInstanceOf(Date);
    expect(batch.endDate.getTime()).toBeGreaterThan(batch.startDate.getTime());
    
    console.log('‚úÖ –¢–µ—Å—Ç 14 –ø—Ä–æ–π–¥–µ–Ω: –î–∞—Ç—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã');
  });

  // –¢–ï–°–¢ 15: –£–¥–∞–ª–µ–Ω–∏–µ –ø–∞—Ä—Ç–∏–∏
  test('15. –î–æ–ª–∂–µ–Ω —É–¥–∞–ª–∏—Ç—å –ø–∞—Ä—Ç–∏—é', async () => {
    // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ batch_items
    await prisma.batchItem.deleteMany({
      where: { batchId: testBatch.id }
    });

    // –ó–∞—Ç–µ–º —É–¥–∞–ª—è–µ–º –ø–∞—Ä—Ç–∏—é
    await prisma.batch.delete({
      where: { id: testBatch.id }
    });

    const deleted = await prisma.batch.findUnique({
      where: { id: testBatch.id }
    });

    expect(deleted).toBeNull();
    
    console.log(`‚úÖ –¢–µ—Å—Ç 15 –ø—Ä–æ–π–¥–µ–Ω: –ü–∞—Ä—Ç–∏—è #${testBatch.id} —É–¥–∞–ª–µ–Ω–∞`);
  });
});
