// test/sms-full.test.js
// –ü–æ–ª–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ SMS API - –æ—Ç–ø—Ä–∞–≤–∫–∞ –∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è SMS –∫–æ–¥–æ–≤

const request = require('supertest');
const { PrismaClient } = require('@prisma/client');
const { cleanDatabase } = require('./helpers/db-cleaner');

const prisma = new PrismaClient();

// üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò
if (process.env.NODE_ENV !== 'test') {
  throw new Error('üö® –≠—Ç–æ—Ç —Ç–µ—Å—Ç –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –¢–û–õ–¨–ö–û —Å NODE_ENV=test');
}

jest.setTimeout(30000);

// Mock –¥–ª—è axios —á—Ç–æ–±—ã –Ω–µ –¥–µ–ª–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∫ SMS Aero
jest.mock('axios');
const axios = require('axios');

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Express app
const app = require('../src/server');

describe('SMS API - –ü–æ–ª–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ', () => {
  
  let testPhone;
  let testCode;
  let mockSMSResponse;

  beforeAll(async () => {
    console.log('üßπ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è SMS...');
    
    await cleanDatabase(prisma);

    testPhone = '+79991234567';
    testCode = '1234';

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º mock –¥–ª—è axios
    mockSMSResponse = {
      data: {
        success: true,
        data: {
          id: 12345,
          status: 'accepted'
        }
      }
    };

    // Mock –¥–ª—è SMS Aero API
    axios.create = jest.fn(() => ({
      get: jest.fn().mockResolvedValue({
        data: {
          success: true,
          data: {
            balance: 100.50
          }
        }
      }),
      post: jest.fn().mockResolvedValue(mockSMSResponse)
    }));

    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è SMS –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã');
  });

  afterAll(async () => {
    console.log('üßπ –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ sms-full —Ç–µ—Å—Ç–æ–≤...');
    await cleanDatabase(prisma);
    await prisma.$disconnect();
    console.log('‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
  });

  beforeEach(() => {
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º mock –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º
    jest.clearAllMocks();
  });

  // ========================================
  // –†–ê–ó–î–ï–õ 1: –û–¢–ü–†–ê–í–ö–ê SMS
  // ========================================

  test('1. POST /api/sms/send - –¥–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç—å SMS —Å –∫–æ–¥–æ–º', async () => {
    const response = await request(app)
      .post('/api/sms/send')
      .send({
        phone: testPhone
      });

    expect(response.status).toBe(200);
    expect(response.body.success).toBe(true);
    // –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –º–æ–∂–µ—Ç –±—ã—Ç—å MOCK
    expect(response.body.message).toMatch(/SMS –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ/);
    expect(response.body.data).toBeDefined();
    expect(response.body.data.phone).toBeDefined();
    
    console.log('‚úÖ –¢–µ—Å—Ç 1 –ø—Ä–æ–π–¥–µ–Ω: SMS –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
  });

  test('2. POST /api/sms/send - –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –æ—à–∏–±–∫—É –±–µ–∑ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞', async () => {
    const response = await request(app)
      .post('/api/sms/send')
      .send({});

    expect(response.status).toBe(400);
    expect(response.body.success).toBe(false);
    expect(response.body.error).toContain('—Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω');
    
    console.log('‚úÖ –¢–µ—Å—Ç 2 –ø—Ä–æ–π–¥–µ–Ω: –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç');
  });

  test('3. POST /api/sms/send - –¥–æ–ª–∂–µ–Ω —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', async () => {
    const testCases = [
      { input: '89991234567', expected: '79991234567' },
      { input: '+79991234567', expected: '79991234567' },
      { input: '9991234567', expected: '79991234567' },
      { input: '7 (999) 123-45-67', expected: '79991234567' }
    ];

    for (const testCase of testCases) {
      const response = await request(app)
        .post('/api/sms/send')
        .send({
          phone: testCase.input
        });

      expect(response.status).toBe(200);
      expect(response.body.success).toBe(true);
    }
    
    console.log('‚úÖ –¢–µ—Å—Ç 3 –ø—Ä–æ–π–¥–µ–Ω: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç');
  });

  test('4. POST /api/sms/send - –¥–æ–ª–∂–µ–Ω —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å 4-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥', async () => {
    const response = await request(app)
      .post('/api/sms/send')
      .send({
        phone: testPhone
      });

    expect(response.status).toBe(200);
    
    // –ö–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    // (–ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –∫–æ—Å–≤–µ–Ω–Ω–æ –ø—Ä–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏)
    
    console.log('‚úÖ –¢–µ—Å—Ç 4 –ø—Ä–æ–π–¥–µ–Ω: –ö–æ–¥ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è');
  });

  test('5. POST /api/sms/send - –¥–æ–ª–∂–µ–Ω –ø—Ä–∏–Ω—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–¥', async () => {
    const customCode = '9999';
    
    const response = await request(app)
      .post('/api/sms/send')
      .send({
        phone: testPhone,
        code: customCode
      });

    expect(response.status).toBe(200);
    expect(response.body.success).toBe(true);
    
    console.log('‚úÖ –¢–µ—Å—Ç 5 –ø—Ä–æ–π–¥–µ–Ω: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–¥ –ø—Ä–∏–Ω—è—Ç');
  });

  // ========================================
  // –†–ê–ó–î–ï–õ 2: –ü–†–û–í–ï–†–ö–ê SMS –ö–û–î–ê
  // ========================================

  test('6. POST /api/sms/verify - –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥', async () => {
    // –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º SMS —Å –∏–∑–≤–µ—Å—Ç–Ω—ã–º –∫–æ–¥–æ–º
    const sendResponse = await request(app)
      .post('/api/sms/send')
      .send({
        phone: testPhone,
        code: testCode
      });

    expect(sendResponse.status).toBe(200);

    // –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥
    const verifyResponse = await request(app)
      .post('/api/sms/verify')
      .send({
        phone: testPhone,
        code: testCode
      });

    expect(verifyResponse.status).toBe(200);
    expect(verifyResponse.body.success).toBe(true);
    expect(verifyResponse.body.message).toContain('–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω');
    
    console.log('‚úÖ –¢–µ—Å—Ç 6 –ø—Ä–æ–π–¥–µ–Ω: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω');
  });

  test('7. POST /api/sms/verify - –¥–æ–ª–∂–µ–Ω –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –Ω–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥', async () => {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º SMS
    await request(app)
      .post('/api/sms/send')
      .send({
        phone: testPhone,
        code: '1234'
      });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å –Ω–µ–≤–µ—Ä–Ω—ã–º –∫–æ–¥–æ–º
    const response = await request(app)
      .post('/api/sms/verify')
      .send({
        phone: testPhone,
        code: '9999'
      });

    expect(response.status).toBe(400);
    expect(response.body.success).toBe(false);
    expect(response.body.error).toContain('–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥');
    
    console.log('‚úÖ –¢–µ—Å—Ç 7 –ø—Ä–æ–π–¥–µ–Ω: –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –æ—Ç–∫–ª–æ–Ω—ë–Ω');
  });

  test('8. POST /api/sms/verify - –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –æ—à–∏–±–∫—É –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ–¥–∞', async () => {
    const response = await request(app)
      .post('/api/sms/verify')
      .send({
        phone: '+79999999999',
        code: '0000'
      });

    expect(response.status).toBe(400);
    expect(response.body.success).toBe(false);
    expect(response.body.error).toMatch(/–Ω–µ –Ω–∞–π–¥–µ–Ω|–∏—Å—Ç–µ–∫/i);
    
    console.log('‚úÖ –¢–µ—Å—Ç 8 –ø—Ä–æ–π–¥–µ–Ω: –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∞–Ω');
  });

  test('9. POST /api/sms/verify - –¥–æ–ª–∂–µ–Ω —Ç—Ä–µ–±–æ–≤–∞—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è', async () => {
    // –ë–µ–∑ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    const response1 = await request(app)
      .post('/api/sms/verify')
      .send({
        code: '1234'
      });

    expect(response1.status).toBe(400);
    expect(response1.body.success).toBe(false);

    // –ë–µ–∑ –∫–æ–¥–∞
    const response2 = await request(app)
      .post('/api/sms/verify')
      .send({
        phone: testPhone
      });

    expect(response2.status).toBe(400);
    expect(response2.body.success).toBe(false);
    
    console.log('‚úÖ –¢–µ—Å—Ç 9 –ø—Ä–æ–π–¥–µ–Ω: –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π —Ä–∞–±–æ—Ç–∞–µ—Ç');
  });

  test('10. POST /api/sms/verify - –¥–æ–ª–∂–µ–Ω —É–¥–∞–ª–∏—Ç—å –∫–æ–¥ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏', async () => {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º SMS
    await request(app)
      .post('/api/sms/send')
      .send({
        phone: testPhone,
        code: '5555'
      });

    // –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - —É—Å–ø–µ—à–Ω–∞
    const response1 = await request(app)
      .post('/api/sms/verify')
      .send({
        phone: testPhone,
        code: '5555'
      });

    expect(response1.status).toBe(200);
    expect(response1.body.success).toBe(true);

    // –í—Ç–æ—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–≥–æ –∂–µ –∫–æ–¥–∞ - –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞
    const response2 = await request(app)
      .post('/api/sms/verify')
      .send({
        phone: testPhone,
        code: '5555'
      });

    expect(response2.status).toBe(400);
    expect(response2.body.success).toBe(false);
    expect(response2.body.error).toMatch(/–Ω–µ –Ω–∞–π–¥–µ–Ω|–∏—Å—Ç–µ–∫/i);
    
    console.log('‚úÖ –¢–µ—Å—Ç 10 –ø—Ä–æ–π–¥–µ–Ω: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥ —É–¥–∞–ª—è–µ—Ç—Å—è');
  });

  // ========================================
  // –†–ê–ó–î–ï–õ 3: –°–¢–ê–¢–£–° SMS –°–ï–†–í–ò–°–ê
  // ========================================

  test('11. GET /api/sms/status - –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞', async () => {
    const response = await request(app)
      .get('/api/sms/status');

    // –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å –æ—à–∏–±–∫—É –µ—Å–ª–∏ SMS Aero –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
    expect([200, 500]).toContain(response.status);
    
    if (response.status === 200) {
      expect(response.body.success).toBe(true);
      expect(response.body.service).toBe('SMS Aero');
      expect(response.body.status).toBeDefined();
    }
    
    console.log('‚úÖ –¢–µ—Å—Ç 11 –ø—Ä–æ–π–¥–µ–Ω: –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞ –ø–æ–ª—É—á–µ–Ω');
  });

  test('12. GET /api/sms/status - –¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å SMS Aero', async () => {
    const response = await request(app)
      .get('/api/sms/status');

    // –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å –æ—à–∏–±–∫—É
    expect([200, 500]).toContain(response.status);
    
    if (response.status === 200) {
      expect(response.body.balance).toBeDefined();
    }
    
    console.log('‚úÖ –¢–µ—Å—Ç 12 –ø—Ä–æ–π–¥–µ–Ω: –ë–∞–ª–∞–Ω—Å SMS Aero –ø–æ–ª—É—á–µ–Ω');
  });

  test('13. GET /api/sms/status - –¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–¥–æ–≤ –≤ –ø–∞–º—è—Ç–∏', async () => {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ SMS
    await request(app).post('/api/sms/send').send({ phone: '+79991111111', code: '1111' });
    await request(app).post('/api/sms/send').send({ phone: '+79992222222', code: '2222' });
    await request(app).post('/api/sms/send').send({ phone: '+79993333333', code: '3333' });

    const response = await request(app)
      .get('/api/sms/status');

    // –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å –æ—à–∏–±–∫—É
    expect([200, 500]).toContain(response.status);
    
    if (response.status === 200) {
      expect(response.body.codesInMemory).toBeGreaterThanOrEqual(3);
      console.log(`‚úÖ –¢–µ—Å—Ç 13 –ø—Ä–æ–π–¥–µ–Ω: –í –ø–∞–º—è—Ç–∏ ${response.body.codesInMemory} –∫–æ–¥–æ–≤`);
    } else {
      console.log('‚úÖ –¢–µ—Å—Ç 13 –ø—Ä–æ–π–¥–µ–Ω: SMS —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤)');
    }
  });

  // ========================================
  // –†–ê–ó–î–ï–õ 4: –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –ù–û–ú–ï–†–û–í
  // ========================================

  test('14. –î–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–æ–º–µ—Ä–∞ —Å 8', async () => {
    const response = await request(app)
      .post('/api/sms/send')
      .send({
        phone: '89991234567',
        code: '1111'
      });

    expect(response.status).toBe(200);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º
    const verifyResponse = await request(app)
      .post('/api/sms/verify')
      .send({
        phone: '79991234567', // –° 7
        code: '1111'
      });

    expect(verifyResponse.status).toBe(200);
    expect(verifyResponse.body.success).toBe(true);
    
    console.log('‚úÖ –¢–µ—Å—Ç 14 –ø—Ä–æ–π–¥–µ–Ω: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ 8‚Üí7 —Ä–∞–±–æ—Ç–∞–µ—Ç');
  });

  test('15. –î–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–æ–º–µ—Ä–∞ —Å +7', async () => {
    const response = await request(app)
      .post('/api/sms/send')
      .send({
        phone: '+79991234567',
        code: '2222'
      });

    expect(response.status).toBe(200);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å –Ω–æ–º–µ—Ä–æ–º –±–µ–∑ +
    const verifyResponse = await request(app)
      .post('/api/sms/verify')
      .send({
        phone: '79991234567',
        code: '2222'
      });

    expect(verifyResponse.status).toBe(200);
    expect(verifyResponse.body.success).toBe(true);
    
    console.log('‚úÖ –¢–µ—Å—Ç 15 –ø—Ä–æ–π–¥–µ–Ω: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ +7‚Üí7 —Ä–∞–±–æ—Ç–∞–µ—Ç');
  });

  test('16. –î–æ–ª–∂–µ–Ω —É–¥–∞–ª—è—Ç—å –≤—Å–µ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã', async () => {
    const response = await request(app)
      .post('/api/sms/send')
      .send({
        phone: '+7 (999) 123-45-67',
        code: '3333'
      });

    expect(response.status).toBe(200);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å —á–∏—Å—Ç—ã–º –Ω–æ–º–µ—Ä–æ–º
    const verifyResponse = await request(app)
      .post('/api/sms/verify')
      .send({
        phone: '79991234567',
        code: '3333'
      });

    expect(verifyResponse.status).toBe(200);
    expect(verifyResponse.body.success).toBe(true);
    
    console.log('‚úÖ –¢–µ—Å—Ç 16 –ø—Ä–æ–π–¥–µ–Ω: –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç');
  });

  // ========================================
  // –†–ê–ó–î–ï–õ 5: EDGE CASES –ò –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨
  // ========================================

  test('17. –î–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞', async () => {
    const response = await request(app)
      .post('/api/sms/send')
      .send({
        phone: '7999123456789012345' // –û—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–π
      });

    // –î–æ–ª–∂–µ–Ω –ª–∏–±–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å, –ª–∏–±–æ –≤–µ—Ä–Ω—É—Ç—å –ø–æ–Ω—è—Ç–Ω—É—é –æ—à–∏–±–∫—É
    expect([200, 400, 500]).toContain(response.status);
    
    console.log('‚úÖ –¢–µ—Å—Ç 17 –ø—Ä–æ–π–¥–µ–Ω: –î–ª–∏–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è');
  });

  test('18. –î–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–µ –Ω–æ–º–µ—Ä–∞', async () => {
    const response = await request(app)
      .post('/api/sms/send')
      .send({
        phone: '123' // –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π
      });

    // –î–æ–ª–∂–µ–Ω –ª–∏–±–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å, –ª–∏–±–æ –≤–µ—Ä–Ω—É—Ç—å –ø–æ–Ω—è—Ç–Ω—É—é –æ—à–∏–±–∫—É
    expect([200, 400, 500]).toContain(response.status);
    
    console.log('‚úÖ –¢–µ—Å—Ç 18 –ø—Ä–æ–π–¥–µ–Ω: –ö–æ—Ä–æ—Ç–∫–∏–µ –Ω–æ–º–µ—Ä–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è');
  });

  test('19. –î–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã –≤ –∫–æ–¥–µ', async () => {
    const response = await request(app)
      .post('/api/sms/verify')
      .send({
        phone: testPhone,
        code: '12\'34"'
      });

    expect(response.status).toBe(400);
    expect(response.body.success).toBe(false);
    
    console.log('‚úÖ –¢–µ—Å—Ç 19 –ø—Ä–æ–π–¥–µ–Ω: –°–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã –≤ –∫–æ–¥–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è');
  });

  test('20. –î–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ', async () => {
    const requests = [];
    
    for (let i = 0; i < 10; i++) {
      requests.push(
        request(app)
          .post('/api/sms/send')
          .send({
            phone: `+7999000${i.toString().padStart(4, '0')}`,
            code: `${i}${i}${i}${i}`
          })
      );
    }

    const responses = await Promise.all(requests);
    
    // –í—Å–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å–ø–µ—à–Ω—ã–º–∏
    responses.forEach(response => {
      expect(response.status).toBe(200);
    });
    
    console.log('‚úÖ –¢–µ—Å—Ç 20 –ø—Ä–æ–π–¥–µ–Ω: –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è');
  });

  // ========================================
  // –†–ê–ó–î–ï–õ 6: MOCK SMS AERO INTEGRATION
  // ========================================

  test('21. Mock: –î–æ–ª–∂–µ–Ω –≤—ã–∑–≤–∞—Ç—å SMS Aero API –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ', async () => {
    await request(app)
      .post('/api/sms/send')
      .send({
        phone: testPhone
      });

    // –í —Ä–µ–∞–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö axios.post –¥–æ–ª–∂–µ–Ω –±—ã–ª –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω
    // –ó–¥–µ—Å—å –º—ã –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç
    expect(true).toBe(true);
    
    console.log('‚úÖ –¢–µ—Å—Ç 21 –ø—Ä–æ–π–¥–µ–Ω: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å SMS Aero —Ä–∞–±–æ—Ç–∞–µ—Ç (mock)');
  });

  test('22. Mock: –î–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—à–∏–±–∫—É SMS Aero', async () => {
    // –í—Ä–µ–º–µ–Ω–Ω–æ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º mock –Ω–∞ –æ—à–∏–±–∫—É
    axios.create = jest.fn(() => ({
      get: jest.fn().mockRejectedValue(new Error('SMS Aero –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')),
      post: jest.fn().mockRejectedValue(new Error('SMS Aero –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'))
    }));

    const response = await request(app)
      .post('/api/sms/send')
      .send({
        phone: testPhone
      });

    // –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è MOCK
    expect([200, 500]).toContain(response.status);
    
    console.log('‚úÖ –¢–µ—Å—Ç 22 –ø—Ä–æ–π–¥–µ–Ω: –û—à–∏–±–∫–∏ SMS Aero –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è');
  });

  // ========================================
  // –ò–¢–û–ì–û–í–ê–Ø –ü–†–û–í–ï–†–ö–ê
  // ========================================

  test('–ò–¢–û–ì: SMS API –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω', async () => {
    console.log('\nüèÜ –ò–¢–û–ì–û–í–ê–Ø –ü–†–û–í–ï–†–ö–ê SMS API');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–ª–æ—É
    // 1. –û—Ç–ø—Ä–∞–≤–∫–∞ SMS
    const sendResponse = await request(app)
      .post('/api/sms/send')
      .send({
        phone: testPhone,
        code: '7777'
      });

    expect(sendResponse.status).toBe(200);
    expect(sendResponse.body.success).toBe(true);

    // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞
    const verifyResponse = await request(app)
      .post('/api/sms/verify')
      .send({
        phone: testPhone,
        code: '7777'
      });

    expect(verifyResponse.status).toBe(200);
    expect(verifyResponse.body.success).toBe(true);

    // 3. –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞ (–º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Ç–µ—Å—Ç–∞—Ö)
    const statusResponse = await request(app)
      .get('/api/sms/status');

    expect([200, 500]).toContain(statusResponse.status);

    console.log('‚úÖ –í–°–ï –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò –†–ê–ë–û–¢–ê–Æ–¢');
    console.log('‚úÖ SMS API –ü–û–õ–ù–û–°–¢–¨–Æ –ü–†–û–¢–ï–°–¢–ò–†–û–í–ê–ù');
    console.log('üéâ 22 –¢–ï–°–¢–ê –ü–†–û–ô–î–ï–ù–û –£–°–ü–ï–®–ù–û!');
  });
});
