// test/settings.test.js
// –¢–µ—Å—Ç—ã –¥–ª—è Settings API (—Å–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)

// üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò
if (process.env.NODE_ENV !== 'test') {
  throw new Error('üö® –≠—Ç–æ—Ç —Ç–µ—Å—Ç –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –¢–û–õ–¨–ö–û —Å NODE_ENV=test');
}

const { PrismaClient } = require('@prisma/client');
const { cleanDatabase } = require('./helpers/db-cleaner');

const prisma = new PrismaClient();
jest.setTimeout(30000);

describe('Settings API Tests', () => {
  
  let testSettings = [];

  // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  beforeAll(async () => {
    console.log('üßπ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Settings...');

    // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    await prisma.systemSettings.deleteMany({
      where: { key: { startsWith: 'test_' } }
    });

    // ‚úÖ –°–æ–∑–¥–∞—ë–º –±–∞–∑–æ–≤—ã–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    await prisma.systemSettings.upsert({
      where: { key: 'default_margin_percent' },
      update: {},
      create: { 
        key: 'default_margin_percent', 
        value: '20', 
        description: '–ú–∞—Ä–∂–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é' 
      }
    });
    
    await prisma.systemSettings.upsert({
      where: { key: 'vat_code' },
      update: {},
      create: { 
        key: 'vat_code', 
        value: '1', 
        description: '–ö–æ–¥ –ù–î–° –¥–ª—è —Ñ–∏—Å–∫–∞–ª–∏–∑–∞—Ü–∏–∏' 
      }
    });
    
    await prisma.systemSettings.upsert({
      where: { key: 'payment_mode' },
      update: {},
      create: { 
        key: 'payment_mode', 
        value: 'test', 
        description: '–†–µ–∂–∏–º –ø–ª–∞—Ç–µ–∂–µ–π' 
      }
    });

    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã');
  });

  // –û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
  afterAll(async () => {
    console.log('üßπ –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ settings —Ç–µ—Å—Ç–æ–≤...');
    await prisma.systemSettings.deleteMany({
      where: { key: { startsWith: 'test_' } }
    });
    await prisma.$disconnect();
    console.log('‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
  });

  // –¢–ï–°–¢ 1: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  test('1. –î–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É', async () => {
    const setting = await prisma.systemSettings.create({
      data: {
        key: 'test_margin',
        value: '25',
        description: '–¢–µ—Å—Ç–æ–≤–∞—è –º–∞—Ä–∂–∞'
      }
    });

    testSettings.push(setting);

    expect(setting).toBeDefined();
    expect(setting.key).toBe('test_margin');
    expect(setting.value).toBe('25');
    
    console.log(`‚úÖ –¢–µ—Å—Ç 1 –ø—Ä–æ–π–¥–µ–Ω: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ #${setting.id}`);
  });

  // –¢–ï–°–¢ 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ –∫–ª—é—á—É
  test('2. –î–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø–æ –∫–ª—é—á—É', async () => {
    const setting = await prisma.systemSettings.findUnique({
      where: { key: 'test_margin' }
    });

    expect(setting).toBeDefined();
    expect(setting.value).toBe('25');
    
    console.log('‚úÖ –¢–µ—Å—Ç 2 –ø—Ä–æ–π–¥–µ–Ω: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞ –ø–æ –∫–ª—é—á—É');
  });

  // –¢–ï–°–¢ 3: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  test('3. –î–æ–ª–∂–µ–Ω –æ–±–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', async () => {
    const updated = await prisma.systemSettings.update({
      where: { key: 'test_margin' },
      data: { value: '30' }
    });

    expect(updated.value).toBe('30');
    
    console.log('‚úÖ –¢–µ—Å—Ç 3 –ø—Ä–æ–π–¥–µ–Ω: –ó–Ω–∞—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ (25 ‚Üí 30)');
  });

  // –¢–ï–°–¢ 4: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
  test('4. –î–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', async () => {
    const settings = await prisma.systemSettings.findMany({
      orderBy: { key: 'asc' }
    });

    expect(settings.length).toBeGreaterThan(0);
    
    console.log(`‚úÖ –¢–µ—Å—Ç 4 –ø—Ä–æ–π–¥–µ–Ω: –ü–æ–ª—É—á–µ–Ω–æ ${settings.length} –Ω–∞—Å—Ç—Ä–æ–µ–∫`);
  });

  // –¢–ï–°–¢ 5: –£–¥–∞–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  test('5. –î–æ–ª–∂–µ–Ω —É–¥–∞–ª–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É', async () => {
    await prisma.systemSettings.delete({
      where: { key: 'test_margin' }
    });

    const deleted = await prisma.systemSettings.findUnique({
      where: { key: 'test_margin' }
    });

    expect(deleted).toBeNull();
    
    console.log('‚úÖ –¢–µ—Å—Ç 5 –ø—Ä–æ–π–¥–µ–Ω: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–¥–∞–ª–µ–Ω–∞');
  });

  // –¢–ï–°–¢ 6: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å –ø—É—Å—Ç—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
  test('6. –î–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Å –ø—É—Å—Ç—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º', async () => {
    const setting = await prisma.systemSettings.create({
      data: {
        key: 'test_empty',
        value: '',
        description: '–ü—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ'
      }
    });

    testSettings.push(setting);

    expect(setting.value).toBe('');
    
    console.log('‚úÖ –¢–µ—Å—Ç 6 –ø—Ä–æ–π–¥–µ–Ω: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å –ø—É—Å—Ç—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º —Å–æ–∑–¥–∞–Ω–∞');
  });

  // –¢–ï–°–¢ 7: –ü–æ–∏—Å–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ –ø—Ä–µ—Ñ–∏–∫—Å—É
  test('7. –î–æ–ª–∂–µ–Ω –Ω–∞–π—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ –ø—Ä–µ—Ñ–∏–∫—Å—É "test_"', async () => {
    const settings = await prisma.systemSettings.findMany({
      where: {
        key: {
          startsWith: 'test_'
        }
      }
    });

    expect(settings.length).toBeGreaterThan(0);
    
    console.log(`‚úÖ –¢–µ—Å—Ç 7 –ø—Ä–æ–π–¥–µ–Ω: –ù–∞–π–¥–µ–Ω–æ ${settings.length} —Ç–µ—Å—Ç–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫`);
  });

  // –¢–ï–°–¢ 8: Upsert - —Å–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
  test('8. –î–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É (upsert)', async () => {
    const setting = await prisma.systemSettings.upsert({
      where: { key: 'test_upsert' },
      update: { value: 'updated' },
      create: {
        key: 'test_upsert',
        value: 'created',
        description: '–¢–µ—Å—Ç upsert'
      }
    });

    testSettings.push(setting);

    expect(setting.value).toBe('created');
    
    // –ü–æ–≤—Ç–æ—Ä–Ω—ã–π upsert –¥–æ–ª–∂–µ–Ω –æ–±–Ω–æ–≤–∏—Ç—å
    const updated = await prisma.systemSettings.upsert({
      where: { key: 'test_upsert' },
      update: { value: 'updated' },
      create: {
        key: 'test_upsert',
        value: 'created',
        description: '–¢–µ—Å—Ç upsert'
      }
    });

    expect(updated.value).toBe('updated');
    
    console.log('‚úÖ –¢–µ—Å—Ç 8 –ø—Ä–æ–π–¥–µ–Ω: Upsert —Ä–∞–±–æ—Ç–∞–µ—Ç (—Å–æ–∑–¥–∞–Ω–∏–µ ‚Üí –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ)');
  });

  // –¢–ï–°–¢ 9: –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –∫–ª—é—á–∞
  test('9. –î–æ–ª–∂–µ–Ω –≤—ã–¥–∞—Ç—å –æ—à–∏–±–∫—É –ø—Ä–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–ª—é—á–∞', async () => {
    await prisma.systemSettings.create({
      data: {
        key: 'test_unique',
        value: 'value1',
        description: '–¢–µ—Å—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏'
      }
    });

    testSettings.push({ key: 'test_unique' });

    await expect(
      prisma.systemSettings.create({
        data: {
          key: 'test_unique',
          value: 'value2',
          description: '–î—É–±–ª–∏–∫–∞—Ç'
        }
      })
    ).rejects.toThrow();
    
    console.log('‚úÖ –¢–µ—Å—Ç 9 –ø—Ä–æ–π–¥–µ–Ω: –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ');
  });

  // –¢–ï–°–¢ 10: –ú–∞—Å—Å–æ–≤–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  test('10. –î–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å—Ä–∞–∑—É', async () => {
    const created = await prisma.systemSettings.createMany({
      data: [
        { key: 'test_batch1', value: 'val1', description: 'Batch 1' },
        { key: 'test_batch2', value: 'val2', description: 'Batch 2' },
        { key: 'test_batch3', value: 'val3', description: 'Batch 3' }
      ]
    });

    expect(created.count).toBe(3);
    
    console.log(`‚úÖ –¢–µ—Å—Ç 10 –ø—Ä–æ–π–¥–µ–Ω: –°–æ–∑–¥–∞–Ω–æ ${created.count} –Ω–∞—Å—Ç—Ä–æ–µ–∫`);
  });

  // –¢–ï–°–¢ 11: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
  test('11. –î–æ–ª–∂–µ–Ω –æ–±–Ω–æ–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫', async () => {
    const updated = await prisma.systemSettings.updateMany({
      where: {
        key: {
          startsWith: 'test_batch'
        }
      },
      data: {
        value: 'updated_value'
      }
    });

    expect(updated.count).toBe(3);
    
    console.log(`‚úÖ –¢–µ—Å—Ç 11 –ø—Ä–æ–π–¥–µ–Ω: –û–±–Ω–æ–≤–ª–µ–Ω–æ ${updated.count} –Ω–∞—Å—Ç—Ä–æ–µ–∫`);
  });

  // –¢–ï–°–¢ 12: –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
  test('12. –î–æ–ª–∂–µ–Ω —É–¥–∞–ª–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫', async () => {
    const deleted = await prisma.systemSettings.deleteMany({
      where: {
        key: {
          startsWith: 'test_batch'
        }
      }
    });

    expect(deleted.count).toBe(3);
    
    console.log(`‚úÖ –¢–µ—Å—Ç 12 –ø—Ä–æ–π–¥–µ–Ω: –£–¥–∞–ª–µ–Ω–æ ${deleted.count} –Ω–∞—Å—Ç—Ä–æ–µ–∫`);
  });

  // –¢–ï–°–¢ 13: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  test('13. –î–æ–ª–∂–µ–Ω –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', async () => {
    const exists = await prisma.systemSettings.findUnique({
      where: { key: 'default_margin_percent' }
    });

    expect(exists).not.toBeNull();
    
    console.log('‚úÖ –¢–µ—Å—Ç 13 –ø—Ä–æ–π–¥–µ–Ω: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ default_margin_percent —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
  });

  // –¢–ï–°–¢ 14: –ü–æ–¥—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  test('14. –î–æ–ª–∂–µ–Ω –ø–æ–¥—Å—á–∏—Ç–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫', async () => {
    const count = await prisma.systemSettings.count();

    expect(count).toBeGreaterThan(0);
    expect(typeof count).toBe('number');
    
    console.log(`‚úÖ –¢–µ—Å—Ç 14 –ø—Ä–æ–π–¥–µ–Ω: –í—Å–µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ —Å–∏—Å—Ç–µ–º–µ = ${count}`);
  });

  // –¢–ï–°–¢ 15: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é
  test('15. –î–æ–ª–∂–µ–Ω –Ω–∞–π—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é', async () => {
    const settings = await prisma.systemSettings.findMany({
      where: {
        description: {
          contains: '–ù–î–°',
          mode: 'insensitive'
        }
      }
    });

    expect(settings.length).toBeGreaterThan(0);
    
    console.log(`‚úÖ –¢–µ—Å—Ç 15 –ø—Ä–æ–π–¥–µ–Ω: –ù–∞–π–¥–µ–Ω–æ ${settings.length} –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º "–ù–î–°"`);
  });
});
