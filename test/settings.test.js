// test/settings.test.js
// –¢–µ—Å—Ç—ã –¥–ª—è Settings API (—Å–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)
const { PrismaClient } = require('@prisma/client');
const { cleanDatabase } = require('./helpers/db-cleaner');

// üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò
if (process.env.NODE_ENV !== 'test') {
  throw new Error('üö® –≠—Ç–æ—Ç —Ç–µ—Å—Ç –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –¢–û–õ–¨–ö–û —Å NODE_ENV=test');
}
const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();
jest.setTimeout(30000);

describe('Settings API Tests', () => {
  
  let testSettings = [];

  // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  beforeAll(async () => {
    console.log('üßπ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Settings...');

    // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    await prisma.systemSettings.deleteMany({
      where: { key: { startsWith: 'test_' } }
    });

    // ‚úÖ –î–û–ë–ê–í–¨ –≠–¢–ò –°–¢–†–û–ö–ò - —Å–æ–∑–¥–∞—ë–º –±–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
  await prisma.systemSettings.upsert({
    where: { key: 'default_margin_percent' },
    update: {},
    create: { key: 'default_margin_percent', value: '20', description: '–ú–∞—Ä–∂–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é' }
  });
  
  await prisma.systemSettings.upsert({
    where: { key: 'vat_code' },
    update: {},
    create: { key: 'vat_code', value: '1', description: '–ö–æ–¥ –ù–î–° –¥–ª—è —Ñ–∏—Å–∫–∞–ª–∏–∑–∞—Ü–∏–∏' }
  });
  
  await prisma.systemSettings.upsert({
    where: { key: 'payment_mode' },
    update: {},
    create: { key: 'payment_mode', value: 'test', description: '–†–µ–∂–∏–º –ø–ª–∞—Ç–µ–∂–µ–π' }
  });


    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã');
  });

  // –û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
  afterAll(async () => {
    console.log('üßπ –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ settings —Ç–µ—Å—Ç–æ–≤...');
    await prisma.systemSettings.deleteMany({
      where: { key: { startsWith: 'test_' } }
    });
    await prisma.$disconnect();
    console.log('‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
  });

  // –¢–ï–°–¢ 1: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  test('1. –î–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É', async () => {
    const setting = await prisma.systemSettings.create({
      data: {
        key: 'test_margin',
        value: '25',
        description: '–¢–µ—Å—Ç–æ–≤–∞—è –º–∞—Ä–∂–∞'
      }
    });

    testSettings.push(setting);

    expect(setting).toBeDefined();
    expect(setting.key).toBe('test_margin');
    expect(setting.value).toBe('25');
    
    console.log(`‚úÖ –¢–µ—Å—Ç 1 –ø—Ä–æ–π–¥–µ–Ω: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ #${setting.id}`);
  });

  // –¢–ï–°–¢ 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ –∫–ª—é—á—É
  test('2. –î–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø–æ –∫–ª—é—á—É', async () => {
    const setting = await prisma.systemSettings.findUnique({
      where: { key: 'test_margin' }
    });

    expect(setting).toBeDefined();
    expect(setting.value).toBe('25');
    
    console.log('‚úÖ –¢–µ—Å—Ç 2 –ø—Ä–æ–π–¥–µ–Ω: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞ –ø–æ –∫–ª—é—á—É');
  });

  // –¢–ï–°–¢ 3: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  test('3. –î–æ–ª–∂–µ–Ω –æ–±–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', async () => {
    const updated = await prisma.systemSettings.update({
      where: { key: 'test_margin' },
      data: {
        value: '30',
        updatedAt: new Date()
      }
    });

    expect(updated.value).toBe('30');
    expect(updated.key).toBe('test_margin');
    
    console.log('‚úÖ –¢–µ—Å—Ç 3 –ø—Ä–æ–π–¥–µ–Ω: –ó–Ω–∞—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ (25 ‚Üí 30)');
  });

  // –¢–ï–°–¢ 4: Upsert - —Å–æ–∑–¥–∞–Ω–∏–µ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  test('4. –î–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É —á–µ—Ä–µ–∑ upsert –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç', async () => {
    const setting = await prisma.systemSettings.upsert({
      where: { key: 'test_vat_code' },
      update: { value: '6' },
      create: {
        key: 'test_vat_code',
        value: '6',
        description: '–¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–¥ –ù–î–°'
      }
    });

    testSettings.push(setting);

    expect(setting.key).toBe('test_vat_code');
    expect(setting.value).toBe('6');
    
    console.log(`‚úÖ –¢–µ—Å—Ç 4 –ø—Ä–æ–π–¥–µ–Ω: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —á–µ—Ä–µ–∑ upsert #${setting.id}`);
  });

  // –¢–ï–°–¢ 5: Upsert - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  test('5. –î–æ–ª–∂–µ–Ω –æ–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É —á–µ—Ä–µ–∑ upsert –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç', async () => {
    const setting = await prisma.systemSettings.upsert({
      where: { key: 'test_vat_code' },
      update: {
        value: '1',
        updatedAt: new Date()
      },
      create: {
        key: 'test_vat_code',
        value: '1',
        description: '–¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–¥ –ù–î–°'
      }
    });

    expect(setting.key).toBe('test_vat_code');
    expect(setting.value).toBe('1'); // –î–æ–ª–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å—Å—è —Å '6' –Ω–∞ '1'
    
    console.log('‚úÖ –¢–µ—Å—Ç 5 –ø—Ä–æ–π–¥–µ–Ω: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ upsert (6 ‚Üí 1)');
  });

  // –¢–ï–°–¢ 6: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
  test('6. –î–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', async () => {
    const settings = await prisma.systemSettings.findMany({
      where: { key: { startsWith: 'test_' } }
    });

    expect(settings.length).toBeGreaterThanOrEqual(2);
    expect(settings.some(s => s.key === 'test_margin')).toBe(true);
    expect(settings.some(s => s.key === 'test_vat_code')).toBe(true);
    
    console.log(`‚úÖ –¢–µ—Å—Ç 6 –ø—Ä–æ–π–¥–µ–Ω: –ù–∞–π–¥–µ–Ω–æ ${settings.length} —Ç–µ—Å—Ç–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫`);
  });

  // –¢–ï–°–¢ 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –∫–ª—é—á–∞
  test('7. –ù–µ –¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', async () => {
    let error;
    try {
      await prisma.systemSettings.create({
        data: {
          key: 'test_margin', // –£–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
          value: '50',
          description: '–î—É–±–ª–∏–∫–∞—Ç'
        }
      });
    } catch (e) {
      error = e;
    }

    expect(error).toBeDefined();
    expect(error.code).toBe('P2002'); // Prisma –∫–æ–¥ –¥–ª—è unique constraint
    
    console.log('‚úÖ –¢–µ—Å—Ç 7 –ø—Ä–æ–π–¥–µ–Ω: –î—É–±–ª–∏–∫–∞—Ç –∫–ª—é—á–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω');
  });

 // –¢–ï–°–¢ 8: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ (–º–∞—Ä–∂–∞) - –° UPSERT
  test('8. –î–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É –º–∞—Ä–∂–∏', async () => {
    // UPSERT - —Å–æ–∑–¥–∞—Å—Ç –µ—Å–ª–∏ –Ω–µ—Ç, –≤–µ—Ä–Ω–µ—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
    const marginSetting = await prisma.systemSettings.upsert({
      where: { key: 'default_margin_percent' },
      update: {}, // –ù–∏—á–µ–≥–æ –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º, –ø—Ä–æ—Å—Ç–æ –ø–æ–ª—É—á–∞–µ–º
      create: {
        key: 'default_margin_percent',
        value: '50',
        description: '–ú–∞—Ä–∂–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Ç–µ—Å—Ç–æ–≤ (%)'
      }
    });

    expect(marginSetting).toBeDefined();
    expect(parseFloat(marginSetting.value)).toBeGreaterThan(0);
    expect(parseFloat(marginSetting.value)).toBeLessThanOrEqual(100);
    
    console.log(`‚úÖ –¢–µ—Å—Ç 8 –ø—Ä–æ–π–¥–µ–Ω: –ú–∞—Ä–∂–∞ = ${marginSetting.value}%`);
  });

  // –¢–ï–°–¢ 9: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ (–ù–î–°) - –° UPSERT
  test('9. –î–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ù–î–°', async () => {
    // UPSERT - —Å–æ–∑–¥–∞—Å—Ç –µ—Å–ª–∏ –Ω–µ—Ç, –≤–µ—Ä–Ω–µ—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
    const vatSetting = await prisma.systemSettings.upsert({
      where: { key: 'vat_code' },
      update: {}, // –ù–∏—á–µ–≥–æ –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º, –ø—Ä–æ—Å—Ç–æ –ø–æ–ª—É—á–∞–µ–º
      create: {
        key: 'vat_code',
        value: '6',
        description: '–ö–æ–¥ –ù–î–° –¥–ª—è —Ç–µ—Å—Ç–æ–≤: 6=–±–µ–∑ –ù–î–° (–£–°–ù)'
      }
    });

    expect(vatSetting).toBeDefined();
    const validVatCodes = ['1', '2', '3', '4', '5', '6'];
    expect(validVatCodes).toContain(vatSetting.value);
    
    console.log(`‚úÖ –¢–µ—Å—Ç 9 –ø—Ä–æ–π–¥–µ–Ω: –ù–î–° –∫–æ–¥ = ${vatSetting.value}`);
  });

  // –¢–ï–°–¢ 10: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ (—Ä–µ–∂–∏–º –ø–ª–∞—Ç–µ–∂–µ–π) - –° UPSERT
  test('10. –î–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∂–∏–º –ø–ª–∞—Ç–µ–∂–µ–π', async () => {
    // UPSERT - —Å–æ–∑–¥–∞—Å—Ç –µ—Å–ª–∏ –Ω–µ—Ç, –≤–µ—Ä–Ω–µ—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
    const paymentMode = await prisma.systemSettings.upsert({
      where: { key: 'payment_mode' },
      update: {}, // –ù–∏—á–µ–≥–æ –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º, –ø—Ä–æ—Å—Ç–æ –ø–æ–ª—É—á–∞–µ–º
      create: {
        key: 'payment_mode',
        value: 'test',
        description: '–†–µ–∂–∏–º –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è —Ç–µ—Å—Ç–æ–≤: test –∏–ª–∏ production'
      }
    });

    expect(paymentMode).toBeDefined();
    expect(['test', 'production']).toContain(paymentMode.value);
    
    console.log(`‚úÖ –¢–µ—Å—Ç 10 –ø—Ä–æ–π–¥–µ–Ω: –†–µ–∂–∏–º –ø–ª–∞—Ç–µ–∂–µ–π = ${paymentMode.value}`);
  });

  // –¢–ï–°–¢ 11: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ checkout_enabled - –° UPSERT
  test('11. –î–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å —Å—Ç–∞—Ç—É—Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤', async () => {
    // UPSERT - —Å–æ–∑–¥–∞—Å—Ç –µ—Å–ª–∏ –Ω–µ—Ç, –≤–µ—Ä–Ω–µ—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
    const checkoutSetting = await prisma.systemSettings.upsert({
      where: { key: 'checkout_enabled' },
      update: {}, // –ù–∏—á–µ–≥–æ –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º, –ø—Ä–æ—Å—Ç–æ –ø–æ–ª—É—á–∞–µ–º
      create: {
        key: 'checkout_enabled',
        value: 'true',
        description: '–†–∞–∑—Ä–µ—à–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –æ—Ñ–æ—Ä–º–ª—è—Ç—å –∑–∞–∫–∞–∑—ã'
      }
    });

    expect(checkoutSetting).toBeDefined();
    expect(['true', 'false']).toContain(checkoutSetting.value);
    
    console.log(`‚úÖ –¢–µ—Å—Ç 11 –ø—Ä–æ–π–¥–µ–Ω: –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ = ${checkoutSetting.value}`);
  });

  // –¢–ï–°–¢ 12: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∂–∏–º–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
  test('12. –î–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ä–µ–∂–∏–º–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è', async () => {
    const maintenanceMode = await prisma.systemSettings.findUnique({
      where: { key: 'maintenance_mode' }
    });

    if (maintenanceMode) {
      expect(['true', 'false']).toContain(maintenanceMode.value);
      console.log(`‚úÖ –¢–µ—Å—Ç 12 –ø—Ä–æ–π–¥–µ–Ω: –†–µ–∂–∏–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è = ${maintenanceMode.value}`);
    } else {
      console.log('‚úÖ –¢–µ—Å—Ç 12 –ø—Ä–æ–π–¥–µ–Ω: –†–µ–∂–∏–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é false)');
    }
  });

  // –¢–ï–°–¢ 13: –£–¥–∞–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  test('13. –î–æ–ª–∂–µ–Ω —É–¥–∞–ª–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É', async () => {
    await prisma.systemSettings.delete({
      where: { key: 'test_vat_code' }
    });

    const deleted = await prisma.systemSettings.findUnique({
      where: { key: 'test_vat_code' }
    });

    expect(deleted).toBeNull();
    
    console.log('‚úÖ –¢–µ—Å—Ç 13 –ø—Ä–æ–π–¥–µ–Ω: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ test_vat_code —É–¥–∞–ª–µ–Ω–∞');
  });

  // –¢–ï–°–¢ 14: –ü–æ–¥—Å—á–µ—Ç –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
  test('14. –î–æ–ª–∂–µ–Ω –ø–æ–¥—Å—á–∏—Ç–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫', async () => {
    const count = await prisma.systemSettings.count();

    expect(count).toBeGreaterThan(0);
    expect(typeof count).toBe('number');
    
    console.log(`‚úÖ –¢–µ—Å—Ç 14 –ø—Ä–æ–π–¥–µ–Ω: –í—Å–µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ —Å–∏—Å—Ç–µ–º–µ = ${count}`);
  });

  // –¢–ï–°–¢ 15: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é
  test('15. –î–æ–ª–∂–µ–Ω –Ω–∞–π—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é', async () => {
    const settings = await prisma.systemSettings.findMany({
      where: {
        description: {
          contains: '–ù–î–°',
          mode: 'insensitive'
        }
      }
    });

    expect(settings.length).toBeGreaterThan(0);
    
    console.log(`‚úÖ –¢–µ—Å—Ç 15 –ø—Ä–æ–π–¥–µ–Ω: –ù–∞–π–¥–µ–Ω–æ ${settings.length} –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º "–ù–î–°"`);
  });
});
