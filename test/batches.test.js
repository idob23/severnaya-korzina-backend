// test/batches.test.js - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
const { PrismaClient } = require('@prisma/client');
const { updateBatchStatistics } = require('../src/utils/batchCalculations');
const prisma = new PrismaClient();

jest.setTimeout(30000);

describe('Batches - –†–∞—Å—á—ë—Ç—ã –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', () => {
  
  let testBatch;
  let testUsers = [];
  let testAddresses = []; // ‚Üê –î–û–ë–ê–í–ò–õ–ò
  let testOrders = [];

  beforeAll(async () => {
    console.log('üßπ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Batches...');

    // –°–æ–∑–¥–∞—ë–º –ø–∞—Ä—Ç–∏—é
    testBatch = await prisma.batch.create({
      data: {
        title: 'TEST –ü–∞—Ä—Ç–∏—è',
        status: 'collecting',
        targetAmount: 10000,
        currentAmount: 0,
        participantsCount: 0,
        progressPercent: 0,
        marginPercent: 20,
        startDate: new Date(),
        endDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000)
      }
    });
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è –ø–∞—Ä—Ç–∏—è: ${testBatch.id}`);

    // –°–æ–∑–¥–∞—ë–º 3 —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    for (let i = 1; i <= 3; i++) {
      const user = await prisma.user.upsert({
        where: { phone: `7999999999${i}` },
        update: {},
        create: {
          phone: `7999999999${i}`,
          firstName: `TestUser${i}`,
          isActive: true
        }
      });
      testUsers.push(user);

      // ‚úÖ –°–û–ó–î–ê–ï–ú –ê–î–†–ï–° –î–õ–Ø –ö–ê–ñ–î–û–ì–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
      const address = await prisma.address.create({
        data: {
          userId: user.id,
          title: `–ê–¥—Ä–µ—Å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${i}`,
          address: `—É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, –¥. ${i}`,
          isDefault: true
        }
      });
      testAddresses.push(address);
      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ –∞–¥—Ä–µ—Å #${i}`);
    }
  });

  afterAll(async () => {
    console.log('üßπ –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ batches —Ç–µ—Å—Ç–æ–≤...');
    // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    await prisma.order.deleteMany({ where: { batchId: testBatch.id } });
    await prisma.batch.delete({ where: { id: testBatch.id } });
    await prisma.address.deleteMany({ where: { userId: { in: testUsers.map(u => u.id) } } });
    await prisma.user.deleteMany({ where: { id: { in: testUsers.map(u => u.id) } } });
    await prisma.$disconnect();
    console.log('‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
  });

  test('–ù–∞—á–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–∞—Ä—Ç–∏–∏ = 0', () => {
    expect(testBatch.currentAmount.toNumber()).toBe(0);
    expect(testBatch.participantsCount).toBe(0);
    expect(testBatch.progressPercent).toBe(0);
    console.log('‚úÖ –¢–µ—Å—Ç 1 –ø—Ä–æ–π–¥–µ–Ω: –ù–∞—á–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–∞—Ä—Ç–∏–∏ = 0');
  });

  test('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ 1 –æ–ø–ª–∞—á–µ–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ ‚Üí –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏', async () => {
    // –°–æ–∑–¥–∞—ë–º –∑–∞–∫–∞–∑ —Å –ü–†–ê–í–ò–õ–¨–ù–´–ú addressId
    const order = await prisma.order.create({
      data: {
        userId: testUsers[0].id,
        batchId: testBatch.id,
        status: 'paid',
        totalAmount: 3000,
        addressId: testAddresses[0].id // ‚úÖ –ò–°–ü–û–õ–¨–ó–£–ï–ú –°–û–ó–î–ê–ù–ù–´–ô –ê–î–†–ï–°
      }
    });
    testOrders.push(order);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    await updateBatchStatistics(testBatch.id);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º
    const updated = await prisma.batch.findUnique({
      where: { id: testBatch.id }
    });

    expect(updated.currentAmount.toNumber()).toBe(3000);
    expect(updated.participantsCount).toBe(1);
    expect(updated.progressPercent).toBe(30); // 3000/10000 * 100
    console.log('‚úÖ –¢–µ—Å—Ç 2 –ø—Ä–æ–π–¥–µ–Ω: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ 1 –∑–∞–∫–∞–∑–∞ (3000‚ÇΩ, 30%, 1 —É—á–∞—Å—Ç–Ω–∏–∫)');
  });

  test('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ 2-–≥–æ –∑–∞–∫–∞–∑–∞ —Ç–æ–≥–æ –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Üí participantsCount = 1', async () => {
    const order = await prisma.order.create({
      data: {
        userId: testUsers[0].id, // —Ç–æ—Ç –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        batchId: testBatch.id,
        status: 'paid',
        totalAmount: 2000,
        addressId: testAddresses[0].id // ‚úÖ –ò–°–ü–û–õ–¨–ó–£–ï–ú –ê–î–†–ï–° –≠–¢–û–ì–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
      }
    });
    testOrders.push(order);

    await updateBatchStatistics(testBatch.id);

    const updated = await prisma.batch.findUnique({
      where: { id: testBatch.id }
    });

    expect(updated.currentAmount.toNumber()).toBe(5000); // 3000 + 2000
    expect(updated.participantsCount).toBe(1); // –í–°–Å –ï–©–Å 1 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    expect(updated.progressPercent).toBe(50);
    console.log('‚úÖ –¢–µ—Å—Ç 3 –ø—Ä–æ–π–¥–µ–Ω: 2-–π –∑–∞–∫–∞–∑ —Ç–æ–≥–æ –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (5000‚ÇΩ, 50%, 1 —É—á–∞—Å—Ç–Ω–∏–∫)');
  });

  test('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Üí participantsCount = 2', async () => {
    const order = await prisma.order.create({
      data: {
        userId: testUsers[1].id, // –¥—Ä—É–≥–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        batchId: testBatch.id,
        status: 'paid',
        totalAmount: 3000,
        addressId: testAddresses[1].id // ‚úÖ –ê–î–†–ï–° –í–¢–û–†–û–ì–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
      }
    });
    testOrders.push(order);

    await updateBatchStatistics(testBatch.id);

    const updated = await prisma.batch.findUnique({
      where: { id: testBatch.id }
    });

    expect(updated.currentAmount.toNumber()).toBe(8000);
    expect(updated.participantsCount).toBe(2); // —Ç–µ–ø–µ—Ä—å 2
    expect(updated.progressPercent).toBe(80);
    console.log('‚úÖ –¢–µ—Å—Ç 4 –ø—Ä–æ–π–¥–µ–Ω: –ó–∞–∫–∞–∑ –æ—Ç –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (8000‚ÇΩ, 80%, 2 —É—á–∞—Å—Ç–Ω–∏–∫–∞)');
  });

  test('–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ 100% ‚Üí —Å—Ç–∞—Ç—É—Å –º–µ–Ω—è–µ—Ç—Å—è –Ω–∞ ready', async () => {
    const order = await prisma.order.create({
      data: {
        userId: testUsers[2].id,
        batchId: testBatch.id,
        status: 'paid',
        totalAmount: 2000,
        addressId: testAddresses[2].id // ‚úÖ –ê–î–†–ï–° –¢–†–ï–¢–¨–ï–ì–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
      }
    });
    testOrders.push(order);

    await updateBatchStatistics(testBatch.id);

    const updated = await prisma.batch.findUnique({
      where: { id: testBatch.id }
    });

    expect(updated.currentAmount.toNumber()).toBe(10000);
    expect(updated.progressPercent).toBe(100);
    expect(updated.status).toBe('ready'); // –ê–í–¢–û–°–ú–ï–ù–ê –°–¢–ê–¢–£–°–ê
    console.log('‚úÖ –¢–µ—Å—Ç 5 –ø—Ä–æ–π–¥–µ–Ω: –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ 100% ‚Üí —Å—Ç–∞—Ç—É—Å ready');
  });

  test('–¢–æ–ª—å–∫–æ paid –∑–∞–∫–∞–∑—ã —É—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –≤ —Å—É–º–º–µ', async () => {
    // –°–æ–∑–¥–∞—ë–º pending –∑–∞–∫–∞–∑
    await prisma.order.create({
      data: {
        userId: testUsers[2].id,
        batchId: testBatch.id,
        status: 'pending', // –ù–ï –æ–ø–ª–∞—á–µ–Ω
        totalAmount: 5000,
        addressId: testAddresses[2].id // ‚úÖ –ò–°–ü–û–õ–¨–ó–£–ï–ú –ê–î–†–ï–°
      }
    });

    await updateBatchStatistics(testBatch.id);

    const updated = await prisma.batch.findUnique({
      where: { id: testBatch.id }
    });

    // –°—É–º–º–∞ –ù–ï –¥–æ–ª–∂–Ω–∞ –∏–∑–º–µ–Ω–∏—Ç—å—Å—è
    expect(updated.currentAmount.toNumber()).toBe(10000);
    console.log('‚úÖ –¢–µ—Å—Ç 6 –ø—Ä–æ–π–¥–µ–Ω: pending –∑–∞–∫–∞–∑—ã –ù–ï —É—á–∏—Ç—ã–≤–∞—é—Ç—Å—è (—Å—É–º–º–∞ –æ—Å—Ç–∞–ª–∞—Å—å 10000‚ÇΩ)');
  });
});
