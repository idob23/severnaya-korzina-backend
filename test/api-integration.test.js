// test/api-integration.test.js
// API Integration —Ç–µ—Å—Ç—ã - –≤—ã–∑–æ–≤ —Ä–µ–∞–ª—å–Ω—ã—Ö endpoints

const request = require('supertest');
const { PrismaClient } = require('@prisma/client');
const jwt = require('jsonwebtoken');

const prisma = new PrismaClient();

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Express app
const app = require('../src/server');

jest.setTimeout(30000);

describe('API Integration Tests', () => {
  
  let testUser;
  let testToken;
  let testAddress;
  let testCategory;
  let testProduct;
  let testBatch;

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è JWT —Ç–æ–∫–µ–Ω–∞
  const generateToken = (userId) => {
    return jwt.sign(
      { id: userId },
      process.env.JWT_SECRET || 'test-secret-key-for-testing',
      { expiresIn: '24h' }
    );
  };

  // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
  beforeAll(async () => {
    console.log('üßπ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ API integration —Ç–µ—Å—Ç–æ–≤...');

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    testUser = await prisma.user.create({
      data: {
        phone: '+79991112233',
        firstName: 'API',
        lastName: '–¢–µ—Å—Ç–æ–≤—ã–π',
        isActive: true
      }
    });

    testToken = generateToken(testUser.id);

    // –°–æ–∑–¥–∞–µ–º –∞–¥—Ä–µ—Å
    testAddress = await prisma.address.create({
      data: {
        userId: testUser.id,
        title: 'API —Ç–µ—Å—Ç –∞–¥—Ä–µ—Å',
        address: '—É–ª. API, –¥. 1',
        isDefault: true
      }
    });

    // –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    testCategory = await prisma.category.create({
      data: {
        name: 'API —Ç–µ—Å—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—è',
        isActive: true
      }
    });

    // –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä
    testProduct = await prisma.product.create({
      data: {
        categoryId: testCategory.id,
        name: 'API —Ç–µ—Å—Ç —Ç–æ–≤–∞—Ä',
        price: 100,
        unit: '—à—Ç',
        maxQuantity: 10,
        isActive: true
      }
    });

    // –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Ç–∏—é
    testBatch = await prisma.batch.create({
      data: {
        title: 'API —Ç–µ—Å—Ç –ø–∞—Ä—Ç–∏—è',
        status: 'active',
        targetAmount: 10000,
        currentAmount: 0,
        participantsCount: 0,
        progressPercent: 0,
        marginPercent: 20,
        startDate: new Date(),
        endDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000)
      }
    });

    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –¥–ª—è API —Ç–µ—Å—Ç–æ–≤ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã');
  });

  // –û—á–∏—Å—Ç–∫–∞
  afterAll(async () => {
    console.log('üßπ –û—á–∏—Å—Ç–∫–∞ API integration —Ç–µ—Å—Ç–æ–≤...');
    await prisma.orderItem.deleteMany({});
    await prisma.order.deleteMany({});
    await prisma.batchItem.deleteMany({});
    await prisma.batch.delete({ where: { id: testBatch.id } });
    await prisma.product.delete({ where: { id: testProduct.id } });
    await prisma.category.delete({ where: { id: testCategory.id } });
    await prisma.address.delete({ where: { id: testAddress.id } });
    await prisma.user.delete({ where: { id: testUser.id } });
    await prisma.$disconnect();
    console.log('‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
  });

  // –¢–ï–°–¢ 1: GET /api/products - –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
  test('1. GET /api/products - –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤', async () => {
    const response = await request(app)
      .get('/api/products')
      .expect(200);

    expect(response.body.success).toBe(true);
    expect(Array.isArray(response.body.data)).toBe(true);
    expect(response.body.data.length).toBeGreaterThan(0);

    console.log(`‚úÖ –¢–µ—Å—Ç 1 –ø—Ä–æ–π–¥–µ–Ω: –ü–æ–ª—É—á–µ–Ω–æ ${response.body.data.length} —Ç–æ–≤–∞—Ä–æ–≤`);
  });

  // –¢–ï–°–¢ 2: GET /api/products/:id - –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
  test('2. GET /api/products/:id - –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä –ø–æ ID', async () => {
    const response = await request(app)
      .get(`/api/products/${testProduct.id}`)
      .expect(200);

    expect(response.body.success).toBe(true);
    expect(response.body.data.id).toBe(testProduct.id);
    expect(response.body.data.name).toBe('API —Ç–µ—Å—Ç —Ç–æ–≤–∞—Ä');

    console.log(`‚úÖ –¢–µ—Å—Ç 2 –ø—Ä–æ–π–¥–µ–Ω: –¢–æ–≤–∞—Ä #${testProduct.id} –ø–æ–ª—É—á–µ–Ω`);
  });

  // –¢–ï–°–¢ 3: GET /api/categories - –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  test('3. GET /api/categories - –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π', async () => {
    const response = await request(app)
      .get('/api/categories')
      .expect(200);

    expect(response.body.success).toBe(true);
    expect(Array.isArray(response.body.data)).toBe(true);

    console.log(`‚úÖ –¢–µ—Å—Ç 3 –ø—Ä–æ–π–¥–µ–Ω: –ü–æ–ª—É—á–µ–Ω–æ ${response.body.data.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π`);
  });

  // –¢–ï–°–¢ 4: GET /api/batches - –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä—Ç–∏–π
  test('4. GET /api/batches - –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–∞—Ä—Ç–∏–π', async () => {
    const response = await request(app)
      .get('/api/batches')
      .expect(200);

    expect(response.body.success).toBe(true);
    expect(Array.isArray(response.body.data)).toBe(true);

    console.log(`‚úÖ –¢–µ—Å—Ç 4 –ø—Ä–æ–π–¥–µ–Ω: –ü–æ–ª—É—á–µ–Ω–æ ${response.body.data.length} –ø–∞—Ä—Ç–∏–π`);
  });

  // –¢–ï–°–¢ 5: GET /api/batches/:id - –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä—Ç–∏–∏ –ø–æ ID
  test('5. GET /api/batches/:id - –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å –ø–∞—Ä—Ç–∏—é –ø–æ ID', async () => {
    const response = await request(app)
      .get(`/api/batches/${testBatch.id}`)
      .expect(200);

    expect(response.body.success).toBe(true);
    expect(response.body.data.id).toBe(testBatch.id);

    console.log(`‚úÖ –¢–µ—Å—Ç 5 –ø—Ä–æ–π–¥–µ–Ω: –ü–∞—Ä—Ç–∏—è #${testBatch.id} –ø–æ–ª—É—á–µ–Ω–∞`);
  });

  // –¢–ï–°–¢ 6: POST /api/orders - —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ (—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π)
  test('6. POST /api/orders - –¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑', async () => {
    const response = await request(app)
      .post('/api/orders')
      .set('Authorization', `Bearer ${testToken}`)
      .send({
        batchId: testBatch.id,
        addressId: testAddress.id,
        items: [
          {
            productId: testProduct.id,
            quantity: 2,
            price: 100
          }
        ]
      })
      .expect(201);

    expect(response.body.success).toBe(true);
    expect(response.body.data.id).toBeDefined();
    expect(response.body.data.status).toBe('pending');

    console.log(`‚úÖ –¢–µ—Å—Ç 6 –ø—Ä–æ–π–¥–µ–Ω: –ó–∞–∫–∞–∑ #${response.body.data.id} —Å–æ–∑–¥–∞–Ω`);
  });

  // –¢–ï–°–¢ 7: GET /api/orders/my - –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–∏—Ö –∑–∞–∫–∞–∑–æ–≤
  test('7. GET /api/orders/my - –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–∏ –∑–∞–∫–∞–∑—ã', async () => {
    const response = await request(app)
      .get('/api/orders/my')
      .set('Authorization', `Bearer ${testToken}`)
      .expect(200);

    expect(response.body.success).toBe(true);
    expect(Array.isArray(response.body.data)).toBe(true);
    expect(response.body.data.length).toBeGreaterThan(0);

    console.log(`‚úÖ –¢–µ—Å—Ç 7 –ø—Ä–æ–π–¥–µ–Ω: –ü–æ–ª—É—á–µ–Ω–æ ${response.body.data.length} –∑–∞–∫–∞–∑–æ–≤`);
  });

  // –¢–ï–°–¢ 8: GET /api/settings - –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  test('8. GET /api/settings - –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', async () => {
    const response = await request(app)
      .get('/api/settings')
      .expect(200);

    expect(response.body.success).toBe(true);
    expect(typeof response.body.data).toBe('object');

    console.log('‚úÖ –¢–µ—Å—Ç 8 –ø—Ä–æ–π–¥–µ–Ω: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã');
  });

  // –¢–ï–°–¢ 9: POST /api/orders –±–µ–∑ —Ç–æ–∫–µ–Ω–∞ - –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å 401
  test('9. POST /api/orders –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ - –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å 401', async () => {
    const response = await request(app)
      .post('/api/orders')
      .send({
        batchId: testBatch.id,
        addressId: testAddress.id,
        items: []
      })
      .expect(401);

    expect(response.body.success).toBe(false);

    console.log('‚úÖ –¢–µ—Å—Ç 9 –ø—Ä–æ–π–¥–µ–Ω: –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω');
  });

  // –¢–ï–°–¢ 10: GET /api/products/999999 - –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–≤–∞—Ä
  test('10. GET /api/products/999999 - –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å 404', async () => {
    const response = await request(app)
      .get('/api/products/999999')
      .expect(404);

    expect(response.body.success).toBe(false);

    console.log('‚úÖ –¢–µ—Å—Ç 10 –ø—Ä–æ–π–¥–µ–Ω: –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–≤–∞—Ä –æ–±—Ä–∞–±–æ—Ç–∞–Ω');
  });

});
