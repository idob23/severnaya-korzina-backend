// test/integration.test.js
const { PrismaClient } = require('@prisma/client');
const { cleanDatabase } = require('./helpers/db-cleaner');
const prisma = new PrismaClient();

// üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò
if (process.env.NODE_ENV !== 'test') {
  throw new Error('üö® –≠—Ç–æ—Ç —Ç–µ—Å—Ç –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –¢–û–õ–¨–ö–û —Å NODE_ENV=test');
}

jest.setTimeout(30000);

describe('Integration Tests - –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª', () => {
  
  let testUser, testAddress, testCategory, testProduct1;
  let testBatch, testOrder, testPayment;

  beforeAll(async () => {
    console.log('üßπ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–ª—è integration —Ç–µ—Å—Ç–æ–≤...');
    await cleanDatabase(prisma);
  });

  afterAll(async () => {
    console.log('üßπ –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ integration —Ç–µ—Å—Ç–æ–≤...');
    await cleanDatabase(prisma);
    await prisma.$disconnect();
    console.log('‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
  });

  test('–°–¶–ï–ù–ê–†–ò–ô 1.1: –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', async () => {
    testUser = await prisma.user.create({
      data: {
        phone: '79991234567',
        firstName: 'INTEGRATION_TEST',
        isActive: true,
        acceptedTerms: true
      }
    });

    expect(testUser).toBeDefined();
    console.log('‚úÖ 1.1: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω');
  });

  test('–°–¶–ï–ù–ê–†–ò–ô 1.2: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞', async () => {
    testAddress = await prisma.address.create({
      data: {
        userId: testUser.id,
        title: '–¢–µ—Å—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å',
        address: '—É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, –¥. 1',
        isDefault: true
      }
    });

    expect(testAddress).toBeDefined();
    console.log('‚úÖ 1.2: –ê–¥—Ä–µ—Å –¥–æ–±–∞–≤–ª–µ–Ω');
  });

  test('–ò–¢–û–ì: –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ', async () => {
    expect(testUser).toBeDefined();
    expect(testAddress).toBeDefined();
    console.log('‚úÖ INTEGRATION —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã!');
  });
});
