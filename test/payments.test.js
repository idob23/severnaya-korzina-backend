// test/payments.test.js
const { PrismaClient } = require('@prisma/client');
const { cleanDatabase } = require('./helpers/db-cleaner');
const prisma = new PrismaClient();

// üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò
if (process.env.NODE_ENV !== 'test') {
  throw new Error('üö® –≠—Ç–æ—Ç —Ç–µ—Å—Ç –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –¢–û–õ–¨–ö–û —Å NODE_ENV=test');
}

jest.setTimeout(30000);

describe('Payments - –ö—Ä–∏—Ç–∏—á–Ω—ã–µ —Ç–µ—Å—Ç—ã', () => {
  
  let testUser;
  let testAddress;
  let testOrder;
  let testPayment;

  beforeAll(async () => {
    console.log('üßπ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Payments...');
    
    await cleanDatabase(prisma);

    // –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    testUser = await prisma.user.create({
      data: {
        phone: '79999999999',
        firstName: 'Test',
        isActive: true,
        acceptedTerms: true
      }
    });

    // –°–æ–∑–¥–∞–µ–º –∞–¥—Ä–µ—Å
    testAddress = await prisma.address.create({
      data: {
        userId: testUser.id,
        title: '–¢–µ—Å—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å –¥–ª—è –ø–ª–∞—Ç–µ–∂–µ–π',
        address: '—É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, –¥. 1',
        isDefault: true
      }
    });

    // –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑
    testOrder = await prisma.order.create({
      data: {
        userId: testUser.id,
        status: 'pending',
        totalAmount: 1200,
        addressId: testAddress.id
      }
    });

    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã');
  });

  afterAll(async () => {
    console.log('üßπ –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ payments —Ç–µ—Å—Ç–æ–≤...');
    await cleanDatabase(prisma);
    await prisma.$disconnect();
    console.log('‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
  });

  test('1. –ë–î –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è', async () => {
    const result = await prisma.$queryRaw`SELECT 1 as test`;
    expect(result[0].test).toBe(1);
    console.log('‚úÖ –¢–µ—Å—Ç 1 –ø—Ä–æ–π–¥–µ–Ω: –ë–î –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
  });

  test('2. –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ payment', async () => {
    testPayment = await prisma.payment.create({
      data: {
        paymentId: 'TEST_' + Date.now(),
        orderId: testOrder.id,
        status: 'CREATED',
        amount: 1200,
        provider: 'tochka'
      }
    });

    expect(testPayment.id).toBeDefined();
    expect(testPayment.status).toBe('CREATED');
    console.log('‚úÖ –¢–µ—Å—Ç 2 –ø—Ä–æ–π–¥–µ–Ω: Payment —Å–æ–∑–¥–∞–Ω');
  });
});
