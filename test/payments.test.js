// test/payments.test.js - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

jest.setTimeout(30000);

describe('Payments - –ö—Ä–∏—Ç–∏—á–Ω—ã–µ —Ç–µ—Å—Ç—ã', () => {
  
  let testUser;
  let testAddress; // ‚Üê –î–û–ë–ê–í–ò–õ–ò
  let testOrder;
  let testPayment;

  // –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
  beforeAll(async () => {
    console.log('üßπ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Payments...');

    // –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –Ω–µ—Ç
    testUser = await prisma.user.upsert({
      where: { phone: '79999999999' },
      update: {},
      create: {
        phone: '79999999999',
        firstName: 'Test',
        isActive: true
      }
    });
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${testUser.id}`);

    // ‚úÖ –°–û–ó–î–ê–ï–ú –ê–î–†–ï–° –î–õ–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
    testAddress = await prisma.address.create({
      data: {
        userId: testUser.id,
        title: '–¢–µ—Å—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å –¥–ª—è –ø–ª–∞—Ç–µ–∂–µ–π',
        address: '—É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, –¥. 1',
        isDefault: true
      }
    });
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å: ${testAddress.id}`);

    // –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑
    testOrder = await prisma.order.create({
      data: {
        userId: testUser.id,
        status: 'pending',
        totalAmount: 1200,
        addressId: testAddress.id // ‚úÖ –ò–°–ü–û–õ–¨–ó–£–ï–ú –°–û–ó–î–ê–ù–ù–´–ô –ê–î–†–ï–°
      }
    });
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑: ${testOrder.id}`);
  });

  afterAll(async () => {
    console.log('üßπ –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ payments —Ç–µ—Å—Ç–æ–≤...');
    // –û—á–∏—Å—Ç–∫–∞
    if (testPayment) await prisma.payment.delete({ where: { id: testPayment.id } }).catch(() => {});
    if (testOrder) await prisma.order.delete({ where: { id: testOrder.id } }).catch(() => {});
    if (testAddress) await prisma.address.delete({ where: { id: testAddress.id } }).catch(() => {});
    if (testUser) await prisma.user.delete({ where: { id: testUser.id } }).catch(() => {});
    await prisma.$disconnect();
    console.log('‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
  });

  test('1. –ë–î –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è', async () => {
    const result = await prisma.$queryRaw`SELECT 1 as test`;
    expect(result[0].test).toBe(1);
    console.log('‚úÖ –¢–µ—Å—Ç 1 –ø—Ä–æ–π–¥–µ–Ω: –ë–î –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
  });

  test('2. –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ payment', async () => {
    testPayment = await prisma.payment.create({
      data: {
        paymentId: 'TEST_' + Date.now(),
        orderId: testOrder.id,
        status: 'CREATED',
        amount: 1200,
        provider: 'tochka'
      }
    });

    expect(testPayment.id).toBeDefined();
    expect(testPayment.status).toBe('CREATED');
    console.log(`‚úÖ –¢–µ—Å—Ç 2 –ø—Ä–æ–π–¥–µ–Ω: Payment —Å–æ–∑–¥–∞–Ω #${testPayment.id}`);
  });

  test('3. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ payment –Ω–∞ APPROVED', async () => {
    const updated = await prisma.payment.update({
      where: { id: testPayment.id },
      data: { 
        status: 'APPROVED',
        paidAt: new Date()
      }
    });

    expect(updated.status).toBe('APPROVED');
    expect(updated.paidAt).toBeDefined();
    console.log('‚úÖ –¢–µ—Å—Ç 3 –ø—Ä–æ–π–¥–µ–Ω: –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ APPROVED');
  });

  test('4. –ö–∞—Å–∫–∞–¥–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ: order —É–¥–∞–ª—è–µ—Ç—Å—è ‚Üí payment —É–¥–∞–ª—è–µ—Ç—Å—è', async () => {
    // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –ø–∞—Ä—É order-payment
    const order = await prisma.order.create({
      data: {
        userId: testUser.id,
        status: 'pending',
        totalAmount: 100,
        addressId: testAddress.id // ‚úÖ –ò–°–ü–û–õ–¨–ó–£–ï–ú –ê–î–†–ï–°
      }
    });

    const payment = await prisma.payment.create({
      data: {
        paymentId: 'CASCADE_TEST_' + Date.now(),
        orderId: order.id,
        status: 'CREATED',
        amount: 100
      }
    });

    // –£–¥–∞–ª—è–µ–º order
    await prisma.order.delete({ where: { id: order.id } });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ payment —Ç–æ–∂–µ —É–¥–∞–ª–∏–ª—Å—è
    const deletedPayment = await prisma.payment.findUnique({
      where: { id: payment.id }
    });

    expect(deletedPayment).toBeNull();
    console.log('‚úÖ –¢–µ—Å—Ç 4 –ø—Ä–æ–π–¥–µ–Ω: –ö–∞—Å–∫–∞–¥–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
  });
});
