// test/admin.test.js
// –¢–µ—Å—Ç—ã –¥–ª—è Admin API

const { PrismaClient } = require('@prisma/client');

// üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò
if (process.env.NODE_ENV !== 'test') {
  throw new Error('üö® –≠—Ç–æ—Ç —Ç–µ—Å—Ç –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –¢–û–õ–¨–ö–û —Å NODE_ENV=test');
}
const jwt = require('jsonwebtoken');

// üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò
if (process.env.NODE_ENV !== 'test') {
  throw new Error('üö® –≠—Ç–æ—Ç —Ç–µ—Å—Ç –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –¢–û–õ–¨–ö–û —Å NODE_ENV=test');
}

const prisma = new PrismaClient();

jest.setTimeout(30000);

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è admin JWT —Ç–æ–∫–µ–Ω–∞
const generateAdminToken = () => {
  return jwt.sign(
    { userId: 'admin-id', login: 'admin', role: 'admin' },
    process.env.JWT_SECRET || 'test-secret-key-for-testing',
    { expiresIn: '24h' }
  );
};

describe('Admin API Tests', () => {
  
  let adminToken;
  let testUser;
  let testBatch;
  let testProduct;
  let testCategory;

  // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  beforeAll(async () => {
    console.log('üßπ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Admin API...');

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º admin —Ç–æ–∫–µ–Ω
    adminToken = generateAdminToken();

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    testUser = await prisma.user.create({
      data: {
        phone: '+79997771111',
        firstName: '–ê–¥–º–∏–Ω',
        lastName: '–¢–µ—Å—Ç–æ–≤—ã–π',
        isActive: true
      }
    });

    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –±–µ–∑ upsert
    // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é
    testCategory = await prisma.category.findFirst({
      where: { name: '–¢–µ—Å—Ç–æ–≤–∞—è –∞–¥–º–∏–Ω –∫–∞—Ç–µ–≥–æ—Ä–∏—è' }
    });

    // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
    if (!testCategory) {
      testCategory = await prisma.category.create({
        data: {
          name: '–¢–µ—Å—Ç–æ–≤–∞—è –∞–¥–º–∏–Ω –∫–∞—Ç–µ–≥–æ—Ä–∏—è',
          description: '–î–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Ç–µ—Å—Ç–æ–≤',
          isActive: true
        }
      });
    }

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä
    testProduct = await prisma.product.create({
      data: {
        categoryId: testCategory.id,
        name: '–¢–µ—Å—Ç–æ–≤—ã–π –∞–¥–º–∏–Ω —Ç–æ–≤–∞—Ä',
        price: 1000,
        unit: '—à—Ç',
        isActive: true
      }
    });

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –ø–∞—Ä—Ç–∏—é
    testBatch = await prisma.batch.create({
      data: {
        title: '–¢–µ—Å—Ç–æ–≤–∞—è –∞–¥–º–∏–Ω –ø–∞—Ä—Ç–∏—è',
        status: 'active',
        targetAmount: 100000,
        currentAmount: 0,
        participantsCount: 0,
        progressPercent: 0,
        marginPercent: 20,
        startDate: new Date(),
        endDate: new Date(Date.now() + 14 * 24 * 60 * 60 * 1000)
      }
    });

    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã');
  });

  // –û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
  afterAll(async () => {
    console.log('üßπ –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ admin —Ç–µ—Å—Ç–æ–≤...');
    await prisma.user.delete({ where: { id: testUser.id } }).catch(() => {});
    await prisma.product.delete({ where: { id: testProduct.id } }).catch(() => {});
    await prisma.batch.delete({ where: { id: testBatch.id } }).catch(() => {});
    await prisma.category.delete({ where: { id: testCategory.id } }).catch(() => {});
    await prisma.$disconnect();
    console.log('‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
  });

  // –¢–ï–°–¢ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω —Ç–æ–∫–µ–Ω–∞
  test('1. –î–æ–ª–∂–µ–Ω –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∞–¥–º–∏–Ω —Ç–æ–∫–µ–Ω–∞', () => {
    const decoded = jwt.verify(
      adminToken,
      process.env.JWT_SECRET || 'test-secret-key-for-testing'
    );

    expect(decoded.role).toBe('admin');
    expect(decoded.login).toBe('admin');
    
    console.log('‚úÖ –¢–µ—Å—Ç 1 –ø—Ä–æ–π–¥–µ–Ω: –ê–¥–º–∏–Ω —Ç–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω');
  });

  // –¢–ï–°–¢ 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ dashboard
  test('2. –î–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è dashboard', async () => {
    const totalUsers = await prisma.user.count();
    const totalOrders = await prisma.order.count();
    const totalBatches = await prisma.batch.count();
    const totalProducts = await prisma.product.count();

    expect(totalUsers).toBeGreaterThanOrEqual(1); // –º–∏–Ω–∏–º—É–º testUser
    expect(totalBatches).toBeGreaterThanOrEqual(1); // –º–∏–Ω–∏–º—É–º testBatch
    expect(totalProducts).toBeGreaterThanOrEqual(1); // –º–∏–Ω–∏–º—É–º testProduct
    
    console.log(`‚úÖ –¢–µ—Å—Ç 2 –ø—Ä–æ–π–¥–µ–Ω: Users=${totalUsers}, Orders=${totalOrders}, Batches=${totalBatches}, Products=${totalProducts}`);
  });

  // –¢–ï–°–¢ 3: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  test('3. –î–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', async () => {
    const users = await prisma.user.findMany({
      take: 10,
      orderBy: { createdAt: 'desc' }
    });

    expect(users.length).toBeGreaterThan(0);
    expect(users.some(u => u.id === testUser.id)).toBe(true);
    
    console.log(`‚úÖ –¢–µ—Å—Ç 3 –ø—Ä–æ–π–¥–µ–Ω: –ù–∞–π–¥–µ–Ω–æ ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
  });

  // –¢–ï–°–¢ 4: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤
  test('4. –î–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤', async () => {
    const orders = await prisma.order.findMany({
      take: 10,
      orderBy: { createdAt: 'desc' },
      include: {
        user: true,
        batch: true
      }
    });

    expect(Array.isArray(orders)).toBe(true);
    
    console.log(`‚úÖ –¢–µ—Å—Ç 4 –ø—Ä–æ–π–¥–µ–Ω: –ù–∞–π–¥–µ–Ω–æ ${orders.length} –∑–∞–∫–∞–∑–æ–≤`);
  });

  // –¢–ï–°–¢ 5: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ø–∞—Ä—Ç–∏–π
  test('5. –î–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–∞—Ä—Ç–∏–π', async () => {
    const batches = await prisma.batch.findMany({
      take: 10,
      orderBy: { createdAt: 'desc' }
    });

    expect(batches.length).toBeGreaterThan(0);
    expect(batches.some(b => b.id === testBatch.id)).toBe(true);
    
    console.log(`‚úÖ –¢–µ—Å—Ç 5 –ø—Ä–æ–π–¥–µ–Ω: –ù–∞–π–¥–µ–Ω–æ ${batches.length} –ø–∞—Ä—Ç–∏–π`);
  });

  // –¢–ï–°–¢ 6: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Å—Ç–∞—Ç—É—Å—É
  test('6. –î–æ–ª–∂–µ–Ω –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Å—Ç–∞—Ç—É—Å—É', async () => {
    const activeUsers = await prisma.user.findMany({
      where: { isActive: true }
    });

    const inactiveUsers = await prisma.user.findMany({
      where: { isActive: false }
    });

    expect(activeUsers.length).toBeGreaterThan(0);
    
    console.log(`‚úÖ –¢–µ—Å—Ç 6 –ø—Ä–æ–π–¥–µ–Ω: active=${activeUsers.length}, inactive=${inactiveUsers.length}`);
  });

  // –¢–ï–°–¢ 7: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–∫–∞–∑–æ–≤ –ø–æ —Å—Ç–∞—Ç—É—Å—É
  test('7. –î–æ–ª–∂–µ–Ω –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –∑–∞–∫–∞–∑—ã –ø–æ —Å—Ç–∞—Ç—É—Å—É', async () => {
    const paidOrders = await prisma.order.findMany({
      where: { status: 'paid' }
    });

    const pendingOrders = await prisma.order.findMany({
      where: { status: 'pending' }
    });

    expect(Array.isArray(paidOrders)).toBe(true);
    expect(Array.isArray(pendingOrders)).toBe(true);
    
    console.log(`‚úÖ –¢–µ—Å—Ç 7 –ø—Ä–æ–π–¥–µ–Ω: paid=${paidOrders.length}, pending=${pendingOrders.length}`);
  });

  // –¢–ï–°–¢ 8: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä—Ç–∏–∏ —Å –∑–∞–∫–∞–∑–∞–º–∏
  test('8. –î–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å –ø–∞—Ä—Ç–∏—é —Å –∑–∞–∫–∞–∑–∞–º–∏', async () => {
    const batch = await prisma.batch.findUnique({
      where: { id: testBatch.id },
      include: {
        orders: true,
        batchItems: {
          include: {
            product: true
          }
        }
      }
    });

    expect(batch).toBeDefined();
    expect(batch.id).toBe(testBatch.id);
    expect(Array.isArray(batch.orders)).toBe(true);
    
    console.log(`‚úÖ –¢–µ—Å—Ç 8 –ø—Ä–æ–π–¥–µ–Ω: –ü–∞—Ä—Ç–∏—è #${batch.id} —Å ${batch.orders.length} –∑–∞–∫–∞–∑–∞–º–∏`);
  });

  // –¢–ï–°–¢ 9: –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  test('9. –î–æ–ª–∂–µ–Ω –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', async () => {
    const updated = await prisma.user.update({
      where: { id: testUser.id },
      data: { isActive: false }
    });

    expect(updated.isActive).toBe(false);

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
    await prisma.user.update({
      where: { id: testUser.id },
      data: { isActive: true }
    });
    
    console.log('‚úÖ –¢–µ—Å—Ç 9 –ø—Ä–æ–π–¥–µ–Ω: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∏ —Ä–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
  });

  // –¢–ï–°–¢ 10: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–∞—Ä—Ç–∏–∏
  test('10. –î–æ–ª–∂–µ–Ω –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–∞—Ä—Ç–∏–∏', async () => {
    const updated = await prisma.batch.update({
      where: { id: testBatch.id },
      data: { status: 'ready' }
    });

    expect(updated.status).toBe('ready');

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
    await prisma.batch.update({
      where: { id: testBatch.id },
      data: { status: 'active' }
    });
    
    console.log('‚úÖ –¢–µ—Å—Ç 10 –ø—Ä–æ–π–¥–µ–Ω: –°—Ç–∞—Ç—É—Å –ø–∞—Ä—Ç–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω (active ‚Üí ready ‚Üí active)');
  });

  // –¢–ï–°–¢ 11: –ü–æ–¥—Å—á–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –≤ –ø–∞—Ä—Ç–∏–∏
  test('11. –î–æ–ª–∂–µ–Ω –ø–æ–¥—Å—á–∏—Ç–∞—Ç—å –∑–∞–∫–∞–∑—ã –≤ –ø–∞—Ä—Ç–∏–∏', async () => {
    const ordersCount = await prisma.order.count({
      where: { batchId: testBatch.id }
    });

    expect(ordersCount).toBeGreaterThanOrEqual(0);
    
    console.log(`‚úÖ –¢–µ—Å—Ç 11 –ø—Ä–æ–π–¥–µ–Ω: –í –ø–∞—Ä—Ç–∏–∏ ${ordersCount} –∑–∞–∫–∞–∑–æ–≤`);
  });

  // –¢–ï–°–¢ 12: –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  test('12. –î–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', async () => {
    const userOrders = await prisma.order.findMany({
      where: { userId: testUser.id }
    });

    expect(Array.isArray(userOrders)).toBe(true);
    
    console.log(`‚úÖ –¢–µ—Å—Ç 12 –ø—Ä–æ–π–¥–µ–Ω: –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userOrders.length} –∑–∞–∫–∞–∑–æ–≤`);
  });

  // –¢–ï–°–¢ 13: –†–∞—Å—á–µ—Ç –æ–±—â–µ–π —Å—É–º–º—ã –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤
  test('13. –î–æ–ª–∂–µ–Ω —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –æ–±—â—É—é —Å—É–º–º—É –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤', async () => {
    const result = await prisma.order.aggregate({
      _sum: {
        totalAmount: true
      }
    });

    const totalRevenue = result._sum.totalAmount || 0;
    
    expect(totalRevenue).toBeGreaterThanOrEqual(0);
    
    console.log(`‚úÖ –¢–µ—Å—Ç 13 –ø—Ä–æ–π–¥–µ–Ω: –û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–æ–≤ = ${totalRevenue} ‚ÇΩ`);
  });

  // –¢–ï–°–¢ 14: –†–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–µ–π —Å—É–º–º—ã –∑–∞–∫–∞–∑–∞
  test('14. –î–æ–ª–∂–µ–Ω —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ä–µ–¥–Ω—é—é —Å—É–º–º—É –∑–∞–∫–∞–∑–∞', async () => {
    const result = await prisma.order.aggregate({
      _avg: {
        totalAmount: true
      }
    });

    const avgOrderAmount = result._avg.totalAmount || 0;
    
    expect(avgOrderAmount).toBeGreaterThanOrEqual(0);
    
    console.log(`‚úÖ –¢–µ—Å—Ç 14 –ø—Ä–æ–π–¥–µ–Ω: –°—Ä–µ–¥–Ω—è—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞ = ${avgOrderAmount} ‚ÇΩ`);
  });

  // –¢–ï–°–¢ 15: –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ —Å –Ω–∏–∑–∫–∏–º –æ—Å—Ç–∞—Ç–∫–æ–º
  test('15. –î–æ–ª–∂–µ–Ω –Ω–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä—ã —Å –Ω–∏–∑–∫–∏–º –æ—Å—Ç–∞—Ç–∫–æ–º', async () => {
    const lowStockProducts = await prisma.product.findMany({
      where: {
        maxQuantity: {
          lte: 10
        },
        isActive: true
      }
    });

    expect(Array.isArray(lowStockProducts)).toBe(true);
    
    console.log(`‚úÖ –¢–µ—Å—Ç 15 –ø—Ä–æ–π–¥–µ–Ω: –ù–∞–π–¥–µ–Ω–æ ${lowStockProducts.length} —Ç–æ–≤–∞—Ä–æ–≤ —Å –æ—Å—Ç–∞—Ç–∫–æ–º ‚â§10`);
  });

  // –¢–ï–°–¢ 16: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä—Ç–∏–π
  test('16. –î–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä—Ç–∏–∏', async () => {
    const activeBatches = await prisma.batch.findMany({
      where: { status: 'active' }
    });

    expect(activeBatches.length).toBeGreaterThan(0);
    expect(activeBatches.every(b => b.status === 'active')).toBe(true);
    
    console.log(`‚úÖ –¢–µ—Å—Ç 16 –ø—Ä–æ–π–¥–µ–Ω: –ù–∞–π–¥–µ–Ω–æ ${activeBatches.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä—Ç–∏–π`);
  });

  // –¢–ï–°–¢ 17: –ü–æ–¥—Å—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è
  test('17. –î–æ–ª–∂–µ–Ω –ø–æ–¥—Å—á–∏—Ç–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è', async () => {
    const today = new Date();
    today.setHours(0, 0, 0, 0);

    const todayUsers = await prisma.user.count({
      where: {
        createdAt: {
          gte: today
        }
      }
    });

    expect(todayUsers).toBeGreaterThanOrEqual(0);
    
    console.log(`‚úÖ –¢–µ—Å—Ç 17 –ø—Ä–æ–π–¥–µ–Ω: –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ ${todayUsers} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è`);
  });

  // –¢–ï–°–¢ 18: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 5 –∑–∞–∫–∞–∑–æ–≤
  test('18. –î–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–∫–∞–∑–æ–≤', async () => {
    const recentOrders = await prisma.order.findMany({
      take: 5,
      orderBy: { createdAt: 'desc' },
      include: {
        user: true
      }
    });

    expect(recentOrders.length).toBeLessThanOrEqual(5);
    
    console.log(`‚úÖ –¢–µ—Å—Ç 18 –ø—Ä–æ–π–¥–µ–Ω: –ü–æ—Å–ª–µ–¥–Ω–∏–µ ${recentOrders.length} –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—É—á–µ–Ω—ã`);
  });

  // –¢–ï–°–¢ 19: –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
  test('19. –î–æ–ª–∂–µ–Ω –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É', async () => {
    const user = await prisma.user.findUnique({
      where: { phone: testUser.phone }
    });

    expect(user).toBeDefined();
    expect(user.id).toBe(testUser.id);
    
    console.log(`‚úÖ –¢–µ—Å—Ç 19 –ø—Ä–æ–π–¥–µ–Ω: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É ${testUser.phone}`);
  });

  // –¢–ï–°–¢ 20: –ü–æ–¥—Å—á–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
  test('20. –î–æ–ª–∂–µ–Ω –ø–æ–¥—Å—á–∏—Ç–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º', async () => {
    const categories = await prisma.category.findMany({
      include: {
        _count: {
          select: { products: true }
        }
      }
    });

    expect(categories.length).toBeGreaterThan(0);
    
    const testCat = categories.find(c => c.id === testCategory.id);
    expect(testCat._count.products).toBeGreaterThanOrEqual(1); // –º–∏–Ω–∏–º—É–º testProduct
    
    console.log(`‚úÖ –¢–µ—Å—Ç 20 –ø—Ä–æ–π–¥–µ–Ω: –ö–∞—Ç–µ–≥–æ—Ä–∏—è "${testCategory.name}" –∏–º–µ–µ—Ç ${testCat._count.products} —Ç–æ–≤–∞—Ä–æ–≤`);
  });

});
