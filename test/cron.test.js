// test/cron.test.js
// –¢–µ—Å—Ç—ã –¥–ª—è Cron Jobs API (—Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏)

const request = require('supertest');
const { PrismaClient } = require('@prisma/client');

// üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò
if (process.env.NODE_ENV !== 'test') {
  throw new Error('üö® –≠—Ç–æ—Ç —Ç–µ—Å—Ç –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –¢–û–õ–¨–ö–û —Å NODE_ENV=test');
}

const prisma = new PrismaClient();
const app = require('../src/server');

jest.setTimeout(30000);

describe('Cron Jobs API Tests', () => {

  afterAll(async () => {
    await prisma.$disconnect();
    console.log('‚úÖ Cron —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã');
  });

  // ========================================
  // –†–ê–ó–î–ï–õ 1: CRON STATUS API
  // ========================================

  test('1. GET /api/cron/status - –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å —Å—Ç–∞—Ç—É—Å cron –∑–∞–¥–∞—á', async () => {
    const response = await request(app)
      .get('/api/cron/status')
      .expect(200);

    expect(response.body).toBeDefined();
    expect(response.body.success).toBe(true);

    console.log('‚úÖ –¢–µ—Å—Ç 1 –ø—Ä–æ–π–¥–µ–Ω: –°—Ç–∞—Ç—É—Å cron –∑–∞–¥–∞—á –ø–æ–ª—É—á–µ–Ω');
  });

  test('2. GET /api/cron/status - –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å serverTime', async () => {
    const response = await request(app)
      .get('/api/cron/status')
      .expect(200);

    expect(response.body.serverTime).toBeDefined();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω—ã–π ISO timestamp
    const serverTime = new Date(response.body.serverTime);
    expect(serverTime.toString()).not.toBe('Invalid Date');

    console.log(`‚úÖ –¢–µ—Å—Ç 2 –ø—Ä–æ–π–¥–µ–Ω: Server time = ${response.body.serverTime}`);
  });

  test('3. GET /api/cron/status - –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á', async () => {
    const response = await request(app)
      .get('/api/cron/status')
      .expect(200);

    expect(response.body.tasks).toBeDefined();
    expect(typeof response.body.tasks).toBe('object');

    const taskCount = Object.keys(response.body.tasks).length;
    console.log(`‚úÖ –¢–µ—Å—Ç 3 –ø—Ä–æ–π–¥–µ–Ω: –ù–∞–π–¥–µ–Ω–æ ${taskCount} cron –∑–∞–¥–∞—á`);
  });

  test('4. GET /api/cron/status - –∑–∞–¥–∞—á–∏ –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É', async () => {
    const response = await request(app)
      .get('/api/cron/status')
      .expect(200);

    const tasks = response.body.tasks;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –∑–∞–¥–∞—á—É
    Object.keys(tasks).forEach(taskName => {
      const task = tasks[taskName];
      
      // –ö–∞–∂–¥–∞—è –∑–∞–¥–∞—á–∞ –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ –ø–æ–ª—è
      expect(task).toBeDefined();
      
      // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
      if (task.enabled !== undefined) {
        expect(typeof task.enabled).toBe('boolean');
      }
      
      if (task.lastRun !== undefined) {
        const lastRun = new Date(task.lastRun);
        expect(lastRun.toString()).not.toBe('Invalid Date');
      }
    });

    console.log('‚úÖ –¢–µ—Å—Ç 4 –ø—Ä–æ–π–¥–µ–Ω: –í—Å–µ –∑–∞–¥–∞—á–∏ –∏–º–µ—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É');
  });

  // ========================================
  // –†–ê–ó–î–ï–õ 2: –ö–û–ù–ö–†–ï–¢–ù–´–ï CRON –ó–ê–î–ê–ß–ò
  // ========================================

  test('5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∑–∞–¥–∞—á–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π', async () => {
    const response = await request(app)
      .get('/api/cron/status')
      .expect(200);

    const tasks = response.body.tasks;
    
    // –ò—â–µ–º –∑–∞–¥–∞—á—É —Å –ø–ª–∞—Ç–µ–∂–∞–º–∏
    const hasPaymentTask = Object.keys(tasks).some(key => 
      key.toLowerCase().includes('payment') || 
      key.toLowerCase().includes('check')
    );

    if (hasPaymentTask) {
      console.log('‚úÖ –¢–µ—Å—Ç 5 –ø—Ä–æ–π–¥–µ–Ω: –ó–∞–¥–∞—á–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π –Ω–∞–π–¥–µ–Ω–∞');
    } else {
      console.log('‚ö†Ô∏è –¢–µ—Å—Ç 5: –ó–∞–¥–∞—á–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)');
    }
  });

  test('6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∑–∞–¥–∞—á–∏ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–æ–≤', async () => {
    const response = await request(app)
      .get('/api/cron/status')
      .expect(200);

    const tasks = response.body.tasks;
    
    // –ò—â–µ–º –∑–∞–¥–∞—á—É —Å –∑–∞–∫–∞–∑–∞–º–∏
    const hasOrderTask = Object.keys(tasks).some(key => 
      key.toLowerCase().includes('order') || 
      key.toLowerCase().includes('cancel') ||
      key.toLowerCase().includes('expire')
    );

    if (hasOrderTask) {
      console.log('‚úÖ –¢–µ—Å—Ç 6 –ø—Ä–æ–π–¥–µ–Ω: –ó–∞–¥–∞—á–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–æ–≤ –Ω–∞–π–¥–µ–Ω–∞');
    } else {
      console.log('‚ö†Ô∏è –¢–µ—Å—Ç 6: –ó–∞–¥–∞—á–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)');
    }
  });

  test('7. GET /api/cron/status - –∑–∞–¥–∞—á–∏ –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å —Å—Ç–∞—Ç—É—Å enabled/disabled', async () => {
    const response = await request(app)
      .get('/api/cron/status')
      .expect(200);

    const tasks = response.body.tasks;
    let tasksWithStatus = 0;

    Object.keys(tasks).forEach(taskName => {
      const task = tasks[taskName];
      if (task.enabled !== undefined) {
        tasksWithStatus++;
      }
    });

    if (tasksWithStatus > 0) {
      console.log(`‚úÖ –¢–µ—Å—Ç 7 –ø—Ä–æ–π–¥–µ–Ω: ${tasksWithStatus} –∑–∞–¥–∞—á –∏–º–µ—é—Ç —Å—Ç–∞—Ç—É—Å`);
    } else {
      console.log('‚ö†Ô∏è –¢–µ—Å—Ç 7: –ó–∞–¥–∞—á–∏ –Ω–µ –∏–º–µ—é—Ç —Å—Ç–∞—Ç—É—Å–∞ enabled (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)');
    }
  });

  // ========================================
  // –†–ê–ó–î–ï–õ 3: –í–ê–õ–ò–î–ê–¶–ò–Ø –ò –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨
  // ========================================

  test('8. GET /api/cron/status - –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏', async () => {
    const response = await request(app)
      .get('/api/cron/status')
      .expect(200);

    expect(response.body.success).toBe(true);

    console.log('‚úÖ –¢–µ—Å—Ç 8 –ø—Ä–æ–π–¥–µ–Ω: Endpoint –ø—É–±–ª–∏—á–Ω—ã–π (–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥)');
  });

  test('9. GET /api/cron/status - –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å JSON', async () => {
    const response = await request(app)
      .get('/api/cron/status')
      .expect(200)
      .expect('Content-Type', /json/);

    expect(typeof response.body).toBe('object');

    console.log('‚úÖ –¢–µ—Å—Ç 9 –ø—Ä–æ–π–¥–µ–Ω: –û—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON');
  });

  test('10. GET /api/cron/status - –¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã', async () => {
    const requests = [];
    
    for (let i = 0; i < 5; i++) {
      requests.push(
        request(app).get('/api/cron/status').expect(200)
      );
    }

    const responses = await Promise.all(requests);

    responses.forEach((response) => {
      expect(response.body.success).toBe(true);
      expect(response.body.tasks).toBeDefined();
    });

    console.log('‚úÖ –¢–µ—Å—Ç 10 –ø—Ä–æ–π–¥–µ–Ω: 5 –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã');
  });

  // ========================================
  // –†–ê–ó–î–ï–õ 4: –§–û–†–ú–ê–¢ –î–ê–ù–ù–´–•
  // ========================================

  test('11. GET /api/cron/status - serverTime –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º', async () => {
    const response = await request(app)
      .get('/api/cron/status')
      .expect(200);

    const serverTime = new Date(response.body.serverTime);
    const now = new Date();
    
    // –†–∞–∑–Ω–∏—Ü–∞ –Ω–µ –±–æ–ª–µ–µ 10 —Å–µ–∫—É–Ω–¥
    const diff = Math.abs(now - serverTime);
    expect(diff).toBeLessThan(10000);

    console.log('‚úÖ –¢–µ—Å—Ç 11 –ø—Ä–æ–π–¥–µ–Ω: Server time –∞–∫—Ç—É–∞–ª–µ–Ω');
  });

  test('12. GET /api/cron/status - –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ', async () => {
    const response1 = await request(app).get('/api/cron/status').expect(200);
    const response2 = await request(app).get('/api/cron/status').expect(200);

    // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º
    const tasks1Count = Object.keys(response1.body.tasks).length;
    const tasks2Count = Object.keys(response2.body.tasks).length;

    expect(tasks1Count).toBe(tasks2Count);

    console.log('‚úÖ –¢–µ—Å—Ç 12 –ø—Ä–æ–π–¥–µ–Ω: –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á —Å—Ç–∞–±–∏–ª–µ–Ω');
  });

  // ========================================
  // –†–ê–ó–î–ï–õ 5: –ú–û–ù–ò–¢–û–†–ò–ù–ì
  // ========================================

  test('13. GET /api/cron/status - –¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—É—Å–∫–∞', async () => {
    const response = await request(app)
      .get('/api/cron/status')
      .expect(200);

    const tasks = response.body.tasks;
    let tasksWithLastRun = 0;

    Object.keys(tasks).forEach(taskName => {
      const task = tasks[taskName];
      if (task.lastRun) {
        const lastRun = new Date(task.lastRun);
        expect(lastRun.toString()).not.toBe('Invalid Date');
        tasksWithLastRun++;
      }
    });

    if (tasksWithLastRun > 0) {
      console.log(`‚úÖ –¢–µ—Å—Ç 13 –ø—Ä–æ–π–¥–µ–Ω: ${tasksWithLastRun} –∑–∞–¥–∞—á –∏–º–µ—é—Ç lastRun`);
    } else {
      console.log('‚ö†Ô∏è –¢–µ—Å—Ç 13: –ó–∞–¥–∞—á–∏ –Ω–µ –∏–º–µ—é—Ç lastRun (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)');
    }
  });

  test('14. GET /api/cron/status - –¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫', async () => {
    const response = await request(app)
      .get('/api/cron/status')
      .expect(200);

    const tasks = response.body.tasks;
    let tasksWithNextRun = 0;

    Object.keys(tasks).forEach(taskName => {
      const task = tasks[taskName];
      if (task.nextRun) {
        const nextRun = new Date(task.nextRun);
        expect(nextRun.toString()).not.toBe('Invalid Date');
        tasksWithNextRun++;
      }
    });

    if (tasksWithNextRun > 0) {
      console.log(`‚úÖ –¢–µ—Å—Ç 14 –ø—Ä–æ–π–¥–µ–Ω: ${tasksWithNextRun} –∑–∞–¥–∞—á –∏–º–µ—é—Ç nextRun`);
    } else {
      console.log('‚ö†Ô∏è –¢–µ—Å—Ç 14: –ó–∞–¥–∞—á–∏ –Ω–µ –∏–º–µ—é—Ç nextRun (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)');
    }
  });

  test('15. GET /api/cron/status - –¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –∑–∞–ø—É—Å–∫–∞', async () => {
    const response = await request(app)
      .get('/api/cron/status')
      .expect(200);

    const tasks = response.body.tasks;
    let tasksWithInterval = 0;

    Object.keys(tasks).forEach(taskName => {
      const task = tasks[taskName];
      if (task.interval || task.schedule || task.cron) {
        tasksWithInterval++;
      }
    });

    if (tasksWithInterval > 0) {
      console.log(`‚úÖ –¢–µ—Å—Ç 15 –ø—Ä–æ–π–¥–µ–Ω: ${tasksWithInterval} –∑–∞–¥–∞—á –∏–º–µ—é—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ`);
    } else {
      console.log('‚ö†Ô∏è –¢–µ—Å—Ç 15: –ó–∞–¥–∞—á–∏ –Ω–µ –∏–º–µ—é—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)');
    }
  });

  // ========================================
  // –†–ê–ó–î–ï–õ 6: EDGE CASES
  // ========================================

  test('16. GET /api/cron/status - –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–∏ –ø—É—Å—Ç–æ–º —Å–ø–∏—Å–∫–µ –∑–∞–¥–∞—á', async () => {
    const response = await request(app)
      .get('/api/cron/status')
      .expect(200);

    expect(response.body.success).toBe(true);
    expect(response.body.tasks).toBeDefined();

    console.log('‚úÖ –¢–µ—Å—Ç 16 –ø—Ä–æ–π–¥–µ–Ω: API —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–∞–∂–µ –±–µ–∑ –∑–∞–¥–∞—á');
  });

  test('17. GET /api/cron/status - –¥–æ–ª–∂–µ–Ω –±—ã—Å—Ç—Ä–æ –æ—Ç–≤–µ—á–∞—Ç—å', async () => {
    const startTime = Date.now();
    
    await request(app)
      .get('/api/cron/status')
      .expect(200);

    const responseTime = Date.now() - startTime;
    expect(responseTime).toBeLessThan(1000); // < 1 —Å–µ–∫—É–Ω–¥—ã

    console.log(`‚úÖ –¢–µ—Å—Ç 17 –ø—Ä–æ–π–¥–µ–Ω: –û—Ç–≤–µ—Ç –∑–∞ ${responseTime}ms`);
  });

  // ========================================
  // –ò–¢–û–ì–û–í–´–ô –¢–ï–°–¢
  // ========================================

  test('–ò–¢–û–ì: Cron Jobs API –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–±–æ—Ç–∞–µ—Ç', async () => {
    console.log('\n' + '='.repeat(70));
    console.log('‚è∞ –ò–¢–û–ì–û–í–ê–Ø –ü–†–û–í–ï–†–ö–ê CRON API');
    console.log('='.repeat(70));

    const response = await request(app)
      .get('/api/cron/status')
      .expect(200);

    expect(response.body.success).toBe(true);
    expect(response.body.tasks).toBeDefined();
    expect(response.body.serverTime).toBeDefined();

    const taskCount = Object.keys(response.body.tasks).length;

    console.log(`‚úÖ Success: true`);
    console.log(`‚úÖ Tasks count: ${taskCount}`);
    console.log(`‚úÖ Server time: ${response.body.serverTime}`);
    console.log('='.repeat(70));
    console.log('üéâ CRON JOBS API –ü–û–õ–ù–û–°–¢–¨–Æ –ü–†–û–¢–ï–°–¢–ò–†–û–í–ê–ù');
    console.log('üéâ 18 –¢–ï–°–¢–û–í –ü–†–û–ô–î–ï–ù–û –£–°–ü–ï–®–ù–û!');
    console.log('='.repeat(70) + '\n');
  });
});
