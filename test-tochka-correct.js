// test-tochka-correct.js
// –¢–µ—Å—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –±–∞–∑–æ–≤—ã–º URL –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏

const axios = require('axios');

const JWT_TOKEN = 'eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiI3NWJmNzBiZTIxYmFlNzdlODBmMmYxYjFjNmMwYmViOSIsInN1YiI6ImY1ZjE1NDNjLTU0NjEtNGJkMS1hOTc5LWQ0ZWQxODUxOGZiNiIsImN1c3RvbWVyX2NvZGUiOiIzMDUyNTA2MjYifQ.L3b9c_R6fQh5KBbM-GqM1kV8PEDunwsgTX09xxBkUl2M5Nm0XgP1FaMfTKcFNO6FFPLQXu_mkbLxzGIGww1PNAz0TGMKyPaM2QUKu83ituy4wSYYgz9R5pjewdMiSV3tnzjL9vKB9RqhMmNozoiqusCaav1Xg3THeFBXqKKqqLwK71NVEPayqE_OJ6fYR5xowgYmkPG1niBdGOWviYkpOkAAAMN9OyTZqHuvmG4BvfNLQmPhL0muk3qLFcKECNZESLRr-t2HoufTEsfzdZoydZPKqa-M4wmxrvx1AC8PG0p6-oUYL0NxxVT1yb3iK1wp2WxgORxdTDceQ3MSqI4Iy41qT886eKuo4PquoRK6-Rfz0dBFSLYEHOflRD1uorWaq1qcIo8T3DddEaq_ukOwdOvMowoZR_AWYPqwBQVJJ-MNrF_rCH7oWOoZjmR1PyRsCja8KeQyKuWrIIPZdp83KgviOOtkZE2KCzYfrlYuo4hRe2aZD83iT5AGIumJW-HD';

// –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –±–∞–∑–æ–≤—ã–π URL –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
const BASE_URL = 'https://enter.tochka.com/uapi';

async function makeRequest(method, endpoint, data = null) {
  try {
    const config = {
      method,
      url: `${BASE_URL}${endpoint}`,
      headers: {
        'Authorization': `Bearer ${JWT_TOKEN}`,
        'Content-Type': 'application/json',
        'Accept': 'application/json'
      },
      timeout: 10000
    };
    
    if (data) {
      config.data = data;
    }
    
    const response = await axios(config);
    return { 
      success: true, 
      data: response.data, 
      status: response.status 
    };
  } catch (error) {
    return { 
      success: false, 
      status: error.response?.status,
      error: error.response?.data || error.message,
      errorCode: error.response?.data?.errorCode
    };
  }
}

async function main() {
  console.log('=====================================');
  console.log('–¢–ï–°–¢ API –¢–û–ß–ö–ê –ë–ê–ù–ö');
  console.log('=====================================\n');
  console.log('–ë–∞–∑–æ–≤—ã–π URL:', BASE_URL);
  console.log('–¢–æ–∫–µ–Ω:', JWT_TOKEN.substring(0, 50) + '...\n');
  
  // 1. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—á–µ—Ç–æ–≤ (—á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ —Ç–æ–∫–µ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç)
  console.log('üìç –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å—á–µ—Ç–æ–≤');
  console.log('GET /open-banking/v1.0/accounts\n');
  
  let result = await makeRequest('GET', '/open-banking/v1.0/accounts');
  
  if (result.success) {
    console.log('‚úÖ –£–°–ü–ï–•! –¢–æ–∫–µ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç');
    console.log('–°—á–µ—Ç–∞:', JSON.stringify(result.data, null, 2).substring(0, 500));
  } else {
    console.log('‚ùå –û—à–∏–±–∫–∞:', result.status);
    console.log('–î–µ—Ç–∞–ª–∏:', result.error);
  }
  
  console.log('\n----------------------------------------\n');
  
  // 2. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ç–æ—á–µ–∫ –¥–ª—è —ç–∫–≤–∞–π—Ä–∏–Ω–≥–∞
  console.log('üìç –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ç–æ—á–µ–∫ (retailers)');
  console.log('GET /acquiring/v2.0/retailers\n');
  
  result = await makeRequest('GET', '/acquiring/v2.0/retailers');
  
  if (result.success) {
    console.log('‚úÖ –£–°–ü–ï–•! –ù–∞–π–¥–µ–Ω—ã —Ç–æ—Ä–≥–æ–≤—ã–µ —Ç–æ—á–∫–∏');
    console.log('–î–∞–Ω–Ω—ã–µ:', JSON.stringify(result.data, null, 2));
    
    if (Array.isArray(result.data) && result.data.length > 0) {
      const merchantId = result.data[0].id || result.data[0].merchantId;
      console.log(`\nüéØ –í–ê–ñ–ù–û: merchantId = ${merchantId}`);
      console.log('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç ID –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π!');
      return merchantId;
    }
  } else {
    console.log('‚ùå –û—à–∏–±–∫–∞:', result.status);
    
    if (result.status === 404) {
      console.log('\n–ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ endpoints...');
      
      // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
      const alternatives = [
        '/acquiring/v1.0/retailers',
        '/acquiring/api/v2.0/retailers',
        '/merchant/v1.0/list'
      ];
      
      for (const alt of alternatives) {
        console.log(`\n–ü—Ä–æ–±—É–µ–º: GET ${alt}`);
        const altResult = await makeRequest('GET', alt);
        if (altResult.success) {
          console.log('‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç!');
          console.log('–î–∞–Ω–Ω—ã–µ:', JSON.stringify(altResult.data, null, 2));
          break;
        } else {
          console.log(`‚ùå ${altResult.status}`);
        }
      }
    }
  }
  
  console.log('\n----------------------------------------\n');
  
  // 3. –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å—Å—ã–ª–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å merchantId)
  console.log('üìç –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ endpoint –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞');
  console.log('POST /acquiring/v2.0/payments\n');
  
  // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∞
  const paymentData = {
    amount: "100.00",
    currency: "RUB", 
    purpose: "–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂",
    merchantId: "test" // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∞ endpoint
  };
  
  result = await makeRequest('POST', '/acquiring/v2.0/payments', paymentData);
  
  if (result.success) {
    console.log('‚úÖ Endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç!');
    console.log('–û—Ç–≤–µ—Ç:', JSON.stringify(result.data, null, 2));
  } else {
    console.log('–°—Ç–∞—Ç—É—Å:', result.status);
    if (result.errorCode) {
      console.log('–ö–æ–¥ –æ—à–∏–±–∫–∏:', result.errorCode);
    }
    console.log('–î–µ—Ç–∞–ª–∏:', JSON.stringify(result.error, null, 2));
    
    if (result.status === 400) {
      console.log('\n‚úÖ –•–æ—Ä–æ—à–∏–µ –Ω–æ–≤–æ—Å—Ç–∏! Endpoint —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.');
      console.log('–û—à–∏–±–∫–∞ 400 –æ–∑–Ω–∞—á–∞–µ—Ç —á—Ç–æ –Ω—É–∂–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.');
      console.log('–ù–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π merchantId.');
    }
  }
  
  console.log('\n=====================================');
  console.log('–ò–¢–û–ì–ò:');
  console.log('=====================================');
  console.log('1. –ë–∞–∑–æ–≤—ã–π URL: https://enter.tochka.com/uapi');
  console.log('2. –¢–æ–∫–µ–Ω: ' + (result.status !== 401 ? '‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' : '‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π'));
  console.log('3. –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥: –ø–æ–ª—É—á–∏—Ç—å merchantId –∏–∑ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞');
  console.log('=====================================\n');
}

main();

/*
–ó–ê–ü–£–°–ö:
node test-tochka-correct.js
*/
